{"version":3,"file":"index-legacy-ZYoYY_5m.js","sources":["../../src/pages/QuoteDraft/index.tsx","../../../../node_modules/uuid/dist/esm-browser/native.js","../../../../node_modules/uuid/dist/esm-browser/v4.js","../../src/hooks/useGetCountry.ts","../../src/utils/quoteUtils.ts","../../src/pages/quote/components/AddToQuote.tsx","../../src/pages/quote/components/ContactInfo.tsx","../../src/pages/quote/components/AddressItemCard.tsx","../../src/pages/quote/components/ChooseAddress.tsx","../../src/pages/quote/components/QuoteAddress.tsx","../../src/pages/quote/components/QuoteSubmissionResponse.tsx","../../src/pages/quote/shared/utils.ts","../../src/pages/quote/components/QuoteSummary.tsx","../../src/components/table/PaginationTable.tsx","../../src/pages/quote/components/QuoteTableCard.tsx","../../src/pages/quote/components/QuoteTable.tsx","../../src/pages/quote/config.ts"],"sourcesContent":["import { useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { ArrowBackIosNew } from '@mui/icons-material';\nimport { Box, Checkbox, FormControlLabel, Stack, Typography } from '@mui/material';\nimport { cloneDeep, concat, uniq } from 'lodash-es';\nimport { v4 as uuid } from 'uuid';\n\nimport CustomButton from '@/components/button/CustomButton';\nimport { getContrastColor } from '@/components/outSideComponents/utils/b3CustomStyles';\nimport B3Spin from '@/components/spin/B3Spin';\nimport { permissionLevels } from '@/constants';\nimport {\n  dispatchEvent,\n  useFeatureFlags,\n  useMobile,\n  useSetCountry,\n  useValidatePermissionWithComparisonType,\n} from '@/hooks';\nimport { useB3Lang } from '@/lib/lang';\nimport { CustomStyleContext } from '@/shared/customStyleButton';\nimport { GlobalContext } from '@/shared/global';\nimport { createQuote, getB2BCustomerAddresses, getBCCustomerAddresses } from '@/shared/service/b2b';\nimport { deleteCart } from '@/shared/service/bc/graphql/cart';\nimport {\n  activeCurrencyInfoSelector,\n  isB2BUserSelector,\n  resetDraftQuoteInfo,\n  resetDraftQuoteList,\n  setDraftQuoteInfo,\n  setDraftQuoteRecipients,\n  setQuoteUserId,\n  useAppDispatch,\n  useAppSelector,\n} from '@/store';\nimport { AddressItemType, BCAddressItemType } from '@/types/address';\nimport {\n  BillingAddress,\n  ContactInfoKeys,\n  QuoteExtraFields,\n  QuoteFormattedItemsProps,\n  QuoteInfo as QuoteInfoType,\n  ShippingAddress,\n} from '@/types/quotes';\nimport { B3LStorage, channelId, snackbar, storeHash } from '@/utils';\nimport { verifyCreatePermission } from '@/utils/b3CheckPermissions';\nimport { b2bPermissionsMap } from '@/utils/b3CheckPermissions/config';\nimport b2bLogger from '@/utils/b3Logger';\nimport { addQuoteDraftProducts, getVariantInfoOOSAndPurchase } from '@/utils/b3Product/b3Product';\nimport { deleteCartData } from '@/utils/cartUtils';\nimport validateObject from '@/utils/quoteUtils';\nimport { validateProducts } from '@/utils/validateProducts';\n\nimport { getProductOptionsFields } from '../../utils/b3Product/shared/config';\nimport { convertBCToB2BAddress } from '../AddressList/shared/config';\nimport { type PageProps } from '../PageProps';\nimport AddToQuote from '../quote/components/AddToQuote';\nimport ContactInfo from '../quote/components/ContactInfo';\nimport QuoteAddress from '../quote/components/QuoteAddress';\nimport QuoteAttachment from '../quote/components/QuoteAttachment';\nimport QuoteInfo from '../quote/components/QuoteInfo';\nimport QuoteNote from '../quote/components/QuoteNote';\nimport QuoteStatus from '../quote/components/QuoteStatus';\nimport QuoteSubmissionResponse from '../quote/components/QuoteSubmissionResponse';\nimport QuoteSummary from '../quote/components/QuoteSummary';\nimport QuoteTable from '../quote/components/QuoteTable';\nimport getAccountFormFields from '../quote/config';\nimport Container from '../quote/style';\nimport getB2BQuoteExtraFields from '../quote/utils/getQuoteExtraFields';\n\ntype BCAddress = {\n  node: BCAddressItemType;\n};\n\ntype B2BAddress = {\n  node: AddressItemType;\n};\n\ninterface Country {\n  countryCode: string;\n  countryName: string;\n  id?: string;\n}\n\ninterface InfoRefProps extends HTMLInputElement {\n  getContactInfoValue: () => any;\n  setShippingInfoValue: (address: any) => void;\n}\n\ninterface QuoteSummaryRef extends HTMLInputElement {\n  refreshSummary: () => void;\n}\n\nconst shippingAddress = {\n  address: '',\n  addressId: 0,\n  apartment: '',\n  city: '',\n  country: '',\n  firstName: '',\n  label: '',\n  lastName: '',\n  phoneNumber: '',\n  state: '',\n  zipCode: '',\n  companyName: '',\n};\n\nconst billingAddress = {\n  address: '',\n  addressId: 0,\n  apartment: '',\n  city: '',\n  country: '',\n  firstName: '',\n  label: '',\n  lastName: '',\n  phoneNumber: '',\n  state: '',\n  zipCode: '',\n  companyName: '',\n};\n\nfunction QuoteDraft({ setOpenPage }: PageProps) {\n  const {\n    state: { countriesList, openAPPParams },\n  } = useContext(GlobalContext);\n  const dispatch = useAppDispatch();\n  const featureFlags = useFeatureFlags();\n\n  const isB2BUser = useAppSelector(isB2BUserSelector);\n  const companyB2BId = useAppSelector(({ company }) => company.companyInfo.id);\n  const companyName = useAppSelector(({ company }) => company.companyInfo.companyName);\n  const customer = useAppSelector(({ company }) => company.customer);\n  const role = useAppSelector(({ company }) => company.customer.role);\n  const enteredInclusiveTax = useAppSelector(\n    ({ storeConfigs }) => storeConfigs.currencies.enteredInclusiveTax,\n  );\n  const draftQuoteList = useAppSelector(({ quoteInfo }) => quoteInfo.draftQuoteList);\n  const salesRepCompanyId = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.id);\n  const salesRepCompanyName = useAppSelector(\n    ({ b2bFeatures }) => b2bFeatures.masqueradeCompany.companyName,\n  );\n  const quoteInfoOrigin = useAppSelector(({ quoteInfo }) => quoteInfo.draftQuoteInfo);\n  const currency = useAppSelector(activeCurrencyInfoSelector);\n  const quoteSubmissionResponseInfo = useAppSelector(\n    ({ global }) => global.quoteSubmissionResponse,\n  );\n  const { selectCompanyHierarchyId } = useAppSelector(\n    ({ company }) => company.companyHierarchyInfo,\n  );\n  const isEnableProduct = useAppSelector(\n    ({ global }) => global.blockPendingQuoteNonPurchasableOOS.isEnableProduct,\n  );\n\n  const {\n    state: {\n      portalStyle: { backgroundColor = '#FEF9F5' },\n    },\n  } = useContext(CustomStyleContext);\n\n  const isMoveStockAndBackorderValidationToBackend =\n    featureFlags['B2B-3318.move_stock_and_backorder_validation_to_backend'];\n\n  const quotesActionsPermission = useMemo(() => {\n    if (isB2BUser) {\n      return verifyCreatePermission(\n        b2bPermissionsMap.quotesCreateActionsPermission,\n        Number(selectCompanyHierarchyId),\n      );\n    }\n\n    return true;\n  }, [isB2BUser, selectCompanyHierarchyId]);\n\n  const navigate = useNavigate();\n\n  const b3Lang = useB3Lang();\n\n  const [isMobile] = useMobile();\n\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const [isEdit, setEdit] = useState<boolean>(false);\n\n  const [addressList, setAddressList] = useState<B2BAddress[]>([]);\n\n  const [shippingSameAsBilling, setShippingSameAsBilling] = useState<boolean>(false);\n  const [billingChange, setBillingChange] = useState<boolean>(false);\n  const [quoteSubmissionResponseOpen, setQuoteSubmissionResponseOpen] = useState<boolean>(false);\n  const [quoteId, setQuoteId] = useState<string | number>('');\n  const [currentCreatedAt, setCurrentCreatedAt] = useState<string | number>('');\n  const [extraFields, setExtraFields] = useState<QuoteFormattedItemsProps[]>([]);\n\n  const quoteSummaryRef = useRef<QuoteSummaryRef | null>(null);\n\n  const [isAddressCompanyHierarchy] = useValidatePermissionWithComparisonType({\n    level: permissionLevels.COMPANY_SUBSIDIARIES,\n    code: b2bPermissionsMap.getAddressesPermission,\n    containOrEqual: 'equal',\n  });\n\n  useSetCountry();\n\n  const contactInfoRef = useRef<InfoRefProps | null>(null);\n  const billingRef = useRef<InfoRefProps | null>(null);\n  const shippingRef = useRef<InfoRefProps | null>(null);\n\n  useEffect(() => {\n    const init = async () => {\n      setLoading(true);\n      const setCustomInfo = (quoteInfo: any) => {\n        const newInfo = {\n          ...quoteInfo,\n        };\n        newInfo.contactInfo = {\n          name: `${customer.firstName} ${customer.lastName}`,\n          email: customer.emailAddress,\n          companyName: companyName || salesRepCompanyName || '',\n          phoneNumber: customer.phoneNumber,\n        };\n        dispatch(setDraftQuoteInfo(newInfo));\n      };\n\n      const quoteInfo = cloneDeep(quoteInfoOrigin);\n\n      try {\n        if (isB2BUser) {\n          const companyId = companyB2BId || salesRepCompanyId;\n\n          let addressB2BList = [];\n          const fetchAddresses = async (id: number) => {\n            const {\n              addresses: { edges },\n            } = await getB2BCustomerAddresses(id);\n            return edges;\n          };\n\n          if (!selectCompanyHierarchyId) {\n            addressB2BList = await fetchAddresses(Number(companyId));\n          } else if (selectCompanyHierarchyId && isAddressCompanyHierarchy) {\n            addressB2BList = await fetchAddresses(Number(selectCompanyHierarchyId));\n          }\n\n          const shippingDefaultAddress = addressB2BList.find(\n            (item: B2BAddress) => item?.node?.isDefaultShipping === 1,\n          );\n          const billingDefaultAddress = addressB2BList.find(\n            (item: B2BAddress) => item?.node?.isDefaultBilling === 1,\n          );\n\n          if (shippingDefaultAddress && validateObject(quoteInfo, 'shippingAddress')) {\n            const addressItem = {\n              label: shippingDefaultAddress?.node?.label || '',\n              firstName: shippingDefaultAddress?.node?.firstName || '',\n              lastName: shippingDefaultAddress?.node?.lastName || '',\n              companyName: shippingDefaultAddress?.node?.company || '',\n              country: shippingDefaultAddress?.node?.countryCode || '',\n              address: shippingDefaultAddress?.node?.addressLine1 || '',\n              apartment: shippingDefaultAddress?.node?.addressLine2 || '',\n              city: shippingDefaultAddress?.node?.city || '',\n              state: shippingDefaultAddress?.node?.state || '',\n              zipCode: shippingDefaultAddress?.node?.zipCode || '',\n              phoneNumber: shippingDefaultAddress?.node?.phoneNumber || '',\n              addressId: shippingDefaultAddress?.node?.id\n                ? Number(shippingDefaultAddress.node.id)\n                : 0,\n            };\n\n            quoteInfo.shippingAddress = addressItem as ShippingAddress;\n          }\n          if (\n            billingDefaultAddress &&\n            (!quoteInfo?.billingAddress || validateObject(quoteInfo, 'billingAddress'))\n          ) {\n            const addressItem = {\n              label: billingDefaultAddress?.node?.label || '',\n              firstName: billingDefaultAddress?.node?.firstName || '',\n              lastName: billingDefaultAddress?.node?.lastName || '',\n              companyName: billingDefaultAddress?.node?.company || '',\n              country: billingDefaultAddress?.node?.countryCode || '',\n              address: billingDefaultAddress?.node?.addressLine1 || '',\n              apartment: billingDefaultAddress?.node?.addressLine2 || '',\n              city: billingDefaultAddress?.node?.city || '',\n              state: billingDefaultAddress?.node?.state || '',\n              zipCode: billingDefaultAddress?.node?.zipCode || '',\n              phoneNumber: billingDefaultAddress?.node?.phoneNumber || '',\n              addressId: billingDefaultAddress?.node?.id\n                ? Number(billingDefaultAddress.node.id)\n                : 0,\n            };\n\n            quoteInfo.billingAddress = addressItem as BillingAddress;\n          }\n\n          setAddressList(addressB2BList);\n        } else if (role !== 100) {\n          const {\n            customerAddresses: { edges: addressBCList = [] },\n          } = await getBCCustomerAddresses();\n\n          const list = addressBCList.map((address: BCAddress) => ({\n            node: convertBCToB2BAddress(address.node),\n          }));\n          setAddressList(list);\n        }\n\n        const extraFieldsInfo = await getB2BQuoteExtraFields();\n        if (extraFieldsInfo.length) {\n          setExtraFields(extraFieldsInfo);\n          const preExtraFields = quoteInfo.extraFields;\n          const defaultValues = extraFieldsInfo?.map((field) => {\n            const defaultValue =\n              preExtraFields?.find((item: QuoteExtraFields) => item.fieldName === field.name)\n                ?.value || field?.default;\n\n            return {\n              id: Number(field.id),\n              fieldName: field.name,\n              value: defaultValue || '',\n            };\n          });\n          quoteInfo.extraFields = defaultValues;\n        }\n\n        if (\n          quoteInfo &&\n          (!quoteInfo?.contactInfo || validateObject(quoteInfo, 'contactInfo')) &&\n          Number(role) !== 100\n        ) {\n          setCustomInfo(quoteInfo);\n        } else if (quoteInfo) {\n          dispatch(setDraftQuoteInfo(quoteInfo));\n        }\n      } finally {\n        const quoteUserId = customer.b2bId || customer.id || 0;\n        dispatch(setQuoteUserId(Number(quoteUserId)));\n\n        setLoading(false);\n      }\n    };\n\n    init();\n    // disabling as we only need to run this once and values at starting render are good enough\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectCompanyHierarchyId, isAddressCompanyHierarchy]);\n\n  const quoteAndExtraFieldsInfo = useMemo(() => {\n    const contactInfo: CustomFieldItems = quoteInfoOrigin.contactInfo || {};\n\n    return {\n      info: {\n        quoteTitle: contactInfo?.quoteTitle || '',\n        referenceNumber: quoteInfoOrigin?.referenceNumber || '',\n      },\n      extraFields: quoteInfoOrigin.extraFields || [],\n      recipients: quoteInfoOrigin.recipients || [],\n    };\n  }, [quoteInfoOrigin]);\n\n  const getAddress = () => {\n    const addressSaveInfo = {\n      shippingAddress,\n      billingAddress,\n    };\n\n    if (billingRef?.current) {\n      addressSaveInfo.billingAddress = billingRef.current.getContactInfoValue();\n    }\n    if (shippingRef?.current) {\n      addressSaveInfo.shippingAddress = shippingRef.current.getContactInfoValue();\n    }\n\n    return addressSaveInfo;\n  };\n\n  const handleSaveCCEmail = async (ccEmail: string[]) => {\n    dispatch(setDraftQuoteRecipients(ccEmail));\n  };\n\n  const handleCollectingData = async (saveInfo: QuoteInfoType) => {\n    if (contactInfoRef?.current) {\n      const contactInfo = await contactInfoRef.current.getContactInfoValue();\n      if (!contactInfo) return false;\n\n      const currentRecipients = saveInfo?.recipients || [];\n      if (contactInfo.ccEmail.trim().length) {\n        saveInfo.recipients = uniq(concat(currentRecipients, [contactInfo.ccEmail]));\n      }\n\n      saveInfo.contactInfo = {\n        name: contactInfo?.name,\n        email: contactInfo?.email,\n        companyName: contactInfo?.companyName || '',\n        phoneNumber: contactInfo?.phoneNumber,\n        quoteTitle: contactInfo?.quoteTitle,\n      };\n      saveInfo.referenceNumber = contactInfo?.referenceNumber || '';\n\n      const extraFieldsInfo = extraFields.map((field) => ({\n        id: Number(field.id),\n        fieldName: field.name,\n        value: field.name ? contactInfo[field.name] : '',\n      }));\n      saveInfo.extraFields = extraFieldsInfo;\n\n      return true;\n    }\n    return false;\n  };\n\n  const handleSaveInfoClick = async () => {\n    const saveInfo = cloneDeep(quoteInfoOrigin);\n    if (contactInfoRef?.current) {\n      const data = await handleCollectingData(saveInfo);\n      if (!data) return;\n    }\n\n    const { shippingAddress, billingAddress } = getAddress();\n\n    saveInfo.shippingAddress = shippingAddress;\n    saveInfo.billingAddress = billingAddress;\n\n    const isComplete = Object.keys(saveInfo.contactInfo).every((key: string) => {\n      if (key === 'phoneNumber' || key === 'companyName' || key === 'quoteTitle') {\n        return true;\n      }\n      return !!saveInfo.contactInfo[key as ContactInfoKeys];\n    });\n\n    if (isComplete) {\n      dispatch(setDraftQuoteInfo(saveInfo));\n      setEdit(false);\n    }\n  };\n\n  const handleEditInfoClick = () => {\n    setEdit(true);\n  };\n\n  const accountFormFields = getAccountFormFields(isMobile, b3Lang);\n\n  const updateSummary = () => {\n    quoteSummaryRef.current?.refreshSummary();\n  };\n\n  const addToQuote = async (products: CustomFieldItems[]) => {\n    if (isMoveStockAndBackorderValidationToBackend) {\n      const validatedProducts = await validateProducts(products, b3Lang);\n\n      addQuoteDraftProducts(validatedProducts);\n\n      return validatedProducts.length > 0;\n    }\n\n    addQuoteDraftProducts(products);\n\n    return true;\n  };\n\n  const getFileList = (files: CustomFieldItems[]) => {\n    if (role === 100) {\n      return [];\n    }\n\n    return files.map((file) => ({\n      fileUrl: file.fileUrl,\n      fileName: file.fileName,\n      fileType: file.fileType,\n      fileSize: file.fileSize,\n    }));\n  };\n\n  const handleReset = () => {\n    dispatch(resetDraftQuoteInfo());\n    dispatch(resetDraftQuoteList());\n    B3LStorage.delete('cartToQuoteId');\n  };\n\n  const handleAfterSubmit = (\n    inpQuoteId?: string | number,\n    inpCurrentCreatedAt?: string | number,\n  ) => {\n    const currentQuoteId = inpQuoteId || quoteId;\n    const createdAt = inpCurrentCreatedAt || currentCreatedAt;\n\n    if (currentQuoteId) {\n      handleReset();\n      navigate(`/quoteDetail/${currentQuoteId}?date=${createdAt}`, {\n        state: {\n          to: 'draft',\n        },\n      });\n    }\n  };\n\n  const handleSubmit = async () => {\n    if (loading) {\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      const info = cloneDeep(quoteInfoOrigin);\n      if (isEdit && contactInfoRef?.current) {\n        const data = await handleCollectingData(info);\n        if (!data) return;\n      }\n\n      const contactInfo = info?.contactInfo || {};\n\n      const quoteTitle = contactInfo?.quoteTitle || '';\n\n      if ('quoteTitle' in contactInfo) delete contactInfo.quoteTitle;\n\n      const isComplete = Object.keys(contactInfo).every((key: string) => {\n        if (key === 'phoneNumber' || key === 'companyName') {\n          return true;\n        }\n\n        return contactInfo && !!contactInfo[key as ContactInfoKeys];\n      });\n\n      if (validateObject(quoteInfoOrigin, 'contactInfo') || !isComplete) {\n        snackbar.error(b3Lang('quoteDraft.addQuoteInfo'));\n        return;\n      }\n\n      if (!draftQuoteList || draftQuoteList.length === 0) {\n        snackbar.error(b3Lang('quoteDraft.submit'));\n        return;\n      }\n\n      if (!isEnableProduct && !isMoveStockAndBackorderValidationToBackend) {\n        const itHasInvalidProduct = draftQuoteList.some((item) => {\n          return getVariantInfoOOSAndPurchase(item)?.name;\n        });\n\n        if (itHasInvalidProduct) {\n          snackbar.error(b3Lang('quoteDraft.submit.errorTip'));\n          return;\n        }\n      }\n\n      const note = info?.note || '';\n      const newNote = note.trim().replace(/[\\r\\n]/g, '\\\\n');\n\n      const perfectAddress = (address: ShippingAddress | BillingAddress) => {\n        const newAddress = cloneDeep(address);\n\n        const countryItem = countriesList?.find(\n          (item: Country) => item.countryCode === newAddress.country,\n        );\n\n        if (countryItem) {\n          newAddress.country = countryItem.countryName;\n        }\n\n        newAddress.address = address?.address || '';\n        newAddress.apartment = address?.apartment || '';\n\n        return newAddress;\n      };\n\n      const { shippingAddress: editShippingAddress, billingAddress: editBillingAddress } =\n        billingRef?.current ? getAddress() : info;\n\n      const shippingAddress = editShippingAddress ? perfectAddress(editShippingAddress) : {};\n\n      const billingAddress = editBillingAddress ? perfectAddress(editBillingAddress) : {};\n\n      let allPrice = 0;\n      let allTaxPrice = 0;\n\n      const calculationTime = (value: string | number) => {\n        if (typeof value === 'string' && value.includes('-')) {\n          return `${new Date(value).getTime() / 1000}`;\n        }\n        return value;\n      };\n\n      const productList = draftQuoteList.map((item) => {\n        const { node } = item;\n        const product = {\n          ...node.productsSearch,\n          selectOptions: node?.optionList || '',\n        };\n\n        const productFields = getProductOptionsFields(product, {});\n        const optionsList =\n          productFields\n            .map((item) => ({\n              optionId: item.optionId,\n              optionValue:\n                item.fieldType === 'date' ? calculationTime(item.optionValue) : item.optionValue,\n              optionLabel: `${item.valueText}`,\n              optionName: item.valueLabel,\n              type: item?.fieldOriginType || item.fieldType,\n            }))\n            .filter((list: CustomFieldItems) => !!list.optionName) || [];\n\n        const variants = node?.productsSearch?.variants;\n        let variantsItem;\n        if (Array.isArray(variants)) {\n          variantsItem = variants.find((item) => item.sku === node.variantSku);\n        }\n\n        allPrice += Number(node?.basePrice || 0) * Number(node?.quantity || 0);\n\n        allTaxPrice += Number(node?.taxPrice || 0) * Number(node?.quantity || 0);\n\n        const items = {\n          productId: node?.productsSearch?.id,\n          sku: node.variantSku,\n          basePrice: Number(node?.basePrice || 0).toFixed(currency.decimal_places),\n          discount: '0.00',\n          offeredPrice: Number(node?.basePrice || 0).toFixed(currency.decimal_places),\n          quantity: node.quantity,\n          variantId: variantsItem?.variant_id,\n          imageUrl: node.primaryImage,\n          productName: node.productName,\n          options: optionsList,\n          itemId: uuid(),\n        };\n\n        return items;\n      });\n\n      const fileList = getFileList(quoteInfoOrigin?.fileInfo || []);\n\n      const data = {\n        message: newNote,\n        legalTerms: '',\n        totalAmount: enteredInclusiveTax\n          ? allPrice.toFixed(currency.decimal_places)\n          : (allPrice + allTaxPrice).toFixed(currency.decimal_places),\n        grandTotal: allPrice.toFixed(currency.decimal_places),\n        subtotal: allPrice.toFixed(currency.decimal_places),\n        companyId: isB2BUser ? selectCompanyHierarchyId || companyB2BId || salesRepCompanyId : '',\n        storeHash,\n        quoteTitle,\n        discount: '0.00',\n        channelId,\n        userEmail: customer.emailAddress,\n        shippingAddress,\n        billingAddress,\n        contactInfo,\n        productList,\n        fileList,\n        taxTotal: allTaxPrice.toFixed(currency.decimal_places),\n        currency: {\n          currencyExchangeRate: currency.currency_exchange_rate,\n          token: currency.token,\n          location: currency.token_location,\n          decimalToken: currency.decimal_token,\n          decimalPlaces: currency.decimal_places,\n          thousandsToken: currency.thousands_token,\n          currencyCode: currency.currency_code,\n        },\n        referenceNumber: `${info.referenceNumber}` || '',\n        extraFields: info.extraFields || [],\n        recipients: info.recipients || [],\n      };\n\n      if (!dispatchEvent('on-quote-create', data)) {\n        throw new Error();\n      }\n\n      const response = await createQuote(data);\n\n      if (isMoveStockAndBackorderValidationToBackend) {\n        if (response?.error?.extensions?.productValidationErrors?.length) {\n          response.error.extensions.productValidationErrors.forEach(\n            (err: { productId: number }) => {\n              snackbar.error(\n                b3Lang('quoteDraft.notification.productCannotBeAddedToQuote', {\n                  productId: err.productId,\n                }),\n              );\n            },\n          );\n\n          return;\n        }\n      }\n\n      const {\n        quoteCreate: {\n          quote: { id, createdAt },\n        },\n      } = response;\n\n      setQuoteId(id);\n      setCurrentCreatedAt(createdAt);\n\n      if (id) {\n        const cartId = B3LStorage.get('cartToQuoteId');\n        const deleteCartObject = deleteCartData(cartId);\n\n        await deleteCart(deleteCartObject);\n      }\n\n      if (quoteSubmissionResponseInfo.value === '0') {\n        handleAfterSubmit(id, createdAt);\n      } else {\n        setQuoteSubmissionResponseOpen(true);\n      }\n    } catch (error: any) {\n      b2bLogger.error(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCloseQuoteSubmissionResponse = () => {\n    setQuoteSubmissionResponseOpen(false);\n\n    handleAfterSubmit();\n  };\n\n  const backText = () => {\n    let text =\n      Number(role) === 100\n        ? b3Lang('quoteDraft.button.back')\n        : b3Lang('quoteDraft.button.backToQuoteLists');\n    if (openAPPParams?.quoteBtn === 'open') {\n      text = b3Lang('quoteDraft.button.back');\n    } else if (openAPPParams?.quoteBtn === 'add') {\n      text = b3Lang('quoteDraft.button.backToProduct');\n    }\n\n    return text;\n  };\n\n  useEffect(() => {\n    if (billingChange && shippingSameAsBilling) {\n      if (billingRef.current) {\n        const billingAddress = billingRef.current.getContactInfoValue();\n\n        if (shippingRef.current) {\n          shippingRef.current.setShippingInfoValue(billingAddress);\n        }\n      }\n    }\n  }, [billingChange, shippingSameAsBilling]);\n\n  return (\n    <B3Spin isSpinning={loading}>\n      <Box\n        sx={{\n          mb: '60px',\n          width: '100%',\n        }}\n      >\n        <Box\n          sx={{\n            marginBottom: '10px',\n            width: 'fit-content',\n            displayPrint: 'none',\n          }}\n        >\n          <Box\n            sx={{\n              color: 'primary.main',\n              cursor: 'pointer',\n              display: 'flex',\n              alignItems: 'center',\n            }}\n            onClick={() => {\n              if (openAPPParams?.quoteBtn || Number(role) === 100) {\n                navigate('/');\n                setOpenPage({\n                  isOpen: false,\n                  openUrl: '',\n                });\n              } else {\n                navigate('/quotes');\n              }\n            }}\n          >\n            <ArrowBackIosNew\n              fontSize=\"small\"\n              sx={{\n                fontSize: '12px',\n                marginRight: '0.5rem',\n              }}\n            />\n            <p\n              style={{\n                margin: '0',\n              }}\n            >\n              {backText()}\n            </p>\n          </Box>\n        </Box>\n        <Box\n          sx={{\n            display: 'flex',\n            justifyContent: 'space-between',\n          }}\n        >\n          <Box\n            sx={{\n              display: 'flex',\n              mb: '24px',\n              flexDirection: isMobile ? 'column' : 'row',\n              alignItems: isMobile ? 'flex-start' : 'center',\n            }}\n          >\n            <Typography\n              component=\"h3\"\n              sx={{\n                fontSize: '34px',\n                mr: '1rem',\n                mb: isMobile ? '1rem' : '0',\n                color: getContrastColor(backgroundColor),\n              }}\n            >\n              {b3Lang('quoteDraft.title.Quote')}\n            </Typography>\n            <QuoteStatus code=\"0\" />\n          </Box>\n          {quotesActionsPermission && (\n            <Box>\n              {isMobile ? (\n                <Box\n                  sx={{\n                    position: 'fixed',\n                    left: 0,\n                    bottom: 0,\n                    background: '#FFF',\n                    width: '100%',\n                    display: 'flex',\n                    p: '8px 0',\n                    zIndex: 100,\n                    justifyContent: 'center',\n                  }}\n                >\n                  <CustomButton\n                    variant=\"contained\"\n                    size=\"small\"\n                    disabled={loading}\n                    sx={{\n                      height: '38px',\n                      width: '90%',\n                    }}\n                    onClick={handleSubmit}\n                  >\n                    {b3Lang('quoteDraft.button.submit')}\n                  </CustomButton>\n                </Box>\n              ) : (\n                <CustomButton\n                  variant=\"contained\"\n                  size=\"small\"\n                  disabled={loading}\n                  sx={{\n                    padding: '8px 22px',\n                    alignSelf: 'center',\n                    marginBottom: '24px',\n                  }}\n                  onClick={handleSubmit}\n                >\n                  {b3Lang('quoteDraft.button.submit')}\n                </CustomButton>\n              )}\n            </Box>\n          )}\n        </Box>\n\n        <Box>\n          {!isEdit && (\n            <QuoteInfo\n              quoteAndExtraFieldsInfo={quoteAndExtraFieldsInfo}\n              status=\"Draft\"\n              contactInfo={quoteInfoOrigin?.contactInfo}\n              shippingAddress={quoteInfoOrigin?.shippingAddress}\n              billingAddress={quoteInfoOrigin?.billingAddress || {}}\n              handleEditInfoClick={handleEditInfoClick}\n            />\n          )}\n          {isEdit && (\n            <Container flexDirection=\"column\">\n              <ContactInfo\n                emailAddress={customer.emailAddress}\n                info={quoteInfoOrigin?.contactInfo}\n                referenceNumber={quoteInfoOrigin?.referenceNumber || ''}\n                quoteExtraFields={extraFields}\n                extraFieldsDefault={quoteInfoOrigin.extraFields || []}\n                recipients={quoteInfoOrigin?.recipients || []}\n                handleSaveCCEmail={handleSaveCCEmail}\n                ref={contactInfoRef}\n              />\n              <Box\n                sx={{\n                  display: 'flex',\n                  mt: isMobile ? 0 : '3rem',\n                  flexDirection: isMobile ? 'column' : 'row',\n                }}\n              >\n                <QuoteAddress\n                  title={b3Lang('quoteDraft.section.billing')}\n                  info={quoteInfoOrigin?.billingAddress}\n                  addressList={addressList}\n                  pr={isMobile ? 0 : '8px'}\n                  ref={billingRef}\n                  role={role}\n                  accountFormFields={accountFormFields}\n                  shippingSameAsBilling={shippingSameAsBilling}\n                  type=\"billing\"\n                  setBillingChange={setBillingChange}\n                />\n                <QuoteAddress\n                  title={b3Lang('quoteDraft.section.shipping')}\n                  info={quoteInfoOrigin?.shippingAddress}\n                  addressList={addressList}\n                  pl={isMobile ? 0 : '8px'}\n                  ref={shippingRef}\n                  role={role}\n                  accountFormFields={accountFormFields}\n                  shippingSameAsBilling={shippingSameAsBilling}\n                  type=\"shipping\"\n                  setBillingChange={setBillingChange}\n                />\n              </Box>\n              <FormControlLabel\n                label={b3Lang('quoteDraft.checkbox.sameAddressShippingAndBilling')}\n                control={\n                  <Checkbox\n                    checked={shippingSameAsBilling}\n                    onChange={(e) => {\n                      setShippingSameAsBilling(e.target.checked);\n                      if (billingRef.current) {\n                        const billingAddress = billingRef.current.getContactInfoValue();\n\n                        if (shippingRef.current && e.target.checked) {\n                          shippingRef.current.setShippingInfoValue(billingAddress);\n                        }\n                      }\n                    }}\n                  />\n                }\n                sx={{\n                  mt: 2,\n                }}\n              />\n              <CustomButton\n                sx={{\n                  mt: '20px',\n                  mb: '15px',\n                }}\n                onClick={handleSaveInfoClick}\n                variant=\"outlined\"\n              >\n                {b3Lang('quoteDraft.button.saveInfo')}\n              </CustomButton>\n            </Container>\n          )}\n        </Box>\n        <Box\n          sx={{\n            mt: '20px',\n            display: 'flex',\n            flexDirection: isMobile ? 'column' : 'row',\n            alignItems: 'flex-start',\n          }}\n        >\n          <Container\n            flexDirection=\"column\"\n            xs={{\n              flexBasis: isMobile ? '100%' : '680px',\n              flexGrow: 2,\n              marginRight: '20px',\n              marginBottom: '20px',\n              boxShadow:\n                '0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px rgba(0, 0, 0, 0.14), 0px 1px 3px rgba(0, 0, 0, 0.12)',\n              borderRadius: '4px',\n            }}\n          >\n            <QuoteTable\n              updateSummary={updateSummary}\n              total={draftQuoteList.length}\n              items={draftQuoteList}\n            />\n          </Container>\n\n          <Container\n            flexDirection=\"column\"\n            xs={{\n              flexBasis: isMobile ? '100%' : '340px',\n              marginBottom: '20px',\n              backgroundColor: 'transparent',\n              padding: 0,\n              flexGrow: 1,\n            }}\n          >\n            <Stack\n              spacing={2}\n              sx={{\n                width: '100%',\n              }}\n            >\n              <QuoteSummary ref={quoteSummaryRef} />\n              <AddToQuote updateList={updateSummary} addToQuote={addToQuote} />\n\n              <QuoteNote quoteStatus=\"Draft\" />\n\n              {role !== 100 && <QuoteAttachment status={0} />}\n            </Stack>\n          </Container>\n        </Box>\n      </Box>\n      <QuoteSubmissionResponse\n        isOpen={quoteSubmissionResponseOpen}\n        onClose={handleCloseQuoteSubmissionResponse}\n        quoteSubmissionResponseInfo={quoteSubmissionResponseInfo}\n      />\n    </B3Spin>\n  );\n}\n\nexport default QuoteDraft;\n","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default { randomUUID };\n","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nfunction v4(options, buf, offset) {\n    if (native.randomUUID && !buf && !options) {\n        return native.randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random ?? options.rng?.() ?? rng();\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return unsafeStringify(rnds);\n}\nexport default v4;\n","import { useContext, useEffect } from 'react';\nimport { Control, FieldValues, UseFormGetValues, UseFormSetValue, useWatch } from 'react-hook-form';\n\nimport { GlobalContext } from '@/shared/global';\nimport { Country, State } from '@/shared/global/context/config';\nimport { getB2BCountries } from '@/shared/service/b2b';\n\nconst useSetCountry = () => {\n  const {\n    state: { countriesList },\n    dispatch,\n  } = useContext(GlobalContext);\n\n  useEffect(() => {\n    const init = async () => {\n      if (countriesList && !countriesList.length) {\n        const { countries } = await getB2BCountries();\n\n        dispatch({\n          type: 'common',\n          payload: {\n            countriesList: countries,\n          },\n        });\n      }\n    };\n    init();\n    // ignore dispatch, it's not affecting any value from this\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [countriesList]);\n};\n\ninterface FormFieldsProps extends Record<string, any> {\n  name: string;\n  label?: string;\n  required?: boolean;\n  fieldType?: string;\n  default?: string | Array<any> | number;\n  xs: number;\n  variant: string;\n  size: string;\n  options?: any[];\n}\n\ninterface GetCountryProps {\n  setAddress: (arr: FormFieldsProps[]) => void;\n  setValue: UseFormSetValue<FieldValues>;\n  getValues: UseFormGetValues<FieldValues>;\n  addresses: FormFieldsProps[];\n  control: Control;\n}\n\nconst useGetCountry = ({\n  setAddress,\n  setValue,\n  getValues,\n  control,\n  addresses,\n}: GetCountryProps) => {\n  const {\n    state: { countriesList },\n  } = useContext(GlobalContext);\n\n  const countryCode = useWatch({\n    control,\n    name: 'country',\n  });\n\n  // Populate country array\n  useEffect(() => {\n    const countriesFieldIndex = addresses.findIndex(\n      (formFields: FormFieldsProps) => formFields.name === 'country',\n    );\n    if (countriesList?.length && countriesFieldIndex !== -1) {\n      setAddress(\n        addresses.map((addressField, addressFieldIndex) => {\n          if (countriesFieldIndex === addressFieldIndex) {\n            return { ...addressField, options: countriesList };\n          }\n          return addressField;\n        }),\n      );\n    }\n    // ignore addresses cause it will trigger loop array\n    // ignore setAddress due it's no affecting any logic\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [countriesList]);\n\n  // Populate state array when the user change selected country\n  useEffect(() => {\n    if (!countryCode || !countriesList?.length) return;\n    const stateList =\n      countriesList.find((country: Country) => country.countryCode === countryCode)?.states || [];\n    const stateFieldIndex = addresses.findIndex(\n      (formFields: FormFieldsProps) => formFields.name === 'state',\n    );\n    if (stateFieldIndex !== -1) {\n      setAddress(\n        addresses.map((addressField, addressFieldIndex) => {\n          if (stateFieldIndex === addressFieldIndex) {\n            if (stateList.length > 0) {\n              return {\n                ...addressField,\n                fieldType: 'dropdown',\n                options: stateList,\n                required: true,\n              };\n            }\n            return { ...addressField, fieldType: 'text', options: [], required: false };\n          }\n          return addressField;\n        }),\n      );\n    }\n\n    const stateVal = getValues('state');\n\n    setValue(\n      'state',\n      stateVal &&\n        countryCode &&\n        (stateList.find((state: State) => state.stateName === stateVal) || stateList.length === 0)\n        ? stateVal\n        : '',\n    );\n    // ignore addresses cause it will trigger loop array\n    // ignore setAddress, getValues and setValue due they're not affecting any value from this\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [countryCode, countriesList]);\n};\n\nexport { useGetCountry, useSetCountry };\n","import { QuoteInfo } from '@/types/quotes';\n\ntype ValidKeys = 'contactInfo' | 'shippingAddress' | 'billingAddress';\n\nconst validateObject = (quoteInfo: QuoteInfo, key: ValidKeys) =>\n  Object.values(quoteInfo?.[key]).every((x) => x === '' || x === 0);\n\nexport default validateObject;\n","import { useState } from 'react';\nimport { UploadFile as UploadFileIcon } from '@mui/icons-material';\nimport { Box, Card, CardContent, Divider } from '@mui/material';\nimport { v1 as uuid } from 'uuid';\n\nimport { B3CollapseContainer, B3Upload } from '@/components';\nimport CustomButton from '@/components/button/CustomButton';\nimport { PRODUCT_DEFAULT_IMAGE } from '@/constants';\nimport { useBlockPendingAccountViewPrice } from '@/hooks';\nimport { useB3Lang } from '@/lib/lang';\nimport { searchProducts } from '@/shared/service/b2b';\nimport { useAppSelector } from '@/store';\nimport { snackbar } from '@/utils';\nimport b2bLogger from '@/utils/b3Logger';\nimport { calculateProductListPrice, validProductQty } from '@/utils/b3Product/b3Product';\nimport { conversionProductsList } from '@/utils/b3Product/shared/config';\n\nimport QuickAdd from '../../ShoppingListDetails/components/QuickAdd';\nimport SearchProduct from '../../ShoppingListDetails/components/SearchProduct';\n\ninterface AddToListProps {\n  updateList: () => void;\n  addToQuote: (products: CustomFieldItems[]) => Promise<boolean>;\n}\n\nexport default function AddToQuote(props: AddToListProps) {\n  const { updateList, addToQuote } = props;\n\n  const companyId = useAppSelector(({ company }) => company.companyInfo.id);\n  const customerGroupId = useAppSelector(({ company }) => company.customer.customerGroupId);\n  const companyStatus = useAppSelector(({ company }) => company.companyInfo.status);\n\n  const [isOpenBulkLoadCSV, setIsOpenBulkLoadCSV] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [blockPendingAccountViewPrice] = useBlockPendingAccountViewPrice();\n\n  const b3Lang = useB3Lang();\n\n  const getNewQuoteProduct = (products: CustomFieldItems[]) =>\n    products.map((product) => {\n      const {\n        variantId,\n        newSelectOptionList,\n        id: productId,\n        name: productName,\n        quantity,\n        variants = [],\n        basePrice,\n        taxPrice,\n        calculatedValue,\n      } = product;\n\n      const variantInfo =\n        variants.length === 1\n          ? variants[0]\n          : variants.find((item: CustomFieldItems) => item.variant_id === variantId);\n\n      const { image_url: primaryImage = '', sku: variantSku } = variantInfo;\n\n      let selectOptions;\n      try {\n        selectOptions = JSON.stringify(newSelectOptionList);\n      } catch (error) {\n        selectOptions = '[]';\n      }\n\n      const taxExclusive = variantInfo.bc_calculated_price.tax_exclusive;\n      const taxInclusive = variantInfo.bc_calculated_price.tax_inclusive;\n\n      const basePriceExclusiveTax = basePrice || taxExclusive;\n\n      const tax = taxPrice || Number(taxInclusive) - Number(taxExclusive);\n\n      return {\n        node: {\n          basePrice: basePriceExclusiveTax,\n          taxPrice: tax,\n          optionList: selectOptions,\n          id: uuid(),\n          primaryImage,\n          productId,\n          productName,\n          calculatedValue,\n          productsSearch: {\n            ...product,\n            selectOptions,\n          },\n          quantity,\n          variantSku,\n        },\n      };\n    });\n\n  const addToList = async (products: CustomFieldItems[]) => {\n    const newProducts = getNewQuoteProduct(products);\n    const noSkuProducts = products.filter(({ sku, variantId, variants }) => {\n      const currentProduct = variants.find(\n        (item: CustomFieldItems) => item.variant_id === variantId || item.variantId === variantId,\n      );\n\n      const variantSku = currentProduct.sku;\n\n      return !(sku || variantSku);\n    });\n    if (noSkuProducts.length > 0) {\n      snackbar.error(b3Lang('quoteDraft.notification.cantAddProductsNoSku'));\n    }\n\n    if (noSkuProducts.length === products.length) return;\n\n    const success = await addToQuote(newProducts);\n\n    if (success) {\n      snackbar.success(b3Lang('quoteDraft.notification.productSingular'));\n    }\n  };\n\n  const quickAddToList = async (variantProducts: CustomFieldItems[]) => {\n    const productIds = variantProducts.map((item) => item.productId);\n\n    const { productsSearch } = await searchProducts({\n      productIds,\n      companyId,\n      customerGroupId,\n    });\n\n    const productList = conversionProductsList(productsSearch).map((product: CustomFieldItems) => {\n      const variantProduct =\n        variantProducts.find(\n          (variantProduct: CustomFieldItems) => variantProduct.productId === product.id,\n        ) || {};\n\n      const { variantId, newSelectOptionList, quantity } = variantProduct;\n\n      return {\n        ...product,\n        variantId,\n        newSelectOptionList,\n        quantity,\n      };\n    });\n\n    await calculateProductListPrice(productList);\n\n    const newProducts = getNewQuoteProduct(productList);\n\n    const success = await addToQuote(newProducts);\n\n    if (success) {\n      snackbar.success(b3Lang('quoteDraft.notification.productPlural'));\n    }\n  };\n\n  const getOptionsList = (options: CustomFieldItems) => {\n    if (options?.length === 0) return [];\n\n    const option = options.map(\n      ({ option_id: optionId, id }: { option_id: number | string; id: string | number }) => ({\n        optionId: `attribute[${optionId}]`,\n        optionValue: id,\n      }),\n    );\n\n    return option;\n  };\n\n  const handleCSVAddToList = async (productsData: CustomFieldItems) => {\n    setIsLoading(true);\n    try {\n      const { validProduct } = productsData;\n\n      const productIds: number[] = [];\n      validProduct.forEach((product: CustomFieldItems) => {\n        const { products } = product;\n\n        if (!productIds.includes(Number(products.productId))) {\n          productIds.push(Number(products.productId));\n        }\n      });\n\n      const { productsSearch } = await searchProducts({\n        productIds,\n        companyId,\n        customerGroupId,\n      });\n\n      const newProductInfo: CustomFieldItems = conversionProductsList(productsSearch);\n\n      const newProducts: CustomFieldItems[] = [];\n      validProduct.forEach((product: CustomFieldItems) => {\n        const {\n          products: { option, variantSku, productId, productName, variantId },\n          qty,\n        } = product;\n\n        const optionsList = getOptionsList(option);\n\n        const currentProductSearch = newProductInfo.find(\n          (product: CustomFieldItems) => Number(product.id) === Number(productId),\n        );\n\n        const variantItem = currentProductSearch.variants.find(\n          (item: CustomFieldItems) => item?.sku?.toUpperCase() === variantSku?.toUpperCase(),\n        );\n\n        const quoteListitem = {\n          node: {\n            id: uuid(),\n            variantSku: variantItem?.sku,\n            variantId,\n            productsSearch: {\n              ...currentProductSearch,\n              newSelectOptionList: optionsList,\n              variantId,\n            },\n            primaryImage: variantItem.image_url || PRODUCT_DEFAULT_IMAGE,\n            productName,\n            quantity: Number(qty) || 1,\n            optionList: JSON.stringify(optionsList),\n            productId,\n            basePrice: variantItem.bc_calculated_price.as_entered,\n            taxPrice:\n              variantItem.bc_calculated_price.tax_inclusive -\n              variantItem.bc_calculated_price.tax_exclusive,\n          },\n        };\n\n        newProducts.push(quoteListitem);\n      });\n\n      const isSuccess = validProductQty(newProducts);\n      if (isSuccess) {\n        await calculateProductListPrice(newProducts, '2');\n\n        const success = await addToQuote(newProducts);\n        if (success) {\n          snackbar.success(b3Lang('quoteDraft.notification.productPlural'));\n        }\n        updateList();\n        setIsOpenBulkLoadCSV(false);\n      } else {\n        snackbar.error(b3Lang('quoteDraft.notification.errorRangeProducts'));\n      }\n    } catch (e) {\n      b2bLogger.error(e);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleOpenUploadDiag = () => {\n    if (blockPendingAccountViewPrice && companyStatus === 0) {\n      snackbar.info(b3Lang('quoteDraft.notification.businessAccountPendingActivation'));\n    } else {\n      setIsOpenBulkLoadCSV(true);\n    }\n  };\n\n  return (\n    <Card>\n      <CardContent\n        sx={{\n          p: '16px !important',\n        }}\n      >\n        <B3CollapseContainer title={b3Lang('quoteDraft.collapseTitle.addToQuote')}>\n          <SearchProduct\n            updateList={updateList}\n            addToList={addToList}\n            type=\"quote\"\n            searchDialogTitle={b3Lang('quoteDraft.modalTitle.addToQuote')}\n            addButtonText={b3Lang('quoteDraft.searchProduct.addToQuoteButton')}\n          />\n\n          <Divider />\n\n          <QuickAdd\n            updateList={updateList}\n            quickAddToList={quickAddToList}\n            level={1}\n            buttonText={b3Lang('quoteDraft.button.addProductsToAddToQuote')}\n          />\n\n          <Divider />\n\n          <Box\n            sx={{\n              margin: '20px 0 0',\n            }}\n          >\n            <CustomButton variant=\"text\" onClick={() => handleOpenUploadDiag()}>\n              <UploadFileIcon\n                sx={{\n                  marginRight: '8px',\n                }}\n              />\n              {b3Lang('quoteDraft.button.bulkUploadCSV')}\n            </CustomButton>\n          </Box>\n\n          <B3Upload\n            isOpen={isOpenBulkLoadCSV}\n            setIsOpen={setIsOpenBulkLoadCSV}\n            handleAddToList={handleCSVAddToList}\n            isLoading={isLoading}\n            withModifiers\n          />\n        </B3CollapseContainer>\n      </CardContent>\n    </Card>\n  );\n}\n","import { forwardRef, useEffect, useImperativeHandle } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Box } from '@mui/material';\nimport trim from 'lodash-es/trim';\n\nimport { B3CustomForm } from '@/components';\nimport { useMobile } from '@/hooks';\nimport { LangFormatFunction, useB3Lang } from '@/lib/lang';\nimport { validateQuoteExtraFields } from '@/shared/service/b2b';\nimport { isValidUserTypeSelector, useAppSelector } from '@/store';\nimport { CustomerRole } from '@/types';\nimport {\n  ContactInfo as ContactInfoType,\n  QuoteExtraFields,\n  QuoteFormattedItemsProps,\n} from '@/types/quotes';\nimport { validatorRules } from '@/utils';\n\ninterface GetQuoteInfoProps {\n  isMobile: boolean;\n  b3Lang: LangFormatFunction;\n  quoteExtraFields: QuoteFormattedItemsProps[];\n  referenceNumber: string | undefined;\n  recipients: string[] | undefined;\n  handleSaveClick: (ccEmails: string[]) => void;\n}\n\nconst emailValidate = validatorRules(['email']);\n\nconst getContactInfo = (isMobile: boolean, b3Lang: LangFormatFunction, isGuest: boolean) => {\n  const contactInfo = [\n    {\n      name: 'name',\n      label: b3Lang('quoteDraft.contactInfo.contactPerson'),\n      required: true,\n      default: '',\n      fieldType: 'text',\n      xs: isMobile ? 12 : 6,\n      variant: 'filled',\n      size: 'small',\n      disabled: !isGuest,\n    },\n    {\n      name: 'email',\n      label: b3Lang('quoteDraft.contactInfo.email'),\n      required: true,\n      default: '',\n      fieldType: 'text',\n      xs: isMobile ? 12 : 6,\n      variant: 'filled',\n      size: 'small',\n      validate: emailValidate,\n      disabled: !isGuest,\n    },\n    {\n      name: 'phoneNumber',\n      label: b3Lang('quoteDraft.contactInfo.phone'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: isMobile ? 12 : 6,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'companyName',\n      label: b3Lang('quoteDraft.contactInfo.companyName'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: isMobile ? 12 : 6,\n      variant: 'filled',\n      size: 'small',\n    },\n  ];\n\n  return contactInfo;\n};\n\nconst getQuoteInfo = ({\n  isMobile,\n  b3Lang,\n  quoteExtraFields,\n  referenceNumber,\n  recipients,\n  handleSaveClick,\n}: GetQuoteInfoProps) => {\n  const currentExtraFields = quoteExtraFields.map((field) => ({\n    ...field,\n    xs: isMobile ? 12 : 6,\n  }));\n\n  const quoteInfo = [\n    {\n      name: 'quoteTitle',\n      label: b3Lang('quoteDraft.contactInfo.quoteTitle'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: isMobile ? 12 : 6,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'referenceNumber',\n      label: b3Lang('quoteDraft.contactInfo.referenceNumber'),\n      required: false,\n      default: referenceNumber || '',\n      fieldType: 'text',\n      xs: isMobile ? 12 : 6,\n      variant: 'filled',\n      size: 'small',\n    },\n    ...currentExtraFields,\n    {\n      name: 'ccEmail',\n      label: b3Lang('quoteDraft.contactInfo.ccEmail'),\n      required: false,\n      default: '',\n      fieldType: 'multiInputText',\n      xs: isMobile ? 12 : 6,\n      variant: 'filled',\n      size: 'small',\n      isEmail: true,\n      existValue: recipients,\n      validate: emailValidate,\n      isEnterTrigger: true,\n      handleSave: handleSaveClick,\n    },\n  ];\n\n  return quoteInfo;\n};\n\ninterface ContactInfoProps {\n  info: ContactInfoType;\n  quoteExtraFields: QuoteFormattedItemsProps[];\n  emailAddress?: string;\n  referenceNumber?: string | undefined;\n  extraFieldsDefault: QuoteExtraFields[];\n  recipients: string[] | undefined;\n  handleSaveCCEmail: (ccEmail: string[]) => void;\n}\n\nfunction ContactInfo(\n  {\n    info,\n    emailAddress,\n    quoteExtraFields,\n    referenceNumber,\n    extraFieldsDefault,\n    recipients,\n    handleSaveCCEmail,\n  }: ContactInfoProps,\n  ref: any,\n) {\n  const {\n    control,\n    getValues,\n    setError,\n    formState: { errors },\n    setValue,\n    handleSubmit,\n  } = useForm({\n    mode: 'onSubmit',\n  });\n  const role = useAppSelector(({ company }) => company.customer.role);\n  const isGuest = role === CustomerRole.GUEST;\n\n  const isValidUserType = useAppSelector(isValidUserTypeSelector);\n\n  const [isMobile] = useMobile();\n\n  const b3Lang = useB3Lang();\n\n  useEffect(() => {\n    if (info && JSON.stringify(info) !== '{}') {\n      Object.keys(info).forEach((item: string) => {\n        setValue(item, info && info[item as keyof ContactInfoType]);\n      });\n    }\n\n    if (extraFieldsDefault.length) {\n      extraFieldsDefault.forEach((item) => {\n        if (item.fieldName) setValue(item.fieldName, item.value);\n      });\n    }\n    // Disable eslint exhaustive-deps rule for setValue dispatcher\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [info, extraFieldsDefault]);\n\n  const validateEmailValue = async (emailValue: string) => {\n    if (emailAddress === trim(emailValue)) return true;\n\n    if (!isValidUserType) {\n      setError('email', {\n        type: 'custom',\n        message: b3Lang('quoteDraft.contactInfo.emailExists'),\n      });\n    }\n\n    return isValidUserType;\n  };\n\n  const validateQuoteExtraFieldsInfo = async () => {\n    const values = getValues();\n    const extraFields = quoteExtraFields.map((field) => ({\n      fieldName: field.name,\n      fieldValue: field.name ? values[field.name] : '',\n    }));\n\n    const res = await validateQuoteExtraFields({\n      extraFields,\n    });\n\n    if (res.code !== 200) {\n      const message = res.data?.errMsg || res.message || '';\n\n      const messageArr = message.split(':');\n\n      if (messageArr.length >= 2) {\n        const field = quoteExtraFields?.find((field) => field.name === messageArr[0]);\n        if (field && field.name) {\n          setError(field.name, {\n            type: 'manual',\n            message: messageArr[1],\n          });\n\n          return false;\n        }\n      }\n      return false;\n    }\n    return true;\n  };\n\n  const handleSaveClick = (ccEmails: string[]) => {\n    handleSaveCCEmail(ccEmails);\n  };\n\n  const getContactInfoValue = async () => {\n    let isValid = true;\n    await handleSubmit(\n      async (data) => {\n        isValid = await validateEmailValue(data.email);\n      },\n      () => {\n        isValid = false;\n      },\n    )();\n\n    if (isValid) {\n      isValid = await validateQuoteExtraFieldsInfo();\n    }\n\n    return isValid ? getValues() : isValid;\n  };\n\n  useImperativeHandle(ref, () => ({\n    getContactInfoValue,\n  }));\n\n  const contactInfo = getContactInfo(isMobile, b3Lang, isGuest);\n  const quoteInfo = getQuoteInfo({\n    isMobile,\n    b3Lang,\n    quoteExtraFields,\n    referenceNumber,\n    recipients,\n    handleSaveClick,\n  });\n\n  const formData = [\n    {\n      title: b3Lang('quoteDraft.contactInfo.contact'),\n      infos: contactInfo,\n    },\n    {\n      title: b3Lang('quoteDraft.quoteInfo.title'),\n      infos: quoteInfo,\n      style: {\n        mt: '20px',\n      },\n    },\n  ];\n\n  return (\n    <Box width=\"100%\">\n      {formData.map((data) => (\n        <Box key={data.title} width=\"100%\">\n          <Box\n            sx={{\n              fontWeight: 400,\n              fontSize: '24px',\n              height: '32px',\n              mb: '20px',\n              ...data?.style,\n            }}\n          >\n            {data.title}\n          </Box>\n\n          <B3CustomForm\n            formFields={data.infos}\n            errors={errors}\n            control={control}\n            setError={setError}\n            getValues={getValues}\n            setValue={setValue}\n          />\n        </Box>\n      ))}\n    </Box>\n  );\n}\n\nexport default forwardRef(ContactInfo);\n","import styled from '@emotion/styled';\nimport { Theme, useTheme } from '@mui/material';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\n\nimport { B3Tag } from '@/components';\nimport CustomButton from '@/components/button/CustomButton';\nimport { useB3Lang } from '@/lib/lang';\n\nimport { AddressItemType } from '../../../types/address';\n\ninterface OrderItemCardProps {\n  item: AddressItemType;\n  onSetAddress: (data: AddressItemType) => void;\n}\n\ninterface TagBoxProps {\n  marginBottom: number | string;\n}\n\nconst TagBox = styled('div')(({ marginBottom }: TagBoxProps) => ({\n  marginBottom,\n  '& > span:not(:last-child)': {\n    marginRight: '4px',\n  },\n}));\n\ninterface FlexProps {\n  theme?: Theme;\n}\n\nconst Flex = styled('div')(({ theme }: FlexProps) => ({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n  marginTop: theme!.spacing(3),\n}));\n\nexport function AddressItemCard(props: OrderItemCardProps) {\n  const { item: addressInfo, onSetAddress } = props;\n\n  const theme = useTheme();\n\n  const b3Lang = useB3Lang();\n\n  return (\n    <Card key={addressInfo.id}>\n      <CardContent\n        sx={{\n          color: '#313440',\n          wordBreak: 'break-word',\n        }}\n      >\n        {addressInfo.label && (\n          <Typography\n            variant=\"h5\"\n            sx={{\n              marginBottom:\n                addressInfo.isDefaultShipping === 1 || addressInfo.isDefaultBilling === 1\n                  ? theme.spacing(1)\n                  : theme.spacing(3),\n              color: 'rgba(0, 0, 0, 0.87)',\n            }}\n          >\n            {addressInfo.label}\n          </Typography>\n        )}\n\n        <TagBox\n          marginBottom={\n            addressInfo.isDefaultShipping === 1 || addressInfo.isDefaultBilling === 1\n              ? theme.spacing(3)\n              : 0\n          }\n        >\n          {addressInfo.isDefaultShipping === 1 && (\n            <B3Tag color=\"#C4DD6C\" textColor=\"rgba(0, 0, 0, 0.87)\">\n              {b3Lang('quoteDraft.addressItemCard.defaultShipping')}\n            </B3Tag>\n          )}\n          {addressInfo.isDefaultBilling === 1 && (\n            <B3Tag color=\"#C4DD6C\" textColor=\"rgba(0, 0, 0, 0.87)\">\n              {b3Lang('quoteDraft.addressItemCard.defaultBilling')}\n            </B3Tag>\n          )}\n        </TagBox>\n\n        <Typography variant=\"body1\">{`${addressInfo.firstName} ${addressInfo.lastName}`}</Typography>\n        <Typography variant=\"body1\">{addressInfo.company || ''}</Typography>\n        <Typography variant=\"body1\">{addressInfo.addressLine1}</Typography>\n        <Typography variant=\"body1\">{addressInfo.addressLine2}</Typography>\n        <Typography variant=\"body1\">{`${addressInfo.city}, ${addressInfo.state} ${addressInfo.zipCode}, ${addressInfo.country}`}</Typography>\n        <Typography variant=\"body1\">{addressInfo.phoneNumber}</Typography>\n\n        <Flex>\n          <CustomButton\n            variant=\"text\"\n            onClick={() => {\n              onSetAddress(addressInfo);\n            }}\n          >\n            {b3Lang('quoteDraft.addressItemCard.chooseAddress')}\n          </CustomButton>\n        </Flex>\n      </CardContent>\n    </Card>\n  );\n}\n","import { useEffect, useRef, useState } from 'react';\nimport { Box, Grid } from '@mui/material';\n\nimport B3Dialog from '@/components/B3Dialog';\nimport B3FilterSearch from '@/components/filter/B3FilterSearch';\nimport { useB3Lang } from '@/lib/lang';\nimport { isB2BUserSelector, useAppSelector } from '@/store';\nimport { AddressItemType } from '@/types/address';\n\nimport { AddressItemCard } from './AddressItemCard';\n\ntype AddressItemProps = {\n  node: AddressItemType;\n};\n\ninterface ChooseAddressProps {\n  isOpen: boolean;\n  addressList: AddressItemProps[];\n  closeModal: () => void;\n  handleChangeAddress: (address: AddressItemType) => void;\n  type: string;\n}\n\ninterface RefProps {\n  copyList: AddressItemType[];\n}\n\nfunction ChooseAddress({\n  isOpen,\n  closeModal,\n  handleChangeAddress,\n  addressList = [],\n  type,\n}: ChooseAddressProps) {\n  const recordList = useRef<RefProps>({\n    copyList: [],\n  });\n  const b3Lang = useB3Lang();\n  const isB2BUser = useAppSelector(isB2BUserSelector);\n  const [list, setList] = useState<AddressItemType[]>([]);\n\n  useEffect(() => {\n    if (addressList.length) {\n      const allList = addressList.map((item: AddressItemProps) => item.node);\n      const newList = allList.filter(\n        (item) =>\n          (item.isShipping === 1 && type === 'shipping') ||\n          (item.isBilling === 1 && type === 'billing'),\n      );\n      recordList.current.copyList = isB2BUser ? newList : allList;\n      setList(newList);\n    }\n  }, [addressList, type, isB2BUser]);\n\n  const keys = [\n    'address',\n    'firstName',\n    'lastName',\n    'phoneNumber',\n    'state',\n    'zipCode',\n    'country',\n    'label',\n    'address',\n    'addressLine1',\n  ];\n\n  const handleSearchProduct = (q: string) => {\n    if (!q && recordList?.current) {\n      setList(recordList.current.copyList);\n      return;\n    }\n    const newList: AddressItemType[] = [];\n    keys.forEach((key: string) => {\n      let flag = true;\n      list.forEach((item: AddressItemType) => {\n        if (item[key].includes(q) && flag) {\n          newList.push(item);\n          flag = false;\n        }\n      });\n    });\n    setList(newList);\n  };\n\n  const handleCancelClicked = () => {\n    closeModal();\n  };\n\n  return (\n    <B3Dialog\n      fullWidth\n      isOpen={isOpen}\n      handleLeftClick={handleCancelClicked}\n      title={b3Lang('quoteDraft.chooseAddress.chooseFromSaved')}\n      showRightBtn={false}\n      maxWidth=\"lg\"\n    >\n      <Box>\n        <B3FilterSearch\n          searchBGColor=\"rgba(0, 0, 0, 0.06)\"\n          placeholder={b3Lang('quoteDraft.chooseAddress.searchAddress')}\n          handleChange={(e) => {\n            handleSearchProduct(e);\n          }}\n        />\n      </Box>\n      <Box\n        sx={{\n          mt: '20px',\n        }}\n      >\n        <Grid container spacing={2}>\n          {list.map((addressItem: AddressItemType) => (\n            <Grid item key={addressItem.id} xs={4}>\n              <AddressItemCard item={addressItem} onSetAddress={handleChangeAddress} />\n            </Grid>\n          ))}\n        </Grid>\n      </Box>\n    </B3Dialog>\n  );\n}\n\nexport default ChooseAddress;\n","import { forwardRef, useEffect, useId, useImperativeHandle, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Box, Typography } from '@mui/material';\nimport cloneDeep from 'lodash-es/cloneDeep';\n\nimport { B3CustomForm } from '@/components';\nimport { useGetCountry, useMobile } from '@/hooks';\nimport { useB3Lang } from '@/lib/lang';\nimport { AddressItemType } from '@/types/address';\nimport { BillingAddress, ContactInfo, ShippingAddress } from '@/types/quotes';\n\nimport ChooseAddress from './ChooseAddress';\n\ntype AddressItemProps = {\n  node: AddressItemType;\n};\n\ninterface AccountFormFieldsProps extends Record<string, any> {\n  name: string;\n  label?: string;\n  required?: boolean;\n  fieldType?: string;\n  default?: string | Array<any> | number;\n  xs: number;\n  variant: string;\n  size: string;\n  options?: any[];\n}\n\ninterface AddressProps {\n  title: string;\n  pr?: string | number;\n  pl?: string | number;\n  addressList?: AddressItemProps[];\n  info: ContactInfo | ShippingAddress | BillingAddress;\n  role: string | number;\n  accountFormFields: AccountFormFieldsProps[];\n  shippingSameAsBilling: boolean;\n  type: string;\n  setBillingChange: (value: boolean) => void;\n}\n\nfunction QuoteAddress(\n  {\n    title,\n    addressList = [],\n    pr = 0,\n    pl = 0,\n    info,\n    role,\n    accountFormFields = [],\n    shippingSameAsBilling = false,\n    type,\n    setBillingChange,\n  }: AddressProps,\n  ref: any,\n) {\n  const {\n    control,\n    getValues,\n    formState: { errors },\n    setValue,\n  } = useForm({\n    mode: 'onSubmit',\n  });\n\n  const [isMobile] = useMobile();\n  const b3Lang = useB3Lang();\n\n  type InfoKeys = keyof typeof info;\n\n  const [isOpen, setOpen] = useState<boolean>(false);\n  const [quoteAddress, setQuoteAddress] = useState<AccountFormFieldsProps[]>(\n    cloneDeep(accountFormFields),\n  );\n\n  useGetCountry({\n    control,\n    setValue,\n    getValues,\n    setAddress: setQuoteAddress,\n    addresses: quoteAddress,\n  });\n\n  const getContactInfoValue = () => getValues();\n  const setShippingInfoValue = (address: any) => {\n    const addressKey = Object.keys(address);\n\n    addressKey.forEach((item: string) => {\n      if (item === 'company') return;\n      setValue(item, address[item]);\n    });\n  };\n\n  useImperativeHandle(ref, () => ({\n    getContactInfoValue,\n    setShippingInfoValue,\n  }));\n\n  const handleAddressChoose = () => {\n    setOpen(true);\n  };\n\n  const handleCloseAddressChoose = () => {\n    setOpen(false);\n  };\n\n  const handleChangeAddress = (address: AddressItemType) => {\n    const addressItem: any = {\n      label: address?.label || '',\n      firstName: address?.firstName || '',\n      lastName: address?.lastName || '',\n      company: address?.company || '',\n      country: address?.countryCode || '',\n      address: address?.addressLine1 || '',\n      apartment: address?.addressLine2 || '',\n      city: address?.city || '',\n      state: address?.state || '',\n      zipCode: address?.zipCode || '',\n      phoneNumber: address?.phoneNumber || '',\n    };\n\n    Object.keys(addressItem).forEach((item: string) => {\n      if (item === 'company') return;\n      setValue(item, addressItem[item]);\n    });\n    if (type === 'billing' && shippingSameAsBilling) {\n      setBillingChange(true);\n    }\n\n    handleCloseAddressChoose();\n  };\n\n  useEffect(() => {\n    if (JSON.stringify(info) !== '{}') {\n      Object.keys(info).forEach((item: string) => {\n        setValue(item, info[item as InfoKeys]);\n      });\n    }\n    // Disabling this rule as dispatcher dep setValue is the same between renders\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [info]);\n\n  const fieldsetId = useId();\n\n  return (\n    <Box\n      role=\"group\"\n      aria-labelledby={fieldsetId}\n      width={isMobile ? '100%' : '50%'}\n      mt={isMobile ? '2rem' : '0'}\n      pr={pr}\n      pl={pl}\n    >\n      <Box\n        sx={{\n          display: 'flex',\n          mb: '20px',\n        }}\n      >\n        <Typography\n          id={fieldsetId}\n          sx={{\n            fontWeight: 400,\n            fontSize: '24px',\n            height: '32px',\n            mr: '16px',\n          }}\n        >\n          {title}\n        </Typography>\n        {Number(role) !== 100 && (\n          <Typography\n            onClick={handleAddressChoose}\n            sx={{\n              fontWeight: 500,\n              fontSize: '14px',\n              color: 'primary.main',\n              display: 'flex',\n              alignItems: 'flex-end',\n              cursor: 'pointer',\n              textTransform: 'uppercase',\n            }}\n          >\n            {b3Lang('quoteDraft.quoteAddress.chooseFromSaved')}\n          </Typography>\n        )}\n      </Box>\n\n      <B3CustomForm\n        formFields={quoteAddress}\n        errors={errors}\n        control={control}\n        getValues={getValues}\n        setValue={setValue}\n      />\n\n      <ChooseAddress\n        isOpen={isOpen}\n        handleChangeAddress={handleChangeAddress}\n        closeModal={handleCloseAddressChoose}\n        addressList={addressList}\n        type={type}\n      />\n    </Box>\n  );\n}\n\nexport default forwardRef(QuoteAddress);\n","import { Box, Typography } from '@mui/material';\n\nimport B3Dialog from '@/components/B3Dialog';\nimport { useB3Lang } from '@/lib/lang';\n\ninterface QuoteSubmissionResponseProps {\n  isOpen: boolean;\n  onClose: () => void;\n  quoteSubmissionResponseInfo: {\n    value: string;\n    key: string;\n    message: string;\n    title: string;\n  };\n}\n\nfunction QuoteSubmissionResponse({\n  isOpen = false,\n  onClose,\n  quoteSubmissionResponseInfo,\n}: QuoteSubmissionResponseProps) {\n  const b3Lang = useB3Lang();\n  const messageArr = quoteSubmissionResponseInfo.message.split('\\n');\n\n  return (\n    <Box\n      sx={{\n        '#b2b-dialog-container': {\n          '& [aria-labelledby=\"alert-dialog-title\"]': {\n            width: '500px',\n            maxHeight: '500px',\n          },\n\n          '& h2': {\n            color: '#313440',\n          },\n          '& h6': {\n            color: '#313440',\n            fontSize: '16px',\n          },\n        },\n      }}\n    >\n      <B3Dialog\n        isOpen={isOpen}\n        title={quoteSubmissionResponseInfo.title}\n        showLeftBtn={false}\n        handRightClick={onClose}\n        isShowBordered={false}\n        rightSizeBtn={b3Lang('quoteDraft.submission.response.button.text')}\n        maxWidth={false}\n      >\n        {messageArr.map((item) => {\n          return (\n            <Typography\n              key={item}\n              variant=\"subtitle2\"\n              sx={{\n                marginTop: '1rem',\n              }}\n            >\n              {item}\n            </Typography>\n          );\n        })}\n      </B3Dialog>\n    </Box>\n  );\n}\n\nexport default QuoteSubmissionResponse;\n","import { store } from '@/store';\nimport { getVariantInfoDisplayPrice } from '@/utils/b3Product/b3Product';\n\nconst getQuoteDraftShowPriceTBD = (products: CustomFieldItems[]) => {\n  const {\n    global: {\n      blockPendingQuoteNonPurchasableOOS: { isEnableProduct },\n    },\n  } = store.getState();\n\n  if (!isEnableProduct) return false;\n\n  const isHidePrice = products.some((product) => {\n    if (!getVariantInfoDisplayPrice(product.node.basePrice, product)) return true;\n\n    return false;\n  });\n\n  return isHidePrice;\n};\n\nexport default getQuoteDraftShowPriceTBD;\n","import {\n  forwardRef,\n  Ref,\n  useCallback,\n  useEffect,\n  useId,\n  useImperativeHandle,\n  useState,\n} from 'react';\nimport { Box, Card, CardContent, Grid, Typography } from '@mui/material';\n\nimport { useB3Lang } from '@/lib/lang';\nimport { useAppSelector } from '@/store';\nimport { currencyFormat } from '@/utils';\nimport { getBCPrice } from '@/utils/b3Product/b3Product';\n\nimport getQuoteDraftShowPriceTBD from '../shared/utils';\n\ninterface Summary {\n  subtotal: number;\n  shipping: number;\n  tax: number;\n  grandTotal: number;\n}\n\nconst defaultSummary: Summary = {\n  subtotal: 0,\n  shipping: 0,\n  tax: 0,\n  grandTotal: 0,\n};\n\nconst QuoteSummary = forwardRef((_, ref: Ref<unknown>) => {\n  const b3Lang = useB3Lang();\n\n  const [quoteSummary, setQuoteSummary] = useState<Summary>({\n    ...defaultSummary,\n  });\n\n  const [isHideQuoteDraftPrice, setHideQuoteDraftPrice] = useState<boolean>(false);\n  const showInclusiveTaxPrice = useAppSelector(({ global }) => global.showInclusiveTaxPrice);\n  const draftQuoteList = useAppSelector(({ quoteInfo }) => quoteInfo.draftQuoteList);\n\n  const priceCalc = (price: number) => parseFloat(String(price));\n\n  const getSummary = useCallback(() => {\n    const isHidePrice = getQuoteDraftShowPriceTBD(draftQuoteList);\n\n    setHideQuoteDraftPrice(isHidePrice);\n\n    const newQuoteSummary = draftQuoteList.reduce(\n      (summary: Summary, product: CustomFieldItems) => {\n        const { basePrice, taxPrice: productTax = 0, quantity } = product.node;\n\n        let { subtotal, grandTotal, tax } = summary;\n\n        const { shipping } = summary;\n\n        const price = getBCPrice(Number(basePrice), Number(productTax));\n\n        subtotal += priceCalc(price * quantity);\n        tax += priceCalc(Number(productTax) * Number(quantity));\n\n        const totalPrice = showInclusiveTaxPrice ? subtotal : subtotal + tax;\n\n        grandTotal = totalPrice + shipping;\n\n        return {\n          grandTotal,\n          shipping,\n          tax,\n          subtotal,\n        };\n      },\n      {\n        ...defaultSummary,\n      },\n    );\n\n    setQuoteSummary(newQuoteSummary);\n  }, [showInclusiveTaxPrice, draftQuoteList]);\n\n  useEffect(() => {\n    getSummary();\n  }, [getSummary]);\n\n  useImperativeHandle(ref, () => ({\n    refreshSummary: () => getSummary(),\n  }));\n\n  const priceFormat = (price: number) => currencyFormat(price);\n\n  const showPrice = (price: string | number): string | number => {\n    if (isHideQuoteDraftPrice) return b3Lang('quoteDraft.quoteSummary.tbd');\n\n    return price;\n  };\n\n  const cardId = useId();\n\n  return (\n    <Card role=\"article\" aria-labelledby={cardId}>\n      <CardContent>\n        <Box>\n          <Typography id={cardId} variant=\"h5\">\n            {b3Lang('quoteDraft.quoteSummary.summary')}\n          </Typography>\n          <Box\n            sx={{\n              marginTop: '20px',\n              color: '#212121',\n            }}\n          >\n            <Grid\n              container\n              justifyContent=\"space-between\"\n              sx={{\n                margin: '4px 0',\n              }}\n            >\n              <Typography>{b3Lang('quoteDraft.quoteSummary.subTotal')}</Typography>\n              <Typography>{showPrice(priceFormat(quoteSummary.subtotal))}</Typography>\n            </Grid>\n\n            <Grid\n              container\n              justifyContent=\"space-between\"\n              sx={{\n                margin: '4px 0',\n              }}\n            >\n              <Typography>{b3Lang('quoteDraft.quoteSummary.shipping')}</Typography>\n              <Typography>{b3Lang('quoteDraft.quoteSummary.tbd')}</Typography>\n            </Grid>\n\n            <Grid\n              container\n              justifyContent=\"space-between\"\n              sx={{\n                margin: '4px 0',\n              }}\n            >\n              <Typography>{b3Lang('quoteDraft.quoteSummary.tax')}</Typography>\n              <Typography>{showPrice(priceFormat(quoteSummary.tax))}</Typography>\n            </Grid>\n\n            <Grid\n              container\n              justifyContent=\"space-between\"\n              sx={{\n                margin: '24px 0 0',\n              }}\n            >\n              <Typography\n                sx={{\n                  fontWeight: 'bold',\n                }}\n              >\n                {b3Lang('quoteDraft.quoteSummary.grandTotal')}\n              </Typography>\n              <Typography\n                sx={{\n                  fontWeight: 'bold',\n                }}\n              >\n                {showPrice(priceFormat(quoteSummary.grandTotal))}\n              </Typography>\n            </Grid>\n          </Box>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n});\nexport default QuoteSummary;\n","import { FC, ReactElement, useCallback, useEffect, useState } from 'react';\n\nimport { useMobile } from '@/hooks';\n\nimport { B3Table, isNodeWrapper, PossibleNodeWrapper, TableColumnItem } from './B3Table';\n\ninterface TablePagination {\n  offset: number;\n  first: number;\n}\n\ninterface PaginationTableProps<Row extends object> {\n  tableFixed?: boolean;\n  tableHeaderHide?: boolean;\n  columnItems: TableColumnItem<Row>[];\n  itemSpacing?: number;\n  itemXs?: number;\n  rowsPerPageOptions?: number[];\n  showPagination?: boolean;\n  renderItem?: (row: Row, index?: number, checkBox?: () => ReactElement) => ReactElement;\n  CollapseComponent?: FC<{ row: Row }>;\n  isCustomRender?: boolean;\n  noDataText?: string;\n  tableKey?: string;\n  showCheckbox?: boolean;\n  showSelectAllCheckbox?: boolean;\n  selectedSymbol?: string;\n  isSelectOtherPageCheckbox?: boolean;\n  showBorder?: boolean;\n  getSelectCheckbox?: (arr: Array<string | number>) => void;\n  hover?: boolean;\n  labelRowsPerPage?: string;\n  itemIsMobileSpacing?: number;\n  disableCheckbox?: boolean;\n  applyAllDisableCheckbox?: boolean;\n  onClickRow?: (item: Row, index?: number) => void;\n  showRowsPerPageOptions?: boolean;\n  sortDirection?: 'asc' | 'desc';\n  sortByFn?: (e: { key: string }) => void;\n  orderBy?: string;\n  pageType?: string;\n  items: PossibleNodeWrapper<Row>[];\n}\n\nfunction PaginationTable<Row extends object>({\n  columnItems,\n  isCustomRender = false,\n  tableKey,\n  renderItem,\n  noDataText = '',\n  tableFixed = false,\n  tableHeaderHide = false,\n  rowsPerPageOptions = [10, 20, 30],\n  itemSpacing = 2,\n  itemXs = 4,\n  showCheckbox = false,\n  showSelectAllCheckbox = false,\n  selectedSymbol = 'id',\n  isSelectOtherPageCheckbox = false,\n  showBorder = true,\n  getSelectCheckbox,\n  hover = false,\n  labelRowsPerPage = '',\n  itemIsMobileSpacing = 2,\n  disableCheckbox = false,\n  onClickRow,\n  showPagination = true,\n  showRowsPerPageOptions = true,\n  CollapseComponent,\n  applyAllDisableCheckbox = true,\n  sortDirection = 'asc',\n  sortByFn = () => {},\n  orderBy = '',\n  pageType = '',\n  items,\n}: PaginationTableProps<Row>) {\n  const initPagination = {\n    offset: 0,\n    first: rowsPerPageOptions[0],\n  };\n\n  const [pagination, setPagination] = useState<TablePagination>(initPagination);\n\n  const [isAllSelect, setAllSelect] = useState<boolean>(false);\n\n  const [selectCheckbox, setSelectCheckbox] = useState<Array<string | number>>([]);\n\n  const [isMobile] = useMobile();\n\n  useEffect(() => {\n    if (getSelectCheckbox) getSelectCheckbox(selectCheckbox);\n    // disabling as getSelectCheckbox will trigger rerenders if the user passes a function that is not memoized\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectCheckbox, items]);\n\n  const handlePaginationChange = async (pagination: TablePagination) => {\n    setPagination(pagination);\n  };\n\n  const tablePagination = {\n    ...pagination,\n    count: items.length,\n  };\n\n  const getCurrentAllItemsSelect = useCallback(() => {\n    if (!selectCheckbox.length) return false;\n    return items.every((item) => {\n      const option = isNodeWrapper(item) ? item.node : item;\n\n      // @ts-expect-error typed previously as an any\n      return selectCheckbox.includes(option[selectedSymbol]);\n    });\n  }, [items, selectCheckbox, selectedSymbol]);\n\n  useEffect(() => {\n    if (isSelectOtherPageCheckbox) {\n      const flag = getCurrentAllItemsSelect();\n      setAllSelect(flag);\n    }\n  }, [selectCheckbox, pagination, isSelectOtherPageCheckbox, getCurrentAllItemsSelect]);\n\n  const handleSelectAllItems = () => {\n    const singlePageCheckbox = () => {\n      if (selectCheckbox.length === items.length) {\n        setSelectCheckbox([]);\n      } else {\n        const selects: Array<string | number> = [];\n        items.forEach((item) => {\n          const option = isNodeWrapper(item) ? item.node : item;\n          if (option) {\n            if (pageType === 'shoppingListDetailsTable') {\n              selects.push(\n                // @ts-expect-error typed previously as an any\n                option.quantity > 0 || !option.disableCurrentCheckbox ? option[selectedSymbol] : '',\n              );\n            } else {\n              // @ts-expect-error typed previously as an any\n              selects.push(option[selectedSymbol]);\n            }\n          }\n        });\n        setSelectCheckbox(selects);\n      }\n    };\n\n    const otherPageCheckbox = () => {\n      const flag = getCurrentAllItemsSelect();\n\n      const newSelectCheckbox = [...selectCheckbox];\n      if (flag) {\n        items.forEach((item) => {\n          const option = isNodeWrapper(item) ? item.node : item;\n          // @ts-expect-error typed previously as an any\n          const index = newSelectCheckbox.findIndex((item) => item === option[selectedSymbol]);\n          newSelectCheckbox.splice(index, 1);\n        });\n      } else {\n        items.forEach((item) => {\n          const option = isNodeWrapper(item) ? item.node : item;\n          // @ts-expect-error typed previously as an any\n          if (!selectCheckbox.includes(option[selectedSymbol])) {\n            // @ts-expect-error typed previously as an any\n            newSelectCheckbox.push(option[selectedSymbol]);\n          }\n        });\n      }\n\n      setSelectCheckbox(newSelectCheckbox);\n    };\n\n    if (isSelectOtherPageCheckbox) {\n      otherPageCheckbox();\n    } else {\n      singlePageCheckbox();\n    }\n  };\n\n  const handleSelectOneItem = (id: string | number) => {\n    const selects = [...selectCheckbox];\n    const index = selects.indexOf(id);\n    if (index !== -1) {\n      selects.splice(index, 1);\n    } else {\n      selects.push(id);\n    }\n    setSelectCheckbox(selects);\n  };\n\n  return (\n    <B3Table\n      hover={hover}\n      columnItems={columnItems || []}\n      listItems={items.slice(pagination.offset, pagination.offset + pagination.first)}\n      pagination={tablePagination}\n      rowsPerPageOptions={rowsPerPageOptions}\n      onPaginationChange={handlePaginationChange}\n      isCustomRender={isCustomRender}\n      isInfiniteScroll={isMobile}\n      renderItem={renderItem}\n      tableFixed={tableFixed}\n      tableHeaderHide={tableHeaderHide}\n      itemSpacing={itemSpacing}\n      itemXs={itemXs}\n      noDataText={noDataText}\n      tableKey={tableKey}\n      itemIsMobileSpacing={itemIsMobileSpacing}\n      showCheckbox={showCheckbox}\n      showSelectAllCheckbox={showSelectAllCheckbox}\n      disableCheckbox={disableCheckbox}\n      selectedSymbol={selectedSymbol}\n      isSelectOtherPageCheckbox={isSelectOtherPageCheckbox}\n      isAllSelect={isAllSelect}\n      selectCheckbox={selectCheckbox}\n      handleSelectAllItems={handleSelectAllItems}\n      handleSelectOneItem={handleSelectOneItem}\n      showBorder={showBorder}\n      labelRowsPerPage={labelRowsPerPage}\n      onClickRow={onClickRow}\n      showPagination={showPagination}\n      showRowsPerPageOptions={showRowsPerPageOptions}\n      CollapseComponent={CollapseComponent}\n      applyAllDisableCheckbox={applyAllDisableCheckbox}\n      sortDirection={sortDirection}\n      sortByFn={sortByFn}\n      orderBy={orderBy}\n    />\n  );\n}\n\nexport default PaginationTable;\n","import { Delete, Edit } from '@mui/icons-material';\nimport { Box, CardContent, styled, TextField, Typography } from '@mui/material';\n\nimport { PRODUCT_DEFAULT_IMAGE } from '@/constants';\nimport { useB3Lang } from '@/lib/lang';\nimport { currencyFormat } from '@/utils';\nimport { getBCPrice, getDisplayPrice } from '@/utils/b3Product/b3Product';\n\nimport { getProductOptionsFields } from '../../../utils/b3Product/shared/config';\n\ninterface QuoteTableCardProps {\n  item: any;\n  onEdit: (item: any, itemId: string) => void;\n  onDelete: (id: string) => void;\n  handleUpdateProductQty: (id: number | string, value: number | string) => void;\n  idEdit: boolean;\n  len: number;\n  itemIndex?: number;\n}\n\nconst StyledImage = styled('img')(() => ({\n  maxWidth: '60px',\n  height: 'auto',\n  marginRight: '0.5rem',\n}));\n\nfunction QuoteTableCard(props: QuoteTableCardProps) {\n  const {\n    item: quoteTableItem,\n    onEdit,\n    onDelete,\n    handleUpdateProductQty,\n    idEdit,\n    len,\n    itemIndex,\n  } = props;\n\n  const {\n    basePrice,\n    quantity,\n    id,\n    primaryImage,\n    productName,\n    variantSku,\n    productsSearch,\n    taxPrice = 0,\n  } = quoteTableItem;\n\n  const b3Lang = useB3Lang();\n\n  const price = getBCPrice(Number(basePrice), Number(taxPrice));\n\n  const total = price * Number(quantity);\n\n  const product: any = {\n    ...quoteTableItem.productsSearch,\n    selectOptions: quoteTableItem.optionList,\n  };\n\n  const productFields = getProductOptionsFields(product, {});\n\n  const optionList = JSON.parse(quoteTableItem.optionList);\n  const optionsValue: CustomFieldItems[] = productFields.filter((item) => item.valueText);\n\n  const { productUrl } = productsSearch;\n\n  const singlePrice = getDisplayPrice({\n    price: currencyFormat(price),\n    productInfo: quoteTableItem,\n    showText: b3Lang('quoteDraft.quoteSummary.tbd'),\n  });\n\n  const totalPrice = getDisplayPrice({\n    price: currencyFormat(total),\n    productInfo: quoteTableItem,\n    showText: b3Lang('quoteDraft.quoteSummary.tbd'),\n  });\n\n  return (\n    <Box\n      key={quoteTableItem.id}\n      width=\"100%\"\n      sx={{\n        borderTop: '1px solid #D9DCE9',\n        borderBottom: itemIndex === len - 1 ? '1px solid #D9DCE9' : '',\n      }}\n    >\n      <CardContent\n        sx={{\n          color: '#313440',\n          display: 'flex',\n          pl: 0,\n        }}\n      >\n        <Box>\n          <StyledImage\n            src={primaryImage || PRODUCT_DEFAULT_IMAGE}\n            alt=\"Product-img\"\n            loading=\"lazy\"\n          />\n        </Box>\n        <Box\n          sx={{\n            flex: 1,\n          }}\n        >\n          <Typography\n            variant=\"body1\"\n            color=\"#212121\"\n            onClick={() => {\n              const {\n                location: { origin },\n              } = window;\n\n              if (productUrl) {\n                window.location.href = `${origin}${productUrl}`;\n              }\n            }}\n            sx={{\n              cursor: 'pointer',\n            }}\n          >\n            {productName}\n          </Typography>\n          <Typography variant=\"body1\" color=\"#616161\">\n            {variantSku}\n          </Typography>\n          <Box\n            sx={{\n              margin: '1rem 0',\n            }}\n          >\n            {optionList.length > 0 && optionsValue.length > 0 && (\n              <Box>\n                {optionsValue.map((option: any) => (\n                  <Typography\n                    sx={{\n                      fontSize: '0.75rem',\n                      lineHeight: '1.5',\n                      color: '#455A64',\n                    }}\n                    key={option.valueLabel}\n                  >\n                    {`${option.valueLabel}: ${option.valueText}`}\n                  </Typography>\n                ))}\n              </Box>\n            )}\n          </Box>\n\n          <Typography sx={{ fontSize: '14px' }}>{`Price: ${singlePrice}`}</Typography>\n\n          <TextField\n            size=\"small\"\n            type=\"number\"\n            variant=\"filled\"\n            label=\"qty\"\n            disabled={!idEdit}\n            inputProps={{\n              inputMode: 'numeric',\n              pattern: '[0-9]*',\n            }}\n            value={quantity}\n            sx={{\n              margin: '1rem 0',\n              width: '60%',\n              maxWidth: '100px',\n              '& label': {\n                fontSize: '14px',\n              },\n              '& input': {\n                fontSize: '14px',\n              },\n            }}\n            onChange={(e) => {\n              handleUpdateProductQty(quoteTableItem, e.target.value);\n            }}\n          />\n          <Typography sx={{ fontSize: '14px' }}>{`Total: ${totalPrice}`}</Typography>\n          <Box\n            sx={{\n              marginTop: '1rem',\n              textAlign: 'end',\n            }}\n            id=\"shoppingList-actionList-mobile\"\n          >\n            {optionList.length > 0 && idEdit && (\n              <Edit\n                sx={{\n                  marginRight: '0.5rem',\n                  cursor: 'pointer',\n                  color: 'rgba(0, 0, 0, 0.54)',\n                }}\n                onClick={() => {\n                  onEdit(\n                    {\n                      ...productsSearch,\n                      quantity,\n                      selectOptions: quoteTableItem.optionList,\n                    },\n                    id,\n                  );\n                }}\n              />\n            )}\n            {idEdit && (\n              <Delete\n                sx={{\n                  cursor: 'pointer',\n                  color: 'rgba(0, 0, 0, 0.54)',\n                }}\n                onClick={() => {\n                  onDelete(id);\n                }}\n              />\n            )}\n          </Box>\n        </Box>\n      </CardContent>\n    </Box>\n  );\n}\n\nexport default QuoteTableCard;\n","import { useState } from 'react';\nimport { Delete, Edit, Warning as WarningIcon } from '@mui/icons-material';\nimport { Box, styled, TextField, Typography } from '@mui/material';\nimport ceil from 'lodash-es/ceil';\n\nimport { TableColumnItem } from '@/components/table/B3Table';\nimport PaginationTable from '@/components/table/PaginationTable';\nimport { PRODUCT_DEFAULT_IMAGE } from '@/constants';\nimport { useFeatureFlags } from '@/hooks';\nimport { useB3Lang } from '@/lib/lang';\nimport {\n  deleteProductFromDraftQuoteList,\n  setDraftProduct,\n  useAppDispatch,\n  useAppSelector,\n} from '@/store';\nimport { Product } from '@/types';\nimport { QuoteItem } from '@/types/quotes';\nimport { currencyFormat, snackbar } from '@/utils';\nimport {\n  calculateProductListPrice,\n  getBCPrice,\n  getDisplayPrice,\n  getVariantInfoOOSAndPurchase,\n  setModifierQtyPrice,\n} from '@/utils/b3Product/b3Product';\nimport { getProductOptionsFields } from '@/utils/b3Product/shared/config';\n\nimport ChooseOptionsDialog from '../../ShoppingListDetails/components/ChooseOptionsDialog';\n\nimport QuoteTableCard from './QuoteTableCard';\n\ninterface ShoppingDetailTableProps {\n  total: number;\n  items: any[];\n  idEdit?: boolean;\n  updateSummary: () => void;\n}\n\nconst StyledQuoteTableContainer = styled('div')(() => ({\n  backgroundColor: '#FFFFFF',\n  padding: '0',\n  width: '100%',\n\n  '& tbody': {\n    '& tr': {\n      '& td': {\n        verticalAlign: 'top',\n      },\n      '& td: first-of-type': {\n        verticalAlign: 'inherit',\n      },\n    },\n    '& tr: hover': {\n      '& #shoppingList-actionList': {\n        opacity: 1,\n      },\n    },\n  },\n}));\n\nconst StyledImage = styled('img')(() => ({\n  maxWidth: '60px',\n  height: 'auto',\n  marginRight: '0.5rem',\n}));\n\nconst StyledTextField = styled(TextField)(() => ({\n  '& input': {\n    paddingTop: '12px',\n    paddingRight: '6px',\n  },\n}));\nconst QUOTE_PRODUCT_QTY_MAX = 1000000;\n\nfunction QuoteTable(props: ShoppingDetailTableProps) {\n  const { total, items, idEdit = true, updateSummary } = props;\n  const b3Lang = useB3Lang();\n  const dispatch = useAppDispatch();\n  const featureFlags = useFeatureFlags();\n\n  const [isRequestLoading, setIsRequestLoading] = useState(false);\n  const [chooseOptionsOpen, setSelectedOptionsOpen] = useState(false);\n  const [optionsProduct, setOptionsProduct] = useState<any>(null);\n  const [optionsProductId, setOptionsProductId] = useState<string>('');\n\n  const isEnableProduct = useAppSelector(\n    ({ global }) => global.blockPendingQuoteNonPurchasableOOS.isEnableProduct,\n  );\n\n  const handleUpdateProductQty = async (row: any, value: number | string) => {\n    const product = await setModifierQtyPrice(row, Number(value));\n\n    dispatch(\n      setDraftProduct({\n        id: product.id,\n        product: {\n          node: product,\n        },\n      }),\n    );\n    updateSummary();\n  };\n\n  const handleCheckProductQty = async (row: any, value: number | string) => {\n    let newQty = ceil(Number(value));\n    if (newQty === Number(value) && newQty >= 1 && newQty <= QUOTE_PRODUCT_QTY_MAX) return;\n\n    if (Number(value) < 1) {\n      newQty = 1;\n    }\n\n    if (Number(value) > QUOTE_PRODUCT_QTY_MAX) {\n      newQty = QUOTE_PRODUCT_QTY_MAX;\n    }\n\n    handleUpdateProductQty(row, newQty);\n  };\n\n  const handleDeleteClick = (id: string) => {\n    dispatch(deleteProductFromDraftQuoteList(id));\n    updateSummary();\n  };\n\n  const handleChooseOptionsDialogCancel = () => {\n    setSelectedOptionsOpen(false);\n  };\n\n  const handleOpenProductEdit = (product: Product, itemId: string) => {\n    setOptionsProduct(product);\n    setOptionsProductId(itemId);\n    setSelectedOptionsOpen(true);\n  };\n\n  const getNewQuoteProduct = (products: Product[]): QuoteItem[] =>\n    products.map((product) => {\n      const {\n        variantId,\n        newSelectOptionList,\n        id,\n        productId,\n        name: productName,\n        quantity,\n        variants = [],\n        basePrice,\n        taxPrice = 0,\n        calculatedNoTaxPrice = 0,\n        calculatedTaxPrice = 0,\n      } = product;\n\n      let [variantInfo] = variants;\n      if (variants.length > 1) {\n        variantInfo = variants.find((item) => item.variant_id === variantId) ?? variantInfo;\n      }\n\n      const { image_url: primaryImage = '', sku: variantSku } = variantInfo;\n\n      let selectOptions;\n      try {\n        selectOptions = JSON.stringify(newSelectOptionList);\n      } catch (error) {\n        selectOptions = '[]';\n      }\n\n      const taxExclusive = variantInfo!.bc_calculated_price?.tax_exclusive || 0;\n      const basePriceExclusiveTax = basePrice || taxExclusive;\n\n      return {\n        node: {\n          basePrice: basePriceExclusiveTax,\n          taxPrice,\n          optionList: selectOptions,\n          id: id.toString(),\n          primaryImage,\n          productId,\n          productName,\n          productsSearch: {\n            ...product,\n            selectOptions,\n          },\n          quantity: Number(quantity),\n          variantSku,\n          calculatedTaxPrice,\n          calculatedNoTaxPrice,\n          calculatedValue: {},\n        },\n      };\n    });\n\n  const handleChooseOptionsDialogConfirm = async (products: Product[]) => {\n    await calculateProductListPrice(products);\n    const newProducts = getNewQuoteProduct(products);\n\n    newProducts.forEach((product) => {\n      const { basePrice } = product.node;\n      const newProduct = product;\n      newProduct.node.id = optionsProductId;\n\n      newProduct.node.basePrice = basePrice;\n    });\n\n    setSelectedOptionsOpen(false);\n\n    dispatch(setDraftProduct({ id: optionsProductId, product: newProducts[0] }));\n    updateSummary();\n\n    snackbar.success(b3Lang('quoteDraft.quoteTable.productUpdated'));\n  };\n\n  const columnItems: TableColumnItem<QuoteItem['node']>[] = [\n    {\n      key: 'Product',\n      title: b3Lang('quoteDraft.quoteTable.product'),\n      render: (row: CustomFieldItems) => {\n        const product: any = {\n          ...row.productsSearch,\n          selectOptions: row.optionList,\n        };\n        const productFields = getProductOptionsFields(product, {});\n\n        const optionList = JSON.parse(row.optionList);\n        const optionsValue: CustomFieldItems[] = productFields.filter((item) => item.valueText);\n\n        let warningMessage: string | null = null;\n        let warningDetails: string | null = null;\n\n        if (!featureFlags['B2B-3318.move_stock_and_backorder_validation_to_backend']) {\n          const currentProduct = getVariantInfoOOSAndPurchase(row);\n          const showWarning = !isEnableProduct && currentProduct?.name;\n\n          if (showWarning) {\n            if (currentProduct?.type === 'oos') {\n              const inventoryTracking =\n                product.inventoryTracking || row.inventoryTracking || 'none';\n\n              let inventoryLevel = product.inventoryLevel || row.inventoryLevel || 0;\n              if (inventoryTracking === 'variant') {\n                const currentVariant = product.variants.find(\n                  (variant: CustomFieldItems) => variant.sku === row.variantSku,\n                );\n\n                inventoryLevel = currentVariant?.inventory_level;\n              }\n\n              warningMessage = b3Lang('quoteDraft.quoteTable.outOfStock.tip');\n              warningDetails = b3Lang('quoteDraft.quoteTable.oosNumber.tip', {\n                qty: inventoryLevel,\n              });\n            } else {\n              warningMessage = b3Lang('quoteDraft.quoteTable.unavailable.tip');\n            }\n          }\n        }\n\n        return (\n          <Box\n            sx={{\n              display: 'flex',\n              alignItems: 'flex-start',\n            }}\n          >\n            <StyledImage\n              src={row.primaryImage || PRODUCT_DEFAULT_IMAGE}\n              alt=\"Product-img\"\n              loading=\"lazy\"\n            />\n            <Box>\n              <Typography\n                variant=\"body1\"\n                color=\"#212121\"\n                onClick={() => {\n                  const {\n                    location: { origin },\n                  } = window;\n\n                  if (product?.productUrl) {\n                    window.location.href = `${origin}${product?.productUrl}`;\n                  }\n                }}\n                sx={{\n                  cursor: 'pointer',\n                }}\n              >\n                {row.productName}\n              </Typography>\n              <Typography variant=\"body1\" color=\"#616161\">\n                {row.variantSku}\n              </Typography>\n              {optionList.length > 0 && optionsValue.length > 0 && (\n                <Box>\n                  {optionsValue.map((option: any) => (\n                    <Typography\n                      sx={{\n                        fontSize: '0.75rem',\n                        lineHeight: '1.5',\n                        color: '#455A64',\n                      }}\n                      key={option.valueLabel}\n                    >\n                      {`${option.valueLabel}: ${option.valueText}`}\n                    </Typography>\n                  ))}\n                </Box>\n              )}\n\n              {warningMessage && (\n                <Box sx={{ color: 'red' }}>\n                  <Box\n                    sx={{\n                      mt: '1rem',\n                      display: 'flex',\n                      alignItems: 'center',\n                      '& svg': { mr: '0.5rem' },\n                    }}\n                  >\n                    <WarningIcon color=\"error\" fontSize=\"small\" />\n                    {warningMessage}\n                  </Box>\n                  {warningDetails && <Box>{warningDetails}</Box>}\n                </Box>\n              )}\n            </Box>\n          </Box>\n        );\n      },\n      width: '40%',\n    },\n    {\n      key: 'Price',\n      title: b3Lang('quoteDraft.quoteTable.price'),\n      render: (row: CustomFieldItems) => {\n        const { basePrice, taxPrice } = row;\n\n        const inTaxPrice = getBCPrice(Number(basePrice), Number(taxPrice));\n        return (\n          <Typography\n            sx={{\n              padding: '12px 0',\n            }}\n          >\n            {getDisplayPrice({\n              price: currencyFormat(inTaxPrice),\n              productInfo: row,\n              showText: b3Lang('quoteDraft.quoteSummary.tbd'),\n            })}\n          </Typography>\n        );\n      },\n      width: '15%',\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      key: 'Qty',\n      title: b3Lang('quoteDraft.quoteTable.qty'),\n      render: (row) => (\n        <StyledTextField\n          size=\"small\"\n          type=\"number\"\n          variant=\"filled\"\n          disabled={!idEdit}\n          value={row.quantity}\n          inputProps={{\n            inputMode: 'numeric',\n            pattern: '[0-9]*',\n          }}\n          onChange={(e) => {\n            handleUpdateProductQty(row, Number(e.target.value));\n          }}\n          onBlur={(e) => {\n            handleCheckProductQty(row, Number(e.target.value));\n          }}\n          sx={{\n            width: '75%',\n          }}\n        />\n      ),\n      width: '15%',\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      key: 'Total',\n      title: b3Lang('quoteDraft.quoteTable.total'),\n      render: (row) => {\n        const { basePrice, quantity, taxPrice } = row;\n\n        const inTaxPrice = getBCPrice(Number(basePrice), Number(taxPrice));\n        const total = inTaxPrice * Number(quantity);\n        const optionList = JSON.parse(row.optionList);\n\n        return (\n          <Box>\n            <Typography\n              sx={{\n                padding: '12px 0',\n              }}\n            >\n              {getDisplayPrice({\n                price: currencyFormat(total),\n                productInfo: row,\n                showText: b3Lang('quoteDraft.quoteSummary.tbd'),\n              })}\n            </Typography>\n            <Box\n              sx={{\n                marginTop: '1rem',\n                opacity: 0,\n                textAlign: 'end',\n              }}\n              id=\"shoppingList-actionList\"\n            >\n              {optionList.length > 0 && idEdit && (\n                <Edit\n                  sx={{\n                    marginRight: '0.5rem',\n                    cursor: 'pointer',\n                    color: 'rgba(0, 0, 0, 0.54)',\n                  }}\n                  onClick={() => {\n                    const { productsSearch, id, optionList, quantity } = row;\n\n                    handleOpenProductEdit(\n                      {\n                        ...productsSearch,\n                        quantity,\n                        selectOptions: optionList,\n                      },\n                      id,\n                    );\n                  }}\n                />\n              )}\n              {idEdit && (\n                <Delete\n                  sx={{\n                    cursor: 'pointer',\n                    color: 'rgba(0, 0, 0, 0.54)',\n                  }}\n                  onClick={() => {\n                    const { id } = row;\n                    handleDeleteClick(id);\n                  }}\n                />\n              )}\n            </Box>\n          </Box>\n        );\n      },\n      width: '15%',\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ];\n\n  return (\n    <StyledQuoteTableContainer>\n      <Box\n        sx={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          margin: '0.5rem 0 1rem',\n        }}\n      >\n        <Typography\n          sx={{\n            fontSize: '24px',\n          }}\n        >\n          {b3Lang('quoteDraft.quoteTable.totalProducts', { total: total || 0 })}\n        </Typography>\n      </Box>\n\n      <PaginationTable\n        columnItems={columnItems}\n        rowsPerPageOptions={[12, 24, 36]}\n        items={items}\n        isCustomRender={false}\n        hover\n        labelRowsPerPage={b3Lang('quoteDraft.quoteTable.perPage')}\n        showBorder={false}\n        itemIsMobileSpacing={0}\n        noDataText={b3Lang('quoteDraft.quoteTable.noProducts')}\n        renderItem={(row, index?) => (\n          <QuoteTableCard\n            len={total || 0}\n            item={row}\n            itemIndex={index}\n            onEdit={handleOpenProductEdit}\n            onDelete={handleDeleteClick}\n            handleUpdateProductQty={handleUpdateProductQty}\n            idEdit={idEdit}\n          />\n        )}\n      />\n\n      <ChooseOptionsDialog\n        isOpen={chooseOptionsOpen}\n        isLoading={isRequestLoading}\n        setIsLoading={setIsRequestLoading}\n        product={optionsProduct}\n        onCancel={handleChooseOptionsDialogCancel}\n        onConfirm={\n          handleChooseOptionsDialogConfirm as unknown as (products: CustomFieldItems[]) => void\n        }\n        isEdit\n      />\n    </StyledQuoteTableContainer>\n  );\n}\n\nexport default QuoteTable;\n","import { LangFormatFunction } from '@/lib/lang';\n\nconst getAccountFormFields = (isMobile: boolean, b3Lang: LangFormatFunction) => {\n  const accountFormFields = [\n    {\n      name: 'label',\n      label: b3Lang('quoteDraft.config.addressLabel'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'firstName',\n      label: b3Lang('quoteDraft.config.firstName'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: isMobile ? 12 : 6,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'lastName',\n      label: b3Lang('quoteDraft.config.lastName'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: isMobile ? 12 : 6,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'companyName',\n      label: b3Lang('quoteDraft.config.company'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'country',\n      label: b3Lang('quoteDraft.config.country'),\n      required: false,\n      default: '',\n      fieldType: 'dropdown',\n      options: [],\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n      replaceOptions: {\n        label: 'countryName',\n        value: 'countryCode',\n      },\n    },\n    {\n      name: 'address',\n      label: b3Lang('quoteDraft.config.addressLine1'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'apartment',\n      label: b3Lang('quoteDraft.config.addressLine2'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'city',\n      label: b3Lang('quoteDraft.config.city'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      options: [],\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'state',\n      label: b3Lang('quoteDraft.config.state'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      options: [],\n      xs: isMobile ? 12 : 6,\n      variant: 'filled',\n      size: 'small',\n      replaceOptions: {\n        label: 'stateName',\n        value: 'stateName',\n      },\n    },\n    {\n      name: 'zipCode',\n      label: b3Lang('quoteDraft.config.zipCode'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      options: [],\n      xs: isMobile ? 12 : 6,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'phoneNumber',\n      label: b3Lang('quoteDraft.config.phoneNumber'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n  ];\n\n  return accountFormFields;\n};\n\nexport default getAccountFormFields;\n"],"names":["setOpenPage","state","countriesList","openAPPParams","useContext","GlobalContext","dispatch","useAppDispatch","featureFlags","useFeatureFlags","isB2BUser","useAppSelector","isB2BUserSelector","companyB2BId","company","companyInfo","id","companyName","customer","role","enteredInclusiveTax","storeConfigs","currencies","draftQuoteList","quoteInfo","salesRepCompanyId","b2bFeatures","masqueradeCompany","salesRepCompanyName","quoteInfoOrigin","draftQuoteInfo","currency","activeCurrencyInfoSelector","quoteSubmissionResponseInfo","global","quoteSubmissionResponse","selectCompanyHierarchyId","companyHierarchyInfo","isEnableProduct","blockPendingQuoteNonPurchasableOOS","portalStyle","backgroundColor","CustomStyleContext","isMoveStockAndBackorderValidationToBackend","quotesActionsPermission","useMemo","verifyCreatePermission","b2bPermissionsMap","quotesCreateActionsPermission","Number","navigate","useNavigate","b3Lang","useB3Lang","isMobile","useMobile","loading","setLoading","useState","isEdit","setEdit","addressList","setAddressList","shippingSameAsBilling","setShippingSameAsBilling","billingChange","setBillingChange","quoteSubmissionResponseOpen","setQuoteSubmissionResponseOpen","quoteId","setQuoteId","currentCreatedAt","setCurrentCreatedAt","extraFields","setExtraFields","quoteSummaryRef","useRef","isAddressCompanyHierarchy","useValidatePermissionWithComparisonType","level","permissionLevels","COMPANY_SUBSIDIARIES","code","getAddressesPermission","containOrEqual","useSetCountry","contactInfoRef","billingRef","shippingRef","useEffect","async","cloneDeep","companyId","addressB2BList","fetchAddresses","addresses","edges","getB2BCustomerAddresses","shippingDefaultAddress","find","item","node","isDefaultShipping","billingDefaultAddress","isDefaultBilling","validateObject","addressItem","label","firstName","lastName","country","countryCode","address","addressLine1","apartment","addressLine2","city","zipCode","phoneNumber","addressId","shippingAddress","billingAddress","customerAddresses","addressBCList","getBCCustomerAddresses","list","map","convertBCToB2BAddress","extraFieldsInfo","getB2BQuoteExtraFields","length","preExtraFields","defaultValues","field","defaultValue","fieldName","name","value","default","contactInfo","setDraftQuoteInfo","newInfo","email","emailAddress","setCustomInfo","quoteUserId","b2bId","setQuoteUserId","init","quoteAndExtraFieldsInfo","info","quoteTitle","referenceNumber","recipients","getAddress","addressSaveInfo","current","getContactInfoValue","handleCollectingData","currentRecipients","saveInfo","ccEmail","trim","uniq","concat","accountFormFields","getAccountFormFields","updateSummary","refreshSummary","handleAfterSubmit","inpQuoteId","inpCurrentCreatedAt","currentQuoteId","createdAt","resetDraftQuoteInfo","resetDraftQuoteList","B3LStorage","delete","to","handleSubmit","isComplete","Object","keys","every","key","snackbar","error","some","getVariantInfoOOSAndPurchase","newNote","note","replace","perfectAddress","newAddress","countryItem","countryName","editShippingAddress","editBillingAddress","allPrice","allTaxPrice","calculationTime","includes","Date","getTime","productList","product","productsSearch","selectOptions","optionList","optionsList","getProductOptionsFields","optionId","optionValue","fieldType","optionLabel","valueText","optionName","valueLabel","type","fieldOriginType","filter","variants","variantsItem","Array","isArray","sku","variantSku","basePrice","quantity","taxPrice","productId","toFixed","decimal_places","discount","offeredPrice","variantId","variant_id","imageUrl","primaryImage","productName","options","itemId","uuid","fileList","files","fileInfo","file","fileUrl","fileName","fileType","fileSize","data","message","legalTerms","totalAmount","grandTotal","subtotal","storeHash","channelId","userEmail","taxTotal","currencyExchangeRate","currency_exchange_rate","token","location","token_location","decimalToken","decimal_token","decimalPlaces","thousandsToken","thousands_token","currencyCode","currency_code","dispatchEvent","Error","response","createQuote","extensions","productValidationErrors","forEach","err","quoteCreate","quote","cartId","get","deleteCartObject","deleteCartData","deleteCart","b2bLogger","setShippingInfoValue","jsxs","B3Spin","isSpinning","children","Box","sx","mb","width","jsx","marginBottom","displayPrint","color","cursor","display","alignItems","onClick","quoteBtn","isOpen","openUrl","ArrowBackIosNew","fontSize","marginRight","style","margin","backText","text","justifyContent","flexDirection","Typography","component","mr","getContrastColor","QuoteStatus","position","left","bottom","background","p","zIndex","CustomButton","variant","size","disabled","height","padding","alignSelf","QuoteInfo","status","handleEditInfoClick","Container","ContactInfo","quoteExtraFields","extraFieldsDefault","handleSaveCCEmail","setDraftQuoteRecipients","ref","mt","QuoteAddress","title","pr","pl","FormControlLabel","control","Checkbox","checked","onChange","e","target","xs","flexBasis","flexGrow","boxShadow","borderRadius","QuoteTable","total","items","Stack","spacing","QuoteSummary","AddToQuote","updateList","addToQuote","validatedProducts","validateProducts","products","addQuoteDraftProducts","QuoteNote","quoteStatus","QuoteAttachment","QuoteSubmissionResponse","onClose","handleCloseQuoteSubmissionResponse","native","randomUUID","crypto","bind","v4","buf","offset","rnds","random","rng","unsafeStringify","countries","getB2BCountries","payload","values","x","props","customerGroupId","companyStatus","isOpenBulkLoadCSV","setIsOpenBulkLoadCSV","isLoading","setIsLoading","blockPendingAccountViewPrice","useBlockPendingAccountViewPrice","getNewQuoteProduct","newSelectOptionList","calculatedValue","variantInfo","image_url","JSON","stringify","taxExclusive","bc_calculated_price","tax_exclusive","taxInclusive","tax_inclusive","Card","CardContent","B3CollapseContainer","SearchProduct","addToList","newProducts","noSkuProducts","success","searchDialogTitle","addButtonText","Divider","QuickAdd","quickAddToList","productIds","variantProducts","searchProducts","conversionProductsList","variantProduct","calculateProductListPrice","buttonText","UploadFileIcon","B3Upload","setIsOpen","handleAddToList","validProduct","productsData","push","newProductInfo","option","qty","option_id","currentProductSearch","variantItem","toUpperCase","quoteListitem","PRODUCT_DEFAULT_IMAGE","as_entered","validProductQty","withModifiers","emailValidate","validatorRules","ContactInfo$1","forwardRef","getValues","setError","formState","errors","setValue","useForm","mode","isGuest","CustomerRole","GUEST","isValidUserType","isValidUserTypeSelector","isValid","emailValue","validateEmailValue","fieldValue","res","validateQuoteExtraFields","messageArr","errMsg","split","validateQuoteExtraFieldsInfo","useImperativeHandle","getContactInfo","required","validate","getQuoteInfo","handleSaveClick","currentExtraFields","isEmail","existValue","isEnterTrigger","handleSave","ccEmails","formData","infos","fontWeight","B3CustomForm","formFields","TagBox","styled","Flex","theme","marginTop","AddressItemCard","addressInfo","onSetAddress","useTheme","wordBreak","B3Tag","textColor","ChooseAddress","closeModal","handleChangeAddress","recordList","copyList","setList","allList","newList","isShipping","isBilling","B3Dialog","fullWidth","handleLeftClick","handleCancelClicked","showRightBtn","maxWidth","B3FilterSearch","searchBGColor","placeholder","handleChange","q","flag","handleSearchProduct","Grid","container","QuoteAddress$1","setOpen","quoteAddress","setQuoteAddress","useGetCountry","setAddress","useWatch","countriesFieldIndex","findIndex","addressField","addressFieldIndex","stateList","states","stateFieldIndex","stateVal","stateName","handleCloseAddressChoose","fieldsetId","useId","handleAddressChoose","textTransform","maxHeight","showLeftBtn","handRightClick","isShowBordered","rightSizeBtn","defaultSummary","shipping","tax","_","quoteSummary","setQuoteSummary","isHideQuoteDraftPrice","setHideQuoteDraftPrice","showInclusiveTaxPrice","priceCalc","price","parseFloat","String","getSummary","useCallback","isHidePrice","store","getState","getVariantInfoDisplayPrice","getQuoteDraftShowPriceTBD","newQuoteSummary","reduce","summary","productTax","getBCPrice","priceFormat","currencyFormat","showPrice","cardId","PaginationTable","columnItems","isCustomRender","tableKey","renderItem","noDataText","tableFixed","tableHeaderHide","rowsPerPageOptions","itemSpacing","itemXs","showCheckbox","showSelectAllCheckbox","selectedSymbol","isSelectOtherPageCheckbox","showBorder","getSelectCheckbox","hover","labelRowsPerPage","itemIsMobileSpacing","disableCheckbox","onClickRow","showPagination","showRowsPerPageOptions","CollapseComponent","applyAllDisableCheckbox","sortDirection","sortByFn","orderBy","pageType","initPagination","first","pagination","setPagination","isAllSelect","setAllSelect","selectCheckbox","setSelectCheckbox","tablePagination","count","getCurrentAllItemsSelect","isNodeWrapper","B3Table","listItems","slice","onPaginationChange","isInfiniteScroll","handleSelectAllItems","otherPageCheckbox","newSelectCheckbox","index","splice","singlePageCheckbox","selects","disableCurrentCheckbox","handleSelectOneItem","indexOf","StyledImage","QuoteTableCard","quoteTableItem","onEdit","onDelete","handleUpdateProductQty","idEdit","len","itemIndex","productFields","parse","optionsValue","productUrl","singlePrice","getDisplayPrice","productInfo","showText","totalPrice","borderTop","borderBottom","src","alt","flex","origin","window","href","lineHeight","TextField","inputProps","inputMode","pattern","textAlign","Edit","Delete","StyledQuoteTableContainer","verticalAlign","opacity","StyledTextField","paddingTop","paddingRight","QUOTE_PRODUCT_QTY_MAX","isRequestLoading","setIsRequestLoading","chooseOptionsOpen","setSelectedOptionsOpen","optionsProduct","setOptionsProduct","optionsProductId","setOptionsProductId","row","setModifierQtyPrice","setDraftProduct","handleDeleteClick","deleteProductFromDraftQuoteList","handleOpenProductEdit","render","warningMessage","warningDetails","currentProduct","inventoryTracking","inventoryLevel","currentVariant","inventory_level","WarningIcon","inTaxPrice","onBlur","newQty","ceil","handleCheckProductQty","ChooseOptionsDialog","onCancel","handleChooseOptionsDialogCancel","onConfirm","calculatedNoTaxPrice","calculatedTaxPrice","toString","newProduct","replaceOptions"],"mappings":"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","x_google_ignoreList":[1,2]}