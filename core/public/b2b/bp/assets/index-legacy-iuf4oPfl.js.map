{"version":3,"file":"index-legacy-iuf4oPfl.js","sources":["../../src/pages/RegisteredBCToB2B/index.tsx"],"sourcesContent":["import { MouseEvent, useContext, useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useNavigate } from 'react-router-dom';\nimport styled from '@emotion/styled';\nimport { Alert, Box, ImageListItem } from '@mui/material';\nimport isEmpty from 'lodash-es/isEmpty';\n\nimport { B3Card, B3CustomForm } from '@/components';\nimport CustomButton from '@/components/button/CustomButton';\nimport { getContrastColor } from '@/components/outSideComponents/utils/b3CustomStyles';\nimport B3Spin from '@/components/spin/B3Spin';\nimport { useMobile } from '@/hooks';\nimport { useB3Lang } from '@/lib/lang';\nimport { CustomStyleContext } from '@/shared/customStyleButton';\nimport { GlobalContext } from '@/shared/global';\nimport { useAppSelector } from '@/store';\nimport { channelId, loginJump, storeHash } from '@/utils';\nimport b2bLogger from '@/utils/b3Logger';\nimport { getCurrentCustomerInfo } from '@/utils/loginInfo';\n\nimport {\n  createB2BCompanyUser,\n  getB2BAccountFormFields,\n  getB2BCountries,\n  uploadB2BFile,\n  validateBCCompanyExtraFields,\n  validateBCCompanyUserExtraFields,\n} from '../../shared/service/b2b';\nimport { type PageProps } from '../PageProps';\nimport {\n  AccountFormFieldsItems,\n  b2bAddressRequiredFields,\n  Base64,\n  Country,\n  deCodeField,\n  getAccountFormFields,\n  RegisterFieldsItems,\n  State,\n  toHump,\n} from '../Registered/config';\nimport { RegisteredContext } from '../Registered/context/RegisteredContext';\nimport RegisteredFinish from '../Registered/RegisteredFinish';\nimport {\n  InformationFourLabels,\n  InformationLabels,\n  RegisteredContainer,\n  RegisteredImage,\n  TipContent,\n} from '../Registered/styled';\nimport { RegisterFields } from '../Registered/types';\n\ninterface CustomerInfo {\n  [k: string]: string;\n}\n\nconst StyledRegisterContent = styled(Box)({\n  '& #b3-customForm-id-name': {\n    '& label[data-shrink=\"true\"]': {\n      whiteSpace: 'break-spaces',\n      minWidth: 'calc(133% - 24px)',\n      transition: 'unset',\n    },\n\n    '& label[data-shrink=\"false\"]': {\n      whiteSpace: 'break-spaces',\n    },\n  },\n});\n\nexport default function RegisteredBCToB2B(props: PageProps) {\n  const [errorMessage, setErrorMessage] = useState('');\n  const [showFinishPage, setShowFinishPage] = useState<boolean>(false);\n\n  const { setOpenPage } = props;\n\n  const b3Lang = useB3Lang();\n  const [isMobile] = useMobile();\n\n  const {\n    control,\n    handleSubmit,\n    getValues,\n    formState: { errors },\n    setValue,\n    setError,\n    watch,\n  } = useForm({\n    mode: 'onSubmit',\n  });\n\n  const {\n    state: { logo, blockPendingAccountOrderCreation, registerEnabled },\n  } = useContext(GlobalContext);\n\n  const navigate = useNavigate();\n\n  const customer = useAppSelector(({ company }) => company.customer);\n  const { id: customerId, firstName, lastName, emailAddress, phoneNumber } = customer;\n  const { state, dispatch } = useContext(RegisteredContext);\n\n  const {\n    state: {\n      companyAutoApproval,\n      portalStyle: { backgroundColor = '#FEF9F5' },\n    },\n  } = useContext(CustomStyleContext);\n\n  const customColor = getContrastColor(backgroundColor);\n\n  const showLoading = (isShow = false) => {\n    dispatch({\n      type: 'loading',\n      payload: {\n        isLoading: isShow,\n      },\n    });\n  };\n\n  useEffect(() => {\n    showLoading(false);\n    if (!registerEnabled) {\n      navigate('/login');\n    }\n    // disabling this rule as we don't need to add showLoading dispatcher and navigate fn into the dep array\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [registerEnabled]);\n\n  useEffect(() => {\n    const getBCAdditionalFields = async () => {\n      try {\n        if (dispatch) {\n          showLoading(true);\n          dispatch({\n            type: 'finishInfo',\n            payload: {\n              submitSuccess: false,\n            },\n          });\n        }\n\n        const accountFormAllFields = await getB2BAccountFormFields(3);\n\n        const newAccountFormFields: AccountFormFieldsItems[] = (\n          accountFormAllFields?.accountFormFields || []\n        ).map((fields: AccountFormFieldsItems) => {\n          const accountFields = fields;\n          if (b2bAddressRequiredFields.includes(fields?.fieldId || '') && fields.groupId === 4) {\n            accountFields.isRequired = true;\n            accountFields.visible = true;\n          }\n\n          return fields;\n        });\n\n        const bcToB2BAccountFormFields = getAccountFormFields(newAccountFormFields || []);\n        const { countries } = await getB2BCountries();\n\n        const newAddressInformationFields = bcToB2BAccountFormFields.address.map(\n          (addressFields: Partial<RegisterFieldsItems>): Partial<RegisterFieldsItems> => {\n            const fields = addressFields;\n            if (addressFields.name === 'country') {\n              fields.options = countries;\n              fields.replaceOptions = {\n                label: 'countryName',\n                value: 'countryName',\n              };\n            }\n            return addressFields;\n          },\n        );\n\n        const customerInfo: CustomerInfo = {\n          phone: phoneNumber,\n          first_name: firstName,\n          last_name: lastName,\n          email: emailAddress,\n        };\n\n        const newContactInformation = bcToB2BAccountFormFields.contactInformation.map(\n          (contactInformationField: Partial<RegisterFieldsItems>): Partial<RegisterFieldsItems> => {\n            const field = contactInformationField;\n            field.disabled = true;\n\n            field.default =\n              customerInfo[deCodeField(contactInformationField.name as string)] ||\n              contactInformationField.default;\n\n            if (contactInformationField.required && !contactInformationField?.default) {\n              field.disabled = false;\n            }\n\n            return contactInformationField;\n          },\n        );\n\n        if (dispatch) {\n          dispatch({\n            type: 'all',\n            payload: {\n              isLoading: false,\n              bcTob2bContactInformation: [...newContactInformation],\n              bcTob2bCompanyExtraFields: [],\n              bcTob2bCompanyInformation: [...bcToB2BAccountFormFields.businessDetails],\n              bcTob2bAddressBasicFields: [...newAddressInformationFields],\n              countryList: [...countries],\n            },\n          });\n        }\n      } catch (e) {\n        b2bLogger.error(e);\n      }\n    };\n\n    getBCAdditionalFields();\n    // disabling as we only need to run this once and values at starting render are good enough\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const {\n    bcTob2bContactInformation,\n    isLoading,\n    bcTob2bCompanyInformation = [],\n    bcTob2bAddressBasicFields = [],\n    countryList = [],\n    bcTob2bCompanyExtraFields = [],\n  } = state;\n\n  useEffect(() => {\n    const handleCountryChange = (countryCode: string, stateCode = '') => {\n      const stateList =\n        countryList.find(\n          (country: Country) =>\n            country.countryCode === countryCode || country.countryName === countryCode,\n        )?.states || [];\n      const stateFields = bcTob2bAddressBasicFields.find(\n        (formFields: RegisterFields) => formFields.name === 'state',\n      );\n\n      if (stateFields) {\n        if (stateList.length > 0) {\n          stateFields.fieldType = 'dropdown';\n          stateFields.options = stateList;\n          stateFields.required = true;\n        } else {\n          stateFields.fieldType = 'text';\n          stateFields.options = [];\n          stateFields.required = false;\n        }\n      }\n\n      setValue(\n        'state',\n        stateCode &&\n          countryCode &&\n          (stateList.find((state: State) => state.stateCode === stateCode) ||\n            stateList.length === 0)\n          ? stateCode\n          : '',\n      );\n\n      dispatch({\n        type: 'stateList',\n        payload: {\n          stateList,\n          bcTob2bAddressBasicFields: [...bcTob2bAddressBasicFields],\n        },\n      });\n    };\n\n    const handleInitCountryAndState = () => {\n      const countryValue = getValues('country');\n      const stateValue = getValues('state');\n      handleCountryChange(countryValue, stateValue);\n    };\n    handleInitCountryAndState();\n\n    const subscription = watch((value, { name, type }) => {\n      const { country, state } = value;\n      if (name === 'country' && type === 'change') {\n        handleCountryChange(country, state);\n      }\n    });\n    return () => subscription.unsubscribe();\n    // disabling as we only need to run this when countryList changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [countryList]);\n\n  const getFileUrl = async (attachmentsList: RegisterFields[], data: CustomFieldItems) => {\n    let attachments: File[] = [];\n\n    if (!attachmentsList.length) return undefined;\n\n    attachmentsList.forEach((field: any) => {\n      attachments = data[field.name] || [];\n    });\n\n    try {\n      const fileResponse = await Promise.all(\n        attachments.map((file: File) =>\n          uploadB2BFile({\n            file,\n            type: 'companyAttachedFile',\n          }),\n        ),\n      );\n\n      const fileList = fileResponse.reduce((fileList: any, res: any) => {\n        let list = fileList;\n        if (res.code === 200) {\n          const newData = {\n            ...res.data,\n          };\n          newData.fileSize = newData.fileSize ? `${newData.fileSize}` : '';\n          list = [...fileList, newData];\n        } else {\n          throw (\n            res.data.errMsg || res.message || b3Lang('intl.global.fileUpload.fileUploadFailure')\n          );\n        }\n        return list;\n      }, []);\n\n      return fileList;\n    } catch (error) {\n      b2bLogger.error(error);\n      throw error;\n    }\n  };\n\n  const getB2BFieldsValue = async (\n    data: CustomFieldItems,\n    customerId: number | string,\n    fileList: any,\n    companyUserExtraFields: CustomFieldItems[],\n  ) => {\n    const b2bFields: CustomFieldItems = {};\n\n    b2bFields.customerId = customerId || '';\n    b2bFields.storeHash = storeHash;\n    b2bFields.userExtraFields = companyUserExtraFields;\n    const companyInfo = bcTob2bCompanyInformation.filter(\n      (list) => !list.custom && list.fieldType !== 'files',\n    );\n    const companyExtraInfo = bcTob2bCompanyInformation.filter((list) => !!list.custom);\n    // company field\n    if (companyInfo.length) {\n      companyInfo.forEach((item: any) => {\n        b2bFields[toHump(deCodeField(item.name))] = data[item.name] || '';\n      });\n    }\n\n    // Company Additional Field\n    if (companyExtraInfo.length) {\n      const extraFields: Array<CustomFieldItems> = [];\n      companyExtraInfo.forEach((item: CustomFieldItems) => {\n        const itemExtraField: CustomFieldItems = {};\n        itemExtraField.fieldName = deCodeField(item.name);\n        itemExtraField.fieldValue = data[item.name] || '';\n        extraFields.push(itemExtraField);\n      });\n      b2bFields.extraFields = extraFields;\n    }\n\n    // address Field\n    const addressBasicInfo = bcTob2bAddressBasicFields.filter((list) => !list.custom);\n    const addressExtraBasicInfo = bcTob2bAddressBasicFields.filter((list) => !!list.custom);\n\n    if (addressBasicInfo.length) {\n      addressBasicInfo.forEach((field: CustomFieldItems) => {\n        const name = deCodeField(field.name);\n        if (name === 'address1') {\n          b2bFields.addressLine1 = data[field.name] || '';\n        }\n        if (name === 'address2') {\n          b2bFields.addressLine2 = data[field.name] || '';\n        }\n        b2bFields[name] = data[field.name] || '';\n      });\n    }\n\n    // address Additional Field\n    if (addressExtraBasicInfo.length) {\n      const extraFields: Array<CustomFieldItems> = [];\n      addressExtraBasicInfo.forEach((item: CustomFieldItems) => {\n        const itemExtraField: CustomFieldItems = {};\n        itemExtraField.fieldName = deCodeField(item.name);\n        itemExtraField.fieldValue = data[item.name] || '';\n        extraFields.push(itemExtraField);\n      });\n      b2bFields.addressExtraFields = extraFields;\n    }\n    b2bFields.fileList = fileList;\n    b2bFields.channelId = channelId;\n\n    return createB2BCompanyUser(b2bFields);\n  };\n\n  const validateCompanyExtraFieldsUnique = async (data: CustomFieldItems) => {\n    try {\n      const extraCompanyInformation = bcTob2bCompanyInformation.filter(\n        (item: RegisterFields) => !!item.custom,\n      );\n      const extraFields = extraCompanyInformation.map((field: RegisterFields) => ({\n        fieldName: deCodeField(field.name),\n        fieldValue: data[field.name] || field.default,\n      }));\n\n      const res = await validateBCCompanyExtraFields({\n        extraFields,\n      });\n\n      if (res.code !== 200) {\n        const message = res.data?.errMsg || res.message || '';\n\n        const messageArr = message.split(':');\n\n        if (messageArr.length >= 2) {\n          const field = extraCompanyInformation.find(\n            (field) => deCodeField(field.name) === messageArr[0],\n          );\n          if (field) {\n            setError(field.name, {\n              type: 'manual',\n              message: messageArr[1],\n            });\n            showLoading(false);\n            return false;\n          }\n        }\n        throw message;\n      }\n\n      setErrorMessage('');\n      return true;\n    } catch (error) {\n      b2bLogger.error(error);\n      throw error;\n    }\n  };\n\n  const handleValidateAttachmentFiles = () => {\n    const formData = getValues();\n    const attachmentsFilesFiled = bcTob2bCompanyInformation.find(\n      (info) => info.fieldId === 'field_attachments',\n    );\n    if (\n      !isEmpty(attachmentsFilesFiled) &&\n      attachmentsFilesFiled.required &&\n      formData[attachmentsFilesFiled.name].length === 0\n    ) {\n      setError(attachmentsFilesFiled.name, {\n        type: 'required',\n        message: b3Lang('global.validate.required', {\n          label: attachmentsFilesFiled.label ?? '',\n        }),\n      });\n\n      showLoading(false);\n      return true;\n    }\n\n    return false;\n  };\n\n  const handleResetBcTob2bContactInformation = (FieldName: string) => {\n    if (bcTob2bContactInformation) {\n      const newBcTob2bContactInformation = bcTob2bContactInformation.map(\n        (contactInformationField) => {\n          if (contactInformationField.name === FieldName) {\n            return {\n              ...contactInformationField,\n              disabled: false,\n            };\n          }\n          return contactInformationField;\n        },\n      );\n\n      if (dispatch) {\n        dispatch({\n          type: 'all',\n          payload: {\n            bcTob2bContactInformation: [...newBcTob2bContactInformation],\n          },\n        });\n      }\n    }\n  };\n\n  const handleValidateCompanyUserExtraFields = async (extraFields: CustomFieldItems[]) => {\n    try {\n      const res = await validateBCCompanyUserExtraFields({\n        extraFields,\n      });\n\n      if (res.code !== 200) {\n        const message = res.data?.errMsg || res.message || '';\n\n        const messageArr = message.split(':');\n\n        if (messageArr.length >= 2) {\n          const field = bcTob2bContactInformation?.find(\n            (field: RegisterFields) => field.custom && Base64.decode(field.name) === messageArr[0],\n          );\n          if (field) {\n            setError(field.name, {\n              type: 'manual',\n              message: messageArr[1],\n            });\n            handleResetBcTob2bContactInformation(field.name);\n            showLoading(false);\n            return false;\n          }\n        }\n        setErrorMessage(message);\n        showLoading(false);\n        return false;\n      }\n      setErrorMessage('');\n      return true;\n    } catch (error) {\n      return false;\n    }\n  };\n\n  const handleNext = (event: MouseEvent) => {\n    const hasAttachmentsFilesError = handleValidateAttachmentFiles();\n\n    handleSubmit(async (data: CustomFieldItems) => {\n      if (hasAttachmentsFilesError) return;\n      showLoading(true);\n\n      try {\n        const isValidate = await validateCompanyExtraFieldsUnique(data);\n        if (!isValidate) {\n          return;\n        }\n\n        // get company user extra field\n        const b2bContactInformationList = bcTob2bContactInformation || [];\n        const companyUserExtraFieldsList = b2bContactInformationList.filter(\n          (item) => !!item.custom,\n        );\n\n        const companyUserExtraFields: Array<CustomFieldItems> = [];\n        if (companyUserExtraFieldsList.length) {\n          companyUserExtraFieldsList.forEach((item: CustomFieldItems) => {\n            const itemExtraField: CustomFieldItems = {};\n            itemExtraField.fieldName = deCodeField(item.name);\n            itemExtraField.fieldValue = data[item.name] || item?.default || '';\n            companyUserExtraFields.push(itemExtraField);\n          });\n        }\n\n        let isCompanyUserValidate = true;\n        if (companyUserExtraFields.length > 0) {\n          isCompanyUserValidate =\n            await handleValidateCompanyUserExtraFields(companyUserExtraFields);\n        }\n        if (!isCompanyUserValidate) {\n          return;\n        }\n\n        const attachmentsList = bcTob2bCompanyInformation.filter(\n          (list) => list.fieldType === 'files',\n        );\n        const fileList = await getFileUrl(attachmentsList || [], data);\n        await getB2BFieldsValue(data, customerId, fileList, companyUserExtraFields);\n\n        const isAuto = companyAutoApproval.enabled;\n\n        if (emailAddress) {\n          dispatch({\n            type: 'finishInfo',\n            payload: {\n              submitSuccess: true,\n              isAutoApproval: isAuto,\n              blockPendingAccountOrderCreation,\n            },\n          });\n          dispatch({\n            type: 'all',\n            payload: {\n              accountType: '1',\n            },\n          });\n          await getCurrentCustomerInfo();\n          setShowFinishPage(true);\n        }\n      } catch (err: any) {\n        b2bLogger.error(err);\n        setErrorMessage(err?.message || err);\n      } finally {\n        showLoading(false);\n      }\n    })(event);\n  };\n\n  const handleFinish = () => {\n    const isLoginLandLocation = loginJump(navigate, true);\n\n    if (!isLoginLandLocation) return;\n\n    if (companyAutoApproval.enabled) {\n      navigate('/orders');\n    } else {\n      window.location.href = '/';\n    }\n  };\n\n  return (\n    <B3Card setOpenPage={setOpenPage}>\n      <RegisteredContainer isMobile={isMobile}>\n        <B3Spin isSpinning={isLoading} tip={b3Lang('global.tips.loading')} transparency=\"0\">\n          <Box\n            sx={{\n              display: 'flex',\n              flexDirection: 'column',\n              width: '100%',\n              alignItems: 'center',\n              '& h4': {\n                color: customColor,\n              },\n              '& input, & .MuiFormControl-root .MuiTextField-root, & .MuiDropzoneArea-textContainer, & .MuiSelect-select.MuiSelect-filled, & .MuiTextField-root .MuiInputBase-multiline':\n                {\n                  borderRadius: '4px',\n                  borderBottomLeftRadius: '0',\n                  borderBottomRightRadius: '0',\n                },\n            }}\n          >\n            {logo && (\n              <RegisteredImage>\n                <ImageListItem\n                  sx={{\n                    maxWidth: '250px',\n                  }}\n                  onClick={() => {\n                    window.location.href = '/';\n                  }}\n                >\n                  <img src={logo} alt={b3Lang('global.tips.registerLogo')} loading=\"lazy\" />\n                </ImageListItem>\n              </RegisteredImage>\n            )}\n\n            {showFinishPage ? (\n              <RegisteredFinish handleFinish={handleFinish} isBCToB2B />\n            ) : (\n              <StyledRegisterContent\n                sx={{\n                  width: isMobile ? '100%' : '537px',\n                  boxShadow:\n                    '0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px rgba(0, 0, 0, 0.14), 0px 1px 3px rgba(0, 0, 0, 0.12)',\n                  borderRadius: '4px',\n                  marginTop: '1rem',\n                  background: '#FFFFFF',\n                  padding: '0 0.8rem 1rem 0.8rem',\n                }}\n              >\n                <InformationLabels>{b3Lang('registeredbctob2b.title')}</InformationLabels>\n\n                {errorMessage && (\n                  <Alert severity=\"error\">\n                    <TipContent>{errorMessage}</TipContent>\n                  </Alert>\n                )}\n\n                <Box\n                  sx={{\n                    width: '100%',\n                  }}\n                >\n                  <InformationFourLabels>\n                    {bcTob2bContactInformation?.length\n                      ? bcTob2bContactInformation[0]?.groupName\n                      : ''}\n                  </InformationFourLabels>\n                  <B3CustomForm\n                    formFields={bcTob2bContactInformation || []}\n                    errors={errors}\n                    control={control}\n                    getValues={getValues}\n                    setValue={setValue}\n                  />\n                </Box>\n\n                <Box\n                  sx={{\n                    width: '100%',\n                  }}\n                >\n                  <InformationFourLabels>\n                    {bcTob2bCompanyInformation?.length\n                      ? bcTob2bCompanyInformation[0]?.groupName\n                      : ''}\n                  </InformationFourLabels>\n                  <B3CustomForm\n                    formFields={[...bcTob2bCompanyInformation, ...bcTob2bCompanyExtraFields]}\n                    errors={errors}\n                    control={control}\n                    getValues={getValues}\n                    setValue={setValue}\n                    setError={setError}\n                  />\n                </Box>\n\n                <Box\n                  sx={{\n                    width: '100%',\n                  }}\n                >\n                  <InformationFourLabels>\n                    {bcTob2bAddressBasicFields?.length\n                      ? bcTob2bAddressBasicFields[0]?.groupName\n                      : ''}\n                  </InformationFourLabels>\n\n                  <B3CustomForm\n                    formFields={bcTob2bAddressBasicFields}\n                    errors={errors}\n                    control={control}\n                    getValues={getValues}\n                    setValue={setValue}\n                  />\n                </Box>\n\n                {!showFinishPage && (\n                  <Box\n                    sx={{\n                      display: 'flex',\n                      flexDirection: 'row-reverse',\n                      pt: 2,\n                      width: '100%',\n                    }}\n                  >\n                    <CustomButton variant=\"contained\" onClick={handleNext}>\n                      {b3Lang('global.button.submit')}\n                    </CustomButton>\n                  </Box>\n                )}\n              </StyledRegisterContent>\n            )}\n          </Box>\n        </B3Spin>\n      </RegisteredContainer>\n    </B3Card>\n  );\n}\n"],"names":["props","errorMessage","setErrorMessage","useState","showFinishPage","setShowFinishPage","setOpenPage","b3Lang","useB3Lang","isMobile","useMobile","control","handleSubmit","getValues","formState","errors","setValue","setError","watch","useForm","mode","state","logo","blockPendingAccountOrderCreation","registerEnabled","useContext","GlobalContext","navigate","useNavigate","customer","useAppSelector","company","id","customerId","firstName","lastName","emailAddress","phoneNumber","dispatch","RegisteredContext","companyAutoApproval","portalStyle","backgroundColor","CustomStyleContext","customColor","getContrastColor","showLoading","isShow","type","payload","isLoading","useEffect","async","submitSuccess","accountFormAllFields","getB2BAccountFormFields","newAccountFormFields","accountFormFields","map","fields","accountFields","b2bAddressRequiredFields","includes","fieldId","groupId","isRequired","visible","bcToB2BAccountFormFields","getAccountFormFields","countries","getB2BCountries","newAddressInformationFields","address","addressFields","name","options","replaceOptions","label","value","customerInfo","phone","first_name","last_name","email","newContactInformation","contactInformation","contactInformationField","field","disabled","default","deCodeField","required","bcTob2bContactInformation","bcTob2bCompanyExtraFields","bcTob2bCompanyInformation","businessDetails","bcTob2bAddressBasicFields","countryList","e","b2bLogger","error","getBCAdditionalFields","handleCountryChange","countryCode","stateCode","stateList","find","country","countryName","states","stateFields","formFields","length","fieldType","handleInitCountryAndState","countryValue","stateValue","subscription","unsubscribe","handleValidateCompanyUserExtraFields","res","validateBCCompanyUserExtraFields","extraFields","code","message","data","errMsg","messageArr","split","custom","Base64","decode","FieldName","newBcTob2bContactInformation","handleResetBcTob2bContactInformation","jsx","B3Card","children","RegisteredContainer","B3Spin","isSpinning","tip","transparency","jsxs","Box","sx","display","flexDirection","width","alignItems","color","borderRadius","borderBottomLeftRadius","borderBottomRightRadius","RegisteredImage","ImageListItem","maxWidth","onClick","window","location","href","src","alt","loading","RegisteredFinish","handleFinish","loginJump","enabled","isBCToB2B","StyledRegisterContent","boxShadow","marginTop","background","padding","InformationLabels","Alert","severity","TipContent","InformationFourLabels","groupName","B3CustomForm","pt","CustomButton","variant","event","hasAttachmentsFilesError","handleValidateAttachmentFiles","formData","attachmentsFilesFiled","info","isEmpty","isValidate","extraCompanyInformation","filter","item","fieldName","fieldValue","validateBCCompanyExtraFields","validateCompanyExtraFieldsUnique","companyUserExtraFieldsList","companyUserExtraFields","forEach","itemExtraField","push","isCompanyUserValidate","attachmentsList","list","fileList","attachments","Promise","all","file","uploadB2BFile","reduce","newData","fileSize","getFileUrl","b2bFields","storeHash","userExtraFields","companyInfo","companyExtraInfo","toHump","addressBasicInfo","addressExtraBasicInfo","addressLine1","addressLine2","addressExtraFields","channelId","createB2BCompanyUser","getB2BFieldsValue","isAuto","isAutoApproval","accountType","getCurrentCustomerInfo","err","styled","whiteSpace","minWidth","transition"],"mappings":"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"}