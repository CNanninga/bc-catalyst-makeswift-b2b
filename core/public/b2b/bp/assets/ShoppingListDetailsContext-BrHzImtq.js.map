{"version":3,"file":"ShoppingListDetailsContext-BrHzImtq.js","sources":["../../src/utils/validateProducts.ts","../../src/pages/ShoppingListDetails/context/ShoppingListDetailsContext.tsx"],"sourcesContent":["import { LangFormatFunction } from '@/lib/lang';\nimport { validateProduct } from '@/shared/service/b2b/graphql/product';\n\nimport { snackbar } from './b3Tip';\n\ninterface Option {\n  optionId: number | `attribute[${number}]`;\n  optionValue: string;\n}\n\nexport const validateProducts = async (\n  products: CustomFieldItems[],\n  b3Lang: LangFormatFunction,\n) => {\n  const validationPromises = products.map(({ node: product }) => {\n    const { productId, quantity, productsSearch } = product;\n    const { variantId, newSelectOptionList } = productsSearch;\n\n    const productOptions = newSelectOptionList.map((option: Option) => {\n      if (typeof option.optionId === 'string' && option.optionId.includes('attribute')) {\n        // The passed in optionIds are formatted like \"attribute[123]\"\n        // This extracts the number from the optionId\n        return {\n          optionId: Number(option.optionId.split('[')[1].split(']')[0]),\n          optionValue: option.optionValue,\n        };\n      }\n\n      return {\n        optionId: Number(option.optionId),\n        optionValue: option.optionValue,\n      };\n    });\n\n    return validateProduct({\n      productId: Number(productId),\n      variantId: Number(variantId),\n      quantity: Number(quantity),\n      productOptions,\n    });\n  });\n\n  const settledResults = await Promise.allSettled(validationPromises);\n\n  settledResults.forEach((result, index) => {\n    // Network or unexpected error\n    if (result.status === 'rejected') {\n      const { productName } = products[index].node;\n\n      snackbar.error(b3Lang('quotes.productValidationFailed', { productName }));\n\n      return;\n    }\n\n    const { responseType, message } = result.value;\n\n    if (responseType === 'ERROR') {\n      snackbar.error(message);\n    }\n  });\n\n  const validProducts = products.filter((_, index) => {\n    const res = settledResults[index];\n\n    return res.status === 'fulfilled' && res.value.responseType !== 'ERROR';\n  });\n\n  return validProducts;\n};\n","import { createContext, Dispatch, ReactNode, useMemo, useReducer } from 'react';\n\ninterface ShoppingListDetailsState {\n  id?: number;\n  isLoading?: boolean;\n}\ninterface ShoppingListDetailsAction {\n  type: string;\n  payload: ShoppingListDetailsState;\n}\ninterface ShoppingListDetailsContextType {\n  state: ShoppingListDetailsState;\n  dispatch: Dispatch<ShoppingListDetailsAction>;\n}\n\ninterface ShoppingListDetailsProviderProps {\n  children: ReactNode;\n}\n\nconst initState = {\n  id: 0,\n  isLoading: false,\n};\n\nexport const ShoppingListDetailsContext = createContext<ShoppingListDetailsContextType>({\n  state: initState,\n  dispatch: () => {},\n});\n\nconst reducer = (state: ShoppingListDetailsState, action: ShoppingListDetailsAction) => {\n  switch (action.type) {\n    case 'all':\n      return {\n        ...state,\n        ...action.payload,\n      };\n    case 'init':\n      return {\n        ...state,\n        id: action.payload.id,\n      };\n    case 'loading':\n      return {\n        ...state,\n        isLoading: action.payload.isLoading,\n      };\n    default:\n      return state;\n  }\n};\n\nexport function ShoppingListDetailsProvider(props: ShoppingListDetailsProviderProps) {\n  const [state, dispatch] = useReducer(reducer, initState);\n\n  const { children } = props;\n\n  const ShoppingListDetailsValue = useMemo(\n    () => ({\n      state,\n      dispatch,\n    }),\n    [state],\n  );\n\n  return (\n    <ShoppingListDetailsContext.Provider value={ShoppingListDetailsValue}>\n      {children}\n    </ShoppingListDetailsContext.Provider>\n  );\n}\n"],"names":["validateProducts","products","b3Lang","validationPromises","product","productId","quantity","productsSearch","variantId","newSelectOptionList","productOptions","option","validateProduct","settledResults","result","index","productName","snackbar","responseType","message","_","res","initState","ShoppingListDetailsContext","createContext","reducer","state","action","ShoppingListDetailsProvider","props","dispatch","useReducer","children","ShoppingListDetailsValue","useMemo"],"mappings":"oIAUO,MAAMA,EAAmB,MAC9BC,EACAC,IACG,CACH,MAAMC,EAAqBF,EAAS,IAAI,CAAC,CAAE,KAAMG,KAAc,CAC7D,KAAM,CAAE,UAAAC,EAAW,SAAAC,EAAU,eAAAC,CAAA,EAAmBH,EAC1C,CAAE,UAAAI,EAAW,oBAAAC,CAAA,EAAwBF,EAErCG,EAAiBD,EAAoB,IAAKE,GAC1C,OAAOA,EAAO,UAAa,UAAYA,EAAO,SAAS,SAAS,WAAW,EAGtE,CACL,SAAU,OAAOA,EAAO,SAAS,MAAM,GAAG,EAAE,CAAC,EAAE,MAAM,GAAG,EAAE,CAAC,CAAC,EAC5D,YAAaA,EAAO,WAAA,EAIjB,CACL,SAAU,OAAOA,EAAO,QAAQ,EAChC,YAAaA,EAAO,WAAA,CAEvB,EAED,OAAOC,EAAgB,CACrB,UAAW,OAAOP,CAAS,EAC3B,UAAW,OAAOG,CAAS,EAC3B,SAAU,OAAOF,CAAQ,EACzB,eAAAI,CAAA,CACD,CACH,CAAC,EAEKG,EAAiB,MAAM,QAAQ,WAAWV,CAAkB,EAElE,OAAAU,EAAe,QAAQ,CAACC,EAAQC,IAAU,CAExC,GAAID,EAAO,SAAW,WAAY,CAChC,KAAM,CAAE,YAAAE,CAAA,EAAgBf,EAASc,CAAK,EAAE,KAExCE,EAAS,MAAMf,EAAO,iCAAkC,CAAE,YAAAc,CAAA,CAAa,CAAC,EAExE,MACF,CAEA,KAAM,CAAE,aAAAE,EAAc,QAAAC,CAAA,EAAYL,EAAO,MAErCI,IAAiB,SACnBD,EAAS,MAAME,CAAO,CAE1B,CAAC,EAEqBlB,EAAS,OAAO,CAACmB,EAAGL,IAAU,CAClD,MAAMM,EAAMR,EAAeE,CAAK,EAEhC,OAAOM,EAAI,SAAW,aAAeA,EAAI,MAAM,eAAiB,OAClE,CAAC,CAGH,ECjDMC,EAAY,CAChB,GAAI,EACJ,UAAW,EACb,EAEaC,EAA6BC,EAAAA,cAA8C,CACtF,MAAOF,EACP,SAAU,IAAM,CAAC,CACnB,CAAC,EAEKG,EAAU,CAACC,EAAiCC,IAAsC,CACtF,OAAQA,EAAO,KAAA,CACb,IAAK,MACH,MAAO,CACL,GAAGD,EACH,GAAGC,EAAO,OAAA,EAEd,IAAK,OACH,MAAO,CACL,GAAGD,EACH,GAAIC,EAAO,QAAQ,EAAA,EAEvB,IAAK,UACH,MAAO,CACL,GAAGD,EACH,UAAWC,EAAO,QAAQ,SAAA,EAE9B,QACE,OAAOD,CAAA,CAEb,EAEO,SAASE,EAA4BC,EAAyC,CACnF,KAAM,CAACH,EAAOI,CAAQ,EAAIC,EAAAA,WAAWN,EAASH,CAAS,EAEjD,CAAE,SAAAU,GAAaH,EAEfI,EAA2BC,EAAAA,QAC/B,KAAO,CACL,MAAAR,EACA,SAAAI,CAAA,GAEF,CAACJ,CAAK,CAAA,EAGR,aACGH,EAA2B,SAA3B,CAAoC,MAAOU,EACzC,SAAAD,EACH,CAEJ"}