{"version":3,"file":"Order-legacy-BPctXFdH.js","sources":["../../src/pages/order/Order.tsx","../../../../node_modules/@tanstack/react-query/build/modern/useBaseQuery.js","../../../../node_modules/@tanstack/react-query/build/modern/useQuery.js","../../src/pages/order/config.ts","../../../../node_modules/@tanstack/query-core/build/modern/queryObserver.js","../../../../node_modules/@tanstack/react-query/build/modern/IsRestoringProvider.js","../../../../node_modules/@tanstack/react-query/build/modern/QueryErrorResetBoundary.js","../../../../node_modules/@tanstack/react-query/build/modern/errorBoundaryUtils.js","../../../../node_modules/@tanstack/react-query/build/modern/suspense.js","../../src/pages/order/table/B3NoData.tsx","../../src/pages/order/table/B3Table.tsx","../../src/pages/order/OrderItemCard.tsx","../../src/pages/order/orders.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Box } from '@mui/material';\nimport { useQuery } from '@tanstack/react-query';\n\nimport { B2BAutoCompleteCheckbox } from '@/components';\nimport B3Filter from '@/components/filter/B3Filter';\nimport B3Spin from '@/components/spin/B3Spin';\nimport { useMobile } from '@/hooks';\nimport { useB3Lang } from '@/lib/lang';\nimport { isB2BUserSelector, useAppSelector } from '@/store';\nimport { CustomerRole } from '@/types';\nimport { currencyFormat, displayFormat, ordersCurrencyFormat } from '@/utils';\n\nimport OrderStatus from './components/OrderStatus';\nimport { orderStatusTranslationVariables } from './shared/getOrderStatus';\nimport { B3Table, PossibleNodeWrapper, TableColumnItem } from './table/B3Table';\nimport {\n  assertSortKey,\n  FilterSearchProps,\n  getCompanyInitFilter,\n  getCustomerInitFilter,\n  getFilterMoreData,\n  getOrderStatusText,\n  sortKeys,\n} from './config';\nimport { OrderItemCard } from './OrderItemCard';\nimport {\n  getB2BAllOrders,\n  getBCAllOrders,\n  getBcOrderStatusType,\n  getOrdersCreatedByUser,\n  getOrderStatusType,\n} from './orders';\n\ninterface CompanyInfoProps {\n  companyId: string;\n  companyName: string;\n  companyAddress: string;\n  companyCountry: string;\n  companyState: string;\n  companyCity: string;\n  companyZipCode: string;\n  phoneNumber: string;\n  bcId: string;\n}\n\ninterface ListItem {\n  firstName: string;\n  lastName: string;\n  orderId: string;\n  poNumber?: string;\n  money?: string;\n  totalIncTax: string;\n  status: string;\n  createdAt: string;\n  companyName: string;\n  companyInfo?: CompanyInfoProps;\n}\n\ninterface SearchChangeProps {\n  startValue?: string;\n  endValue?: string;\n  PlacedBy?: string;\n  orderStatus?: string | number;\n  company?: string;\n}\n\ninterface OrderProps {\n  isCompanyOrder?: boolean;\n}\n\nfunction useData() {\n  const isB2BUser = useAppSelector(isB2BUserSelector);\n  const companyB2BId = useAppSelector(({ company }) => company.companyInfo.id);\n  const role = useAppSelector(({ company }) => company.customer.role);\n  const salesRepCompanyId = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.id);\n  const isAgenting = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.isAgenting);\n\n  const { order: orderSubViewPermission } = useAppSelector(\n    ({ company }) => company.pagesSubsidiariesPermission,\n  );\n\n  const { selectCompanyHierarchyId, isEnabledCompanyHierarchy } = useAppSelector(\n    ({ company }) => company.companyHierarchyInfo,\n  );\n\n  const currentCompanyId =\n    role === CustomerRole.SUPER_ADMIN && isAgenting\n      ? Number(salesRepCompanyId)\n      : Number(companyB2BId);\n\n  const companyId = companyB2BId || salesRepCompanyId;\n\n  return {\n    role,\n    isAgenting,\n    isB2BUser,\n    isEnabledCompanyHierarchy: isEnabledCompanyHierarchy && orderSubViewPermission,\n    selectedCompanyId: Number(selectCompanyHierarchyId) || currentCompanyId,\n    companyId,\n  };\n}\n\nconst getEmail = (haystack: string = '') => {\n  const getEmailReg = /\\((.+)\\)/g;\n  const emailRegArr = getEmailReg.exec(haystack);\n\n  return emailRegArr?.length ? emailRegArr[1] : '';\n};\n\nconst getName = (haystack: string = '') => {\n  const getCreatedByReg = /^[^(]+/;\n  const createdByUserRegArr = getCreatedByReg.exec(haystack);\n  return createdByUserRegArr?.length ? createdByUserRegArr[0].trim() : '';\n};\n\ninterface OrderBy {\n  key: keyof typeof sortKeys;\n  dir: 'asc' | 'desc';\n}\n\nconst getOrderBy = ({ key, dir }: OrderBy) => {\n  return dir === 'desc' ? `-${sortKeys[key]}` : sortKeys[key];\n};\n\nfunction Order({ isCompanyOrder = false }: OrderProps) {\n  const b3Lang = useB3Lang();\n  const [isMobile] = useMobile();\n  const { role, isAgenting, companyId, isB2BUser, isEnabledCompanyHierarchy, selectedCompanyId } =\n    useData();\n\n  const [pagination, setPagination] = useState({ offset: 0, first: 10 });\n\n  const [allTotal, setAllTotal] = useState(0);\n  const [filterData, setFilterData] = useState<Partial<FilterSearchProps>>();\n  const [filterInfo, setFilterInfo] = useState<Array<any>>([]);\n  const [getOrderStatuses, setOrderStatuses] = useState<Array<any>>([]);\n\n  const [orderBy, setOrderBy] = useState<OrderBy>({\n    key: 'orderId',\n    dir: 'desc',\n  });\n\n  const handleSetOrderBy = (key: string) => {\n    setOrderBy((prev) => {\n      assertSortKey(key);\n\n      if (prev.key === key) {\n        return {\n          key,\n          dir: prev.dir === 'asc' ? 'desc' : 'asc',\n        };\n      }\n\n      return {\n        key,\n        dir: 'desc',\n      };\n    });\n  };\n\n  useEffect(() => {\n    const search = isB2BUser\n      ? getCompanyInitFilter(isCompanyOrder, selectedCompanyId)\n      : getCustomerInitFilter();\n\n    setFilterData(search);\n\n    // TODO: Guest customer should not be able to see the order list\n    if (role === CustomerRole.GUEST) return;\n\n    const initFilter = async () => {\n      const createdByUsers =\n        isB2BUser && isCompanyOrder ? await getOrdersCreatedByUser(Number(companyId)) : {};\n\n      const orderStatuses = isB2BUser ? await getOrderStatusType() : await getBcOrderStatusType();\n\n      const filterInfo = getFilterMoreData(\n        isB2BUser,\n        role,\n        isCompanyOrder,\n        isAgenting,\n        createdByUsers,\n        orderStatuses,\n      );\n\n      setOrderStatuses(orderStatuses);\n\n      const filterInfoWithTranslatedLabel = filterInfo.map((element) => {\n        const translatedElement = element;\n        translatedElement.label = b3Lang(element.idLang);\n\n        if (element.name === 'orderStatus') {\n          translatedElement.options = element.options.map(\n            (option: { customLabel: string; systemLabel: string }) => {\n              const optionLabel = orderStatusTranslationVariables[option.systemLabel];\n              const elementOption = option;\n              elementOption.customLabel =\n                b3Lang(optionLabel) === elementOption.systemLabel\n                  ? elementOption.customLabel\n                  : b3Lang(optionLabel);\n\n              return option;\n            },\n          );\n        }\n\n        return element;\n      });\n\n      setFilterInfo(filterInfoWithTranslatedLabel);\n    };\n\n    initFilter();\n  }, [b3Lang, companyId, isAgenting, isB2BUser, isCompanyOrder, role, selectedCompanyId]);\n\n  const fetchList = async ({\n    createdBy,\n    ...params\n  }: Partial<FilterSearchProps>): Promise<{ edges: ListItem[]; totalCount: number }> => {\n    const { edges = [], totalCount } = isB2BUser\n      ? await getB2BAllOrders({\n          ...params,\n          email: getEmail(createdBy),\n          createdBy: getName(createdBy),\n        })\n      : await getBCAllOrders(params);\n\n    setAllTotal(totalCount);\n\n    return {\n      edges: edges.map((row: PossibleNodeWrapper<object>) => ('node' in row ? row.node : row)),\n      totalCount,\n    };\n  };\n\n  const navigate = useNavigate();\n\n  const goToDetail = (item: ListItem, index: number) => {\n    navigate(`/orderDetail/${item.orderId}`, {\n      state: {\n        currentIndex: index,\n        searchParams: {\n          ...filterData,\n          orderBy: getOrderBy(orderBy),\n        },\n        totalCount: allTotal,\n        isCompanyOrder,\n        beginDateAt: filterData?.beginDateAt,\n        endDateAt: filterData?.endDateAt,\n      },\n    });\n  };\n\n  const columnAllItems = [\n    {\n      key: 'orderId',\n      title: b3Lang('orders.order'),\n      width: '10%',\n      isSortable: true,\n      render: ({ orderId }) => orderId,\n    },\n    {\n      key: 'companyName',\n      title: b3Lang('orders.company'),\n      width: '10%',\n      isSortable: false,\n      render: ({ companyInfo }) => {\n        return <Box>{companyInfo?.companyName || '–'}</Box>;\n      },\n    },\n    {\n      key: 'poNumber',\n      title: b3Lang('orders.poReference'),\n      render: ({ poNumber }) => <Box>{poNumber || '–'}</Box>,\n      width: '10%',\n      isSortable: true,\n    },\n    {\n      key: 'totalIncTax',\n      title: b3Lang('orders.grandTotal'),\n      render: ({ money, totalIncTax }) =>\n        money\n          ? ordersCurrencyFormat(JSON.parse(JSON.parse(money)), totalIncTax)\n          : currencyFormat(totalIncTax),\n      align: 'right',\n      width: '8%',\n      isSortable: true,\n    },\n    {\n      key: 'status',\n      title: b3Lang('orders.orderStatus'),\n      render: ({ status }) => (\n        <OrderStatus text={getOrderStatusText(status, getOrderStatuses)} code={status} />\n      ),\n      width: '10%',\n      isSortable: true,\n    },\n    {\n      key: 'placedBy',\n      title: b3Lang('orders.placedBy'),\n      render: ({ firstName, lastName }) => `${firstName} ${lastName}`,\n      width: '10%',\n      isSortable: true,\n    },\n    {\n      key: 'createdAt',\n      title: b3Lang('orders.createdOn'),\n      render: ({ createdAt }) => `${displayFormat(Number(createdAt))}`,\n      width: '10%',\n      isSortable: true,\n    },\n  ] as const satisfies TableColumnItem<ListItem>[];\n\n  const getColumnItems = (): TableColumnItem<ListItem>[] => {\n    const getNewColumnItems = columnAllItems.filter((item) => {\n      const { key } = item;\n      if (!isB2BUser && key === 'companyName') return false;\n      if ((!isB2BUser || (Number(role) === 3 && !isAgenting)) && key === 'placedBy') return false;\n\n      if (key === 'placedBy' && !(Number(role) === 3 && !isAgenting) && !isCompanyOrder) {\n        return false;\n      }\n      return true;\n    });\n\n    return getNewColumnItems;\n  };\n\n  const handleChange = (key: string, value: string) => {\n    if (key === 'search') {\n      setFilterData((data) => ({\n        ...data,\n        q: value,\n      }));\n    }\n  };\n\n  const handleFilterChange = (value: SearchChangeProps) => {\n    let currentStatus = value?.orderStatus || '';\n    if (currentStatus) {\n      const originStatus = getOrderStatuses.find(\n        (status) => status.customLabel === currentStatus || status.systemLabel === currentStatus,\n      );\n\n      currentStatus = originStatus?.systemLabel || currentStatus;\n    }\n\n    setFilterData((data) => ({\n      ...data,\n      beginDateAt: value?.startValue || null,\n      endDateAt: value?.endValue || null,\n      createdBy: value?.PlacedBy || '',\n      statusCode: currentStatus,\n      companyName: value?.company || '',\n    }));\n  };\n\n  const columnItems = getColumnItems();\n\n  const handleSelectCompanies = (company: number[]) => {\n    const newCompanyIds = company.includes(-1) ? [] : company;\n\n    setFilterData((data) => ({\n      ...data,\n      companyIds: newCompanyIds,\n    }));\n  };\n\n  const { data, isFetching } = useQuery({\n    queryKey: ['orderList', filterData, pagination, orderBy],\n    enabled: Boolean(filterData),\n    queryFn: () => fetchList({ ...filterData, ...pagination, orderBy: getOrderBy(orderBy) }),\n  });\n\n  return (\n    <B3Spin isSpinning={isFetching}>\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n          width: '100%',\n        }}\n      >\n        <Box\n          sx={{\n            width: isMobile ? '100%' : 'auto',\n            display: 'flex',\n            justifyContent: 'flex-start',\n            alignItems: isMobile ? 'flex-start' : 'center',\n            flexDirection: isMobile ? 'column' : 'row',\n\n            '& > div': {\n              width: isMobile ? '100%' : 'auto',\n            },\n          }}\n        >\n          {isEnabledCompanyHierarchy && (\n            <Box sx={{ mr: isMobile ? 0 : '10px', mb: '30px' }}>\n              <B2BAutoCompleteCheckbox handleChangeCompanyIds={handleSelectCompanies} />\n            </Box>\n          )}\n          <B3Filter\n            startPicker={{\n              isEnabled: true,\n              label: b3Lang('orders.from'),\n              defaultValue: filterData?.beginDateAt || null,\n              pickerKey: 'start',\n            }}\n            endPicker={{\n              isEnabled: true,\n              label: b3Lang('orders.to'),\n              defaultValue: filterData?.endDateAt || null,\n              pickerKey: 'end',\n            }}\n            filterMoreInfo={filterInfo}\n            handleChange={handleChange}\n            handleFilterChange={handleFilterChange}\n            pcTotalWidth=\"100%\"\n            pcContainerWidth=\"100%\"\n            pcSearchContainerWidth=\"100%\"\n          />\n        </Box>\n\n        <B3Table\n          columnItems={columnItems}\n          listItems={data?.edges || []}\n          pagination={{ ...pagination, count: data?.totalCount || 0 }}\n          onPaginationChange={setPagination}\n          isInfiniteScroll={isMobile}\n          renderItem={(row, index) => (\n            <OrderItemCard key={row.orderId} goToDetail={() => goToDetail(row, index)} item={row} />\n          )}\n          onClickRow={goToDetail}\n          sortDirection={orderBy.dir}\n          sortByFn={handleSetOrderBy}\n          orderBy={orderBy.key}\n        />\n      </Box>\n    </B3Spin>\n  );\n}\n\nexport default Order;\n","\"use client\";\n\n// src/useBaseQuery.ts\nimport * as React from \"react\";\nimport { isServer, noop, notifyManager } from \"@tanstack/query-core\";\nimport { useQueryClient } from \"./QueryClientProvider.js\";\nimport { useQueryErrorResetBoundary } from \"./QueryErrorResetBoundary.js\";\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary\n} from \"./errorBoundaryUtils.js\";\nimport { useIsRestoring } from \"./IsRestoringProvider.js\";\nimport {\n  ensureSuspenseTimers,\n  fetchOptimistic,\n  shouldSuspend,\n  willFetch\n} from \"./suspense.js\";\nfunction useBaseQuery(options, Observer, queryClient) {\n  if (process.env.NODE_ENV !== \"production\") {\n    if (typeof options !== \"object\" || Array.isArray(options)) {\n      throw new Error(\n        'Bad argument type. Starting with v5, only the \"Object\" form is allowed when calling query related functions. Please use the error stack to find the culprit call. More info here: https://tanstack.com/query/latest/docs/react/guides/migrating-to-v5#supports-a-single-signature-one-object'\n      );\n    }\n  }\n  const isRestoring = useIsRestoring();\n  const errorResetBoundary = useQueryErrorResetBoundary();\n  const client = useQueryClient(queryClient);\n  const defaultedOptions = client.defaultQueryOptions(options);\n  client.getDefaultOptions().queries?._experimental_beforeQuery?.(\n    defaultedOptions\n  );\n  if (process.env.NODE_ENV !== \"production\") {\n    if (!defaultedOptions.queryFn) {\n      console.error(\n        `[${defaultedOptions.queryHash}]: No queryFn was passed as an option, and no default queryFn was found. The queryFn parameter is only optional when using a default queryFn. More info here: https://tanstack.com/query/latest/docs/framework/react/guides/default-query-function`\n      );\n    }\n  }\n  defaultedOptions._optimisticResults = isRestoring ? \"isRestoring\" : \"optimistic\";\n  ensureSuspenseTimers(defaultedOptions);\n  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary);\n  useClearResetErrorBoundary(errorResetBoundary);\n  const isNewCacheEntry = !client.getQueryCache().get(defaultedOptions.queryHash);\n  const [observer] = React.useState(\n    () => new Observer(\n      client,\n      defaultedOptions\n    )\n  );\n  const result = observer.getOptimisticResult(defaultedOptions);\n  const shouldSubscribe = !isRestoring && options.subscribed !== false;\n  React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) => {\n        const unsubscribe = shouldSubscribe ? observer.subscribe(notifyManager.batchCalls(onStoreChange)) : noop;\n        observer.updateResult();\n        return unsubscribe;\n      },\n      [observer, shouldSubscribe]\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult()\n  );\n  React.useEffect(() => {\n    observer.setOptions(defaultedOptions);\n  }, [defaultedOptions, observer]);\n  if (shouldSuspend(defaultedOptions, result)) {\n    throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary);\n  }\n  if (getHasError({\n    result,\n    errorResetBoundary,\n    throwOnError: defaultedOptions.throwOnError,\n    query: client.getQueryCache().get(defaultedOptions.queryHash),\n    suspense: defaultedOptions.suspense\n  })) {\n    throw result.error;\n  }\n  ;\n  client.getDefaultOptions().queries?._experimental_afterQuery?.(\n    defaultedOptions,\n    result\n  );\n  if (defaultedOptions.experimental_prefetchInRender && !isServer && willFetch(result, isRestoring)) {\n    const promise = isNewCacheEntry ? (\n      // Fetch immediately on render in order to ensure `.promise` is resolved even if the component is unmounted\n      fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n    ) : (\n      // subscribe to the \"cache promise\" so that we can finalize the currentThenable once data comes in\n      client.getQueryCache().get(defaultedOptions.queryHash)?.promise\n    );\n    promise?.catch(noop).finally(() => {\n      observer.updateResult();\n    });\n  }\n  return !defaultedOptions.notifyOnChangeProps ? observer.trackResult(result) : result;\n}\nexport {\n  useBaseQuery\n};\n//# sourceMappingURL=useBaseQuery.js.map","\"use client\";\n\n// src/useQuery.ts\nimport { QueryObserver } from \"@tanstack/query-core\";\nimport { useBaseQuery } from \"./useBaseQuery.js\";\nfunction useQuery(options, queryClient) {\n  return useBaseQuery(options, QueryObserver, queryClient);\n}\nexport {\n  useQuery\n};\n//# sourceMappingURL=useQuery.js.map","import { CustomerRole } from '@/types';\nimport { OrderStatusType } from '@/types/gql/graphql';\n\nexport interface FilterSearchProps {\n  [key: string]: string | number | number[] | null;\n  beginDateAt: string | null;\n  endDateAt: string | null;\n  orderBy: string;\n  createdBy: string;\n  q: string;\n  companyName: string;\n  isShowMy: number;\n  companyId: string;\n  companyIds: number[];\n}\n\nexport const sortKeys = {\n  orderId: 'bcOrderId',\n  poNumber: 'poNumber',\n  totalIncTax: 'totalIncTax',\n  status: 'status',\n  placedBy: 'placedBy',\n  createdAt: 'createdAt',\n};\n\nexport function assertSortKey(key: string): asserts key is keyof typeof sortKeys {\n  if (!Object.keys(sortKeys).includes(key)) {\n    throw new Error(`Invalid sort key: ${key}`);\n  }\n}\n\nexport const getFilterMoreData = (\n  isB2BUser: boolean,\n  role: string | number,\n  isCompanyOrder: boolean,\n  isAgenting: boolean,\n  createdByUsers: any,\n  orderStatuses: OrderStatusType[] = [],\n) => {\n  const newOrderStatuses = orderStatuses.filter(\n    (item) => item.statusCode !== '0' && item.statusCode !== '1',\n  );\n  const newCreatedByUsers =\n    createdByUsers?.createdByUser?.results.map((item: any) => ({\n      createdBy: `${item.firstName} ${item.lastName} (${item.email})`,\n    })) || [];\n  const filterMoreList = [\n    {\n      name: 'company',\n      label: 'Company',\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n      idLang: 'orders.company',\n    },\n    {\n      name: 'orderStatus',\n      label: 'Order status',\n      required: false,\n      default: '',\n      fieldType: 'dropdown',\n      options: newOrderStatuses,\n      replaceOptions: {\n        label: 'customLabel',\n        value: 'customLabel',\n      },\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n      idLang: 'orders.orderStatus',\n    },\n    {\n      name: 'PlacedBy',\n      label: 'Placed by',\n      required: false,\n      default: '',\n      fieldType: 'dropdown',\n      options: newCreatedByUsers,\n      replaceOptions: {\n        label: 'createdBy',\n        value: 'createdBy',\n      },\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n      idLang: 'orders.placedBy',\n    },\n  ];\n\n  const filterCondition = isB2BUser && !(Number(role) === 3 && !isAgenting);\n  const filterCurrentMoreList = filterMoreList.filter((item) => {\n    if (\n      (!isB2BUser || filterCondition) &&\n      !isCompanyOrder &&\n      (item.name === 'company' || item.name === 'PlacedBy')\n    )\n      return false;\n    if (Number(role) === 3 && !isAgenting && item.name === 'PlacedBy') return false;\n    if (\n      (isB2BUser || (Number(role) === CustomerRole.SUPER_ADMIN && isAgenting)) &&\n      isCompanyOrder &&\n      item.name === 'company'\n    )\n      return false;\n    return true;\n  });\n\n  return filterCurrentMoreList;\n};\n\nexport const getCustomerInitFilter = (): Partial<FilterSearchProps> => {\n  return {\n    beginDateAt: null,\n    endDateAt: null,\n    createdBy: '',\n    q: '',\n  };\n};\n\nexport const getCompanyInitFilter = (\n  isCompanyOrder: boolean,\n  companyId: number,\n): Partial<FilterSearchProps> => {\n  return {\n    companyId: '',\n    beginDateAt: null,\n    endDateAt: null,\n    companyName: '',\n    createdBy: '',\n    orderNumber: '',\n    poNumber: '',\n    companyIds: [companyId],\n    isShowMy: isCompanyOrder ? 0 : 1,\n    q: '',\n  };\n};\n\nexport const getOrderStatusText = (status: number | string, getOrderStatuses: any) =>\n  getOrderStatuses.find((item: any) => item.systemLabel === status)?.customLabel || '';\n","// src/queryObserver.ts\nimport { focusManager } from \"./focusManager.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { fetchState } from \"./query.js\";\nimport { Subscribable } from \"./subscribable.js\";\nimport { pendingThenable } from \"./thenable.js\";\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  resolveEnabled,\n  resolveStaleTime,\n  shallowEqualObjects,\n  timeUntilStale\n} from \"./utils.js\";\nimport { timeoutManager } from \"./timeoutManager.js\";\nvar QueryObserver = class extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.options = options;\n    this.#client = client;\n    this.#selectError = null;\n    this.#currentThenable = pendingThenable();\n    this.bindMethods();\n    this.setOptions(options);\n  }\n  #client;\n  #currentQuery = void 0;\n  #currentQueryInitialState = void 0;\n  #currentResult = void 0;\n  #currentResultState;\n  #currentResultOptions;\n  #currentThenable;\n  #selectError;\n  #selectFn;\n  #selectResult;\n  // This property keeps track of the last query with defined data.\n  // It will be used to pass the previous data and query to the placeholder function between renders.\n  #lastQueryWithDefinedData;\n  #staleTimeoutId;\n  #refetchIntervalId;\n  #currentRefetchInterval;\n  #trackedProps = /* @__PURE__ */ new Set();\n  bindMethods() {\n    this.refetch = this.refetch.bind(this);\n  }\n  onSubscribe() {\n    if (this.listeners.size === 1) {\n      this.#currentQuery.addObserver(this);\n      if (shouldFetchOnMount(this.#currentQuery, this.options)) {\n        this.#executeFetch();\n      } else {\n        this.updateResult();\n      }\n      this.#updateTimers();\n    }\n  }\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.destroy();\n    }\n  }\n  shouldFetchOnReconnect() {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnReconnect\n    );\n  }\n  shouldFetchOnWindowFocus() {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus\n    );\n  }\n  destroy() {\n    this.listeners = /* @__PURE__ */ new Set();\n    this.#clearStaleTimeout();\n    this.#clearRefetchInterval();\n    this.#currentQuery.removeObserver(this);\n  }\n  setOptions(options) {\n    const prevOptions = this.options;\n    const prevQuery = this.#currentQuery;\n    this.options = this.#client.defaultQueryOptions(options);\n    if (this.options.enabled !== void 0 && typeof this.options.enabled !== \"boolean\" && typeof this.options.enabled !== \"function\" && typeof resolveEnabled(this.options.enabled, this.#currentQuery) !== \"boolean\") {\n      throw new Error(\n        \"Expected enabled to be a boolean or a callback that returns a boolean\"\n      );\n    }\n    this.#updateQuery();\n    this.#currentQuery.setOptions(this.options);\n    if (prevOptions._defaulted && !shallowEqualObjects(this.options, prevOptions)) {\n      this.#client.getQueryCache().notify({\n        type: \"observerOptionsUpdated\",\n        query: this.#currentQuery,\n        observer: this\n      });\n    }\n    const mounted = this.hasListeners();\n    if (mounted && shouldFetchOptionally(\n      this.#currentQuery,\n      prevQuery,\n      this.options,\n      prevOptions\n    )) {\n      this.#executeFetch();\n    }\n    this.updateResult();\n    if (mounted && (this.#currentQuery !== prevQuery || resolveEnabled(this.options.enabled, this.#currentQuery) !== resolveEnabled(prevOptions.enabled, this.#currentQuery) || resolveStaleTime(this.options.staleTime, this.#currentQuery) !== resolveStaleTime(prevOptions.staleTime, this.#currentQuery))) {\n      this.#updateStaleTimeout();\n    }\n    const nextRefetchInterval = this.#computeRefetchInterval();\n    if (mounted && (this.#currentQuery !== prevQuery || resolveEnabled(this.options.enabled, this.#currentQuery) !== resolveEnabled(prevOptions.enabled, this.#currentQuery) || nextRefetchInterval !== this.#currentRefetchInterval)) {\n      this.#updateRefetchInterval(nextRefetchInterval);\n    }\n  }\n  getOptimisticResult(options) {\n    const query = this.#client.getQueryCache().build(this.#client, options);\n    const result = this.createResult(query, options);\n    if (shouldAssignObserverCurrentProperties(this, result)) {\n      this.#currentResult = result;\n      this.#currentResultOptions = this.options;\n      this.#currentResultState = this.#currentQuery.state;\n    }\n    return result;\n  }\n  getCurrentResult() {\n    return this.#currentResult;\n  }\n  trackResult(result, onPropTracked) {\n    return new Proxy(result, {\n      get: (target, key) => {\n        this.trackProp(key);\n        onPropTracked?.(key);\n        if (key === \"promise\" && !this.options.experimental_prefetchInRender && this.#currentThenable.status === \"pending\") {\n          this.#currentThenable.reject(\n            new Error(\n              \"experimental_prefetchInRender feature flag is not enabled\"\n            )\n          );\n        }\n        return Reflect.get(target, key);\n      }\n    });\n  }\n  trackProp(key) {\n    this.#trackedProps.add(key);\n  }\n  getCurrentQuery() {\n    return this.#currentQuery;\n  }\n  refetch({ ...options } = {}) {\n    return this.fetch({\n      ...options\n    });\n  }\n  fetchOptimistic(options) {\n    const defaultedOptions = this.#client.defaultQueryOptions(options);\n    const query = this.#client.getQueryCache().build(this.#client, defaultedOptions);\n    return query.fetch().then(() => this.createResult(query, defaultedOptions));\n  }\n  fetch(fetchOptions) {\n    return this.#executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true\n    }).then(() => {\n      this.updateResult();\n      return this.#currentResult;\n    });\n  }\n  #executeFetch(fetchOptions) {\n    this.#updateQuery();\n    let promise = this.#currentQuery.fetch(\n      this.options,\n      fetchOptions\n    );\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop);\n    }\n    return promise;\n  }\n  #updateStaleTimeout() {\n    this.#clearStaleTimeout();\n    const staleTime = resolveStaleTime(\n      this.options.staleTime,\n      this.#currentQuery\n    );\n    if (isServer || this.#currentResult.isStale || !isValidTimeout(staleTime)) {\n      return;\n    }\n    const time = timeUntilStale(this.#currentResult.dataUpdatedAt, staleTime);\n    const timeout = time + 1;\n    this.#staleTimeoutId = timeoutManager.setTimeout(() => {\n      if (!this.#currentResult.isStale) {\n        this.updateResult();\n      }\n    }, timeout);\n  }\n  #computeRefetchInterval() {\n    return (typeof this.options.refetchInterval === \"function\" ? this.options.refetchInterval(this.#currentQuery) : this.options.refetchInterval) ?? false;\n  }\n  #updateRefetchInterval(nextInterval) {\n    this.#clearRefetchInterval();\n    this.#currentRefetchInterval = nextInterval;\n    if (isServer || resolveEnabled(this.options.enabled, this.#currentQuery) === false || !isValidTimeout(this.#currentRefetchInterval) || this.#currentRefetchInterval === 0) {\n      return;\n    }\n    this.#refetchIntervalId = timeoutManager.setInterval(() => {\n      if (this.options.refetchIntervalInBackground || focusManager.isFocused()) {\n        this.#executeFetch();\n      }\n    }, this.#currentRefetchInterval);\n  }\n  #updateTimers() {\n    this.#updateStaleTimeout();\n    this.#updateRefetchInterval(this.#computeRefetchInterval());\n  }\n  #clearStaleTimeout() {\n    if (this.#staleTimeoutId) {\n      timeoutManager.clearTimeout(this.#staleTimeoutId);\n      this.#staleTimeoutId = void 0;\n    }\n  }\n  #clearRefetchInterval() {\n    if (this.#refetchIntervalId) {\n      timeoutManager.clearInterval(this.#refetchIntervalId);\n      this.#refetchIntervalId = void 0;\n    }\n  }\n  createResult(query, options) {\n    const prevQuery = this.#currentQuery;\n    const prevOptions = this.options;\n    const prevResult = this.#currentResult;\n    const prevResultState = this.#currentResultState;\n    const prevResultOptions = this.#currentResultOptions;\n    const queryChange = query !== prevQuery;\n    const queryInitialState = queryChange ? query.state : this.#currentQueryInitialState;\n    const { state } = query;\n    let newState = { ...state };\n    let isPlaceholderData = false;\n    let data;\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners();\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n      const fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n      if (fetchOnMount || fetchOptionally) {\n        newState = {\n          ...newState,\n          ...fetchState(state.data, query.options)\n        };\n      }\n      if (options._optimisticResults === \"isRestoring\") {\n        newState.fetchStatus = \"idle\";\n      }\n    }\n    let { error, errorUpdatedAt, status } = newState;\n    data = newState.data;\n    let skipSelect = false;\n    if (options.placeholderData !== void 0 && data === void 0 && status === \"pending\") {\n      let placeholderData;\n      if (prevResult?.isPlaceholderData && options.placeholderData === prevResultOptions?.placeholderData) {\n        placeholderData = prevResult.data;\n        skipSelect = true;\n      } else {\n        placeholderData = typeof options.placeholderData === \"function\" ? options.placeholderData(\n          this.#lastQueryWithDefinedData?.state.data,\n          this.#lastQueryWithDefinedData\n        ) : options.placeholderData;\n      }\n      if (placeholderData !== void 0) {\n        status = \"success\";\n        data = replaceData(\n          prevResult?.data,\n          placeholderData,\n          options\n        );\n        isPlaceholderData = true;\n      }\n    }\n    if (options.select && data !== void 0 && !skipSelect) {\n      if (prevResult && data === prevResultState?.data && options.select === this.#selectFn) {\n        data = this.#selectResult;\n      } else {\n        try {\n          this.#selectFn = options.select;\n          data = options.select(data);\n          data = replaceData(prevResult?.data, data, options);\n          this.#selectResult = data;\n          this.#selectError = null;\n        } catch (selectError) {\n          this.#selectError = selectError;\n        }\n      }\n    }\n    if (this.#selectError) {\n      error = this.#selectError;\n      data = this.#selectResult;\n      errorUpdatedAt = Date.now();\n      status = \"error\";\n    }\n    const isFetching = newState.fetchStatus === \"fetching\";\n    const isPending = status === \"pending\";\n    const isError = status === \"error\";\n    const isLoading = isPending && isFetching;\n    const hasData = data !== void 0;\n    const result = {\n      status,\n      fetchStatus: newState.fetchStatus,\n      isPending,\n      isSuccess: status === \"success\",\n      isError,\n      isInitialLoading: isLoading,\n      isLoading,\n      data,\n      dataUpdatedAt: newState.dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: newState.fetchFailureCount,\n      failureReason: newState.fetchFailureReason,\n      errorUpdateCount: newState.errorUpdateCount,\n      isFetched: newState.dataUpdateCount > 0 || newState.errorUpdateCount > 0,\n      isFetchedAfterMount: newState.dataUpdateCount > queryInitialState.dataUpdateCount || newState.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isPending,\n      isLoadingError: isError && !hasData,\n      isPaused: newState.fetchStatus === \"paused\",\n      isPlaceholderData,\n      isRefetchError: isError && hasData,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      promise: this.#currentThenable,\n      isEnabled: resolveEnabled(options.enabled, query) !== false\n    };\n    const nextResult = result;\n    if (this.options.experimental_prefetchInRender) {\n      const finalizeThenableIfPossible = (thenable) => {\n        if (nextResult.status === \"error\") {\n          thenable.reject(nextResult.error);\n        } else if (nextResult.data !== void 0) {\n          thenable.resolve(nextResult.data);\n        }\n      };\n      const recreateThenable = () => {\n        const pending = this.#currentThenable = nextResult.promise = pendingThenable();\n        finalizeThenableIfPossible(pending);\n      };\n      const prevThenable = this.#currentThenable;\n      switch (prevThenable.status) {\n        case \"pending\":\n          if (query.queryHash === prevQuery.queryHash) {\n            finalizeThenableIfPossible(prevThenable);\n          }\n          break;\n        case \"fulfilled\":\n          if (nextResult.status === \"error\" || nextResult.data !== prevThenable.value) {\n            recreateThenable();\n          }\n          break;\n        case \"rejected\":\n          if (nextResult.status !== \"error\" || nextResult.error !== prevThenable.reason) {\n            recreateThenable();\n          }\n          break;\n      }\n    }\n    return nextResult;\n  }\n  updateResult() {\n    const prevResult = this.#currentResult;\n    const nextResult = this.createResult(this.#currentQuery, this.options);\n    this.#currentResultState = this.#currentQuery.state;\n    this.#currentResultOptions = this.options;\n    if (this.#currentResultState.data !== void 0) {\n      this.#lastQueryWithDefinedData = this.#currentQuery;\n    }\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return;\n    }\n    this.#currentResult = nextResult;\n    const shouldNotifyListeners = () => {\n      if (!prevResult) {\n        return true;\n      }\n      const { notifyOnChangeProps } = this.options;\n      const notifyOnChangePropsValue = typeof notifyOnChangeProps === \"function\" ? notifyOnChangeProps() : notifyOnChangeProps;\n      if (notifyOnChangePropsValue === \"all\" || !notifyOnChangePropsValue && !this.#trackedProps.size) {\n        return true;\n      }\n      const includedProps = new Set(\n        notifyOnChangePropsValue ?? this.#trackedProps\n      );\n      if (this.options.throwOnError) {\n        includedProps.add(\"error\");\n      }\n      return Object.keys(this.#currentResult).some((key) => {\n        const typedKey = key;\n        const changed = this.#currentResult[typedKey] !== prevResult[typedKey];\n        return changed && includedProps.has(typedKey);\n      });\n    };\n    this.#notify({ listeners: shouldNotifyListeners() });\n  }\n  #updateQuery() {\n    const query = this.#client.getQueryCache().build(this.#client, this.options);\n    if (query === this.#currentQuery) {\n      return;\n    }\n    const prevQuery = this.#currentQuery;\n    this.#currentQuery = query;\n    this.#currentQueryInitialState = query.state;\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this);\n      query.addObserver(this);\n    }\n  }\n  onQueryUpdate() {\n    this.updateResult();\n    if (this.hasListeners()) {\n      this.#updateTimers();\n    }\n  }\n  #notify(notifyOptions) {\n    notifyManager.batch(() => {\n      if (notifyOptions.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.#currentResult);\n        });\n      }\n      this.#client.getQueryCache().notify({\n        query: this.#currentQuery,\n        type: \"observerResultsUpdated\"\n      });\n    });\n  }\n};\nfunction shouldLoadOnMount(query, options) {\n  return resolveEnabled(options.enabled, query) !== false && query.state.data === void 0 && !(query.state.status === \"error\" && options.retryOnMount === false);\n}\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || query.state.data !== void 0 && shouldFetchOn(query, options, options.refetchOnMount);\n}\nfunction shouldFetchOn(query, options, field) {\n  if (resolveEnabled(options.enabled, query) !== false && resolveStaleTime(options.staleTime, query) !== \"static\") {\n    const value = typeof field === \"function\" ? field(query) : field;\n    return value === \"always\" || value !== false && isStale(query, options);\n  }\n  return false;\n}\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return (query !== prevQuery || resolveEnabled(prevOptions.enabled, query) === false) && (!options.suspense || query.state.status !== \"error\") && isStale(query, options);\n}\nfunction isStale(query, options) {\n  return resolveEnabled(options.enabled, query) !== false && query.isStaleByTime(resolveStaleTime(options.staleTime, query));\n}\nfunction shouldAssignObserverCurrentProperties(observer, optimisticResult) {\n  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {\n    return true;\n  }\n  return false;\n}\nexport {\n  QueryObserver\n};\n//# sourceMappingURL=queryObserver.js.map","\"use client\";\n\n// src/IsRestoringProvider.ts\nimport * as React from \"react\";\nvar IsRestoringContext = React.createContext(false);\nvar useIsRestoring = () => React.useContext(IsRestoringContext);\nvar IsRestoringProvider = IsRestoringContext.Provider;\nexport {\n  IsRestoringProvider,\n  useIsRestoring\n};\n//# sourceMappingURL=IsRestoringProvider.js.map","\"use client\";\n\n// src/QueryErrorResetBoundary.tsx\nimport * as React from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nfunction createValue() {\n  let isReset = false;\n  return {\n    clearReset: () => {\n      isReset = false;\n    },\n    reset: () => {\n      isReset = true;\n    },\n    isReset: () => {\n      return isReset;\n    }\n  };\n}\nvar QueryErrorResetBoundaryContext = React.createContext(createValue());\nvar useQueryErrorResetBoundary = () => React.useContext(QueryErrorResetBoundaryContext);\nvar QueryErrorResetBoundary = ({\n  children\n}) => {\n  const [value] = React.useState(() => createValue());\n  return /* @__PURE__ */ jsx(QueryErrorResetBoundaryContext.Provider, { value, children: typeof children === \"function\" ? children(value) : children });\n};\nexport {\n  QueryErrorResetBoundary,\n  useQueryErrorResetBoundary\n};\n//# sourceMappingURL=QueryErrorResetBoundary.js.map","\"use client\";\n\n// src/errorBoundaryUtils.ts\nimport * as React from \"react\";\nimport { shouldThrowError } from \"@tanstack/query-core\";\nvar ensurePreventErrorBoundaryRetry = (options, errorResetBoundary) => {\n  if (options.suspense || options.throwOnError || options.experimental_prefetchInRender) {\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false;\n    }\n  }\n};\nvar useClearResetErrorBoundary = (errorResetBoundary) => {\n  React.useEffect(() => {\n    errorResetBoundary.clearReset();\n  }, [errorResetBoundary]);\n};\nvar getHasError = ({\n  result,\n  errorResetBoundary,\n  throwOnError,\n  query,\n  suspense\n}) => {\n  return result.isError && !errorResetBoundary.isReset() && !result.isFetching && query && (suspense && result.data === void 0 || shouldThrowError(throwOnError, [result.error, query]));\n};\nexport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary\n};\n//# sourceMappingURL=errorBoundaryUtils.js.map","// src/suspense.ts\nvar defaultThrowOnError = (_error, query) => query.state.data === void 0;\nvar ensureSuspenseTimers = (defaultedOptions) => {\n  if (defaultedOptions.suspense) {\n    const MIN_SUSPENSE_TIME_MS = 1e3;\n    const clamp = (value) => value === \"static\" ? value : Math.max(value ?? MIN_SUSPENSE_TIME_MS, MIN_SUSPENSE_TIME_MS);\n    const originalStaleTime = defaultedOptions.staleTime;\n    defaultedOptions.staleTime = typeof originalStaleTime === \"function\" ? (...args) => clamp(originalStaleTime(...args)) : clamp(originalStaleTime);\n    if (typeof defaultedOptions.gcTime === \"number\") {\n      defaultedOptions.gcTime = Math.max(\n        defaultedOptions.gcTime,\n        MIN_SUSPENSE_TIME_MS\n      );\n    }\n  }\n};\nvar willFetch = (result, isRestoring) => result.isLoading && result.isFetching && !isRestoring;\nvar shouldSuspend = (defaultedOptions, result) => defaultedOptions?.suspense && result.isPending;\nvar fetchOptimistic = (defaultedOptions, observer, errorResetBoundary) => observer.fetchOptimistic(defaultedOptions).catch(() => {\n  errorResetBoundary.clearReset();\n});\nexport {\n  defaultThrowOnError,\n  ensureSuspenseTimers,\n  fetchOptimistic,\n  shouldSuspend,\n  willFetch\n};\n//# sourceMappingURL=suspense.js.map","import styled from '@emotion/styled';\nimport { DataUsageRounded } from '@mui/icons-material';\n\nimport { useB3Lang } from '@/lib/lang';\n\nconst NoDataContainer = styled('div')(() => ({\n  height: '100%',\n  minHeight: '400px',\n  backgroundColor: '#fff',\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  color: '#aaa',\n  fontSize: '18px',\n}));\n\nconst NoDataText = styled('span')(() => ({\n  marginLeft: '10px',\n}));\n\nexport default function B3NoData() {\n  const b3Lang = useB3Lang();\n  return (\n    <NoDataContainer>\n      <DataUsageRounded fontSize=\"large\" />\n      <NoDataText>{b3Lang('global.table.noData')}</NoDataText>\n    </NoDataContainer>\n  );\n}\n","import { ChangeEvent, MouseEvent, ReactElement, ReactNode, useContext } from 'react';\nimport {\n  Card,\n  Grid,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TablePagination,\n  TableRow,\n} from '@mui/material';\nimport TableSortLabel from '@mui/material/TableSortLabel';\n\nimport { b3HexToRgb, getContrastColor } from '@/components/outSideComponents/utils/b3CustomStyles';\nimport { useMobile } from '@/hooks';\nimport { useB3Lang } from '@/lib/lang';\nimport { CustomStyleContext } from '@/shared/customStyleButton';\n\nimport B3NoData from './B3NoData';\n\ninterface NodeWrapper<T extends object> {\n  node: T;\n}\n\nexport type PossibleNodeWrapper<T extends object> = T | NodeWrapper<T>;\n\nconst isNodeWrapper = <T extends object>(item: PossibleNodeWrapper<T>): item is NodeWrapper<T> =>\n  'node' in item;\n\ntype WithRowControls<T> = T & {\n  id?: string | number;\n};\n\ninterface Pagination {\n  offset: number;\n  first: number;\n  count: number;\n}\n\ninterface OrderIdRow {\n  orderId: string;\n}\n\nexport interface TableColumnItem<Row extends OrderIdRow> {\n  key: string;\n  title: string;\n  align?: 'right';\n  width?: string;\n  render: (row: Row) => ReactNode;\n  isSortable?: boolean;\n}\n\ninterface RowProps<Row extends OrderIdRow> {\n  columnItems: TableColumnItem<Row>[];\n  node: WithRowControls<Row>;\n  onClickRow: () => void;\n}\n\nfunction Row<Row extends OrderIdRow>({ columnItems, node, onClickRow }: RowProps<Row>) {\n  return (\n    <TableRow\n      hover\n      onClick={onClickRow}\n      sx={{\n        cursor: 'pointer',\n      }}\n      data-testid=\"tableBody-Row\"\n    >\n      {columnItems.map((column) => (\n        <TableCell\n          align={column.align ?? 'left'}\n          key={column.title}\n          data-testid={column.key ? `tableBody-${column.key}` : ''}\n        >\n          {column.render(node)}\n        </TableCell>\n      ))}\n    </TableRow>\n  );\n}\n\ninterface TableProps<Row extends OrderIdRow> {\n  columnItems: TableColumnItem<Row>[];\n  listItems: WithRowControls<Row>[];\n  onPaginationChange?: (pagination: Pagination) => void;\n  pagination?: Pagination;\n  renderItem: (row: Row, index: number) => ReactElement;\n  isInfiniteScroll?: boolean;\n  onClickRow: (row: Row, index: number) => void;\n  sortDirection?: 'asc' | 'desc';\n  sortByFn?: (key: string) => void;\n  orderBy?: string;\n}\n\nexport function B3Table<Row extends OrderIdRow>({\n  columnItems,\n  listItems = [],\n  pagination = {\n    offset: 0,\n    count: 0,\n    first: 10,\n  },\n  onPaginationChange = () => {},\n  renderItem,\n  isInfiniteScroll = false,\n  onClickRow,\n  sortDirection = 'asc',\n  sortByFn,\n  orderBy = '',\n}: TableProps<Row>) {\n  const rowsPerPageOptions = [10, 20, 30];\n\n  const {\n    state: {\n      portalStyle: { backgroundColor = '#FEF9F5' },\n    },\n  } = useContext(CustomStyleContext);\n\n  const customColor = getContrastColor(backgroundColor);\n\n  const [isMobile] = useMobile();\n\n  const b3Lang = useB3Lang();\n\n  const { offset, count, first } = pagination;\n\n  const handlePaginationChange = (pagination: Pagination) => {\n    onPaginationChange(pagination);\n  };\n\n  const handleChangePage = (_: MouseEvent<HTMLButtonElement> | null, page: number) => {\n    handlePaginationChange({\n      ...pagination,\n      offset: page * first,\n    });\n  };\n\n  const handleChangeRowsPerPage = (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    handlePaginationChange({\n      ...pagination,\n      offset: 0,\n      first: parseInt(event.target.value, 10) || first,\n    });\n  };\n\n  return listItems.length > 0 ? (\n    <>\n      {isInfiniteScroll && (\n        <>\n          <Grid container spacing={2}>\n            {listItems.map((row, index) => {\n              return (\n                <Grid item xs={12} key={row.orderId}>\n                  {renderItem(row, index)}\n                </Grid>\n              );\n            })}\n          </Grid>\n          <TablePagination\n            labelDisplayedRows={({ from, to, count }) =>\n              b3Lang('global.pagination.pageXOfY', { from, to, count })\n            }\n            rowsPerPageOptions={rowsPerPageOptions}\n            labelRowsPerPage={b3Lang('global.pagination.perPage')}\n            component=\"div\"\n            sx={{\n              color: isMobile ? b3HexToRgb(customColor, 0.87) : 'rgba(0, 0, 0, 0.87)',\n              marginTop: '1.5rem',\n              '::-webkit-scrollbar': {\n                display: 'none',\n              },\n              '& svg': {\n                color: isMobile ? b3HexToRgb(customColor, 0.87) : 'rgba(0, 0, 0, 0.87)',\n              },\n            }}\n            count={count}\n            rowsPerPage={first}\n            page={first === 0 ? 0 : offset / first}\n            onPageChange={handleChangePage}\n            onRowsPerPageChange={handleChangeRowsPerPage}\n          />\n        </>\n      )}\n      {!isInfiniteScroll && (\n        <Card\n          sx={{\n            height: '100%',\n            boxShadow:\n              '0px 2px 1px -1px rgb(0 0 0 / 20%), 0px 1px 1px 0px rgb(0 0 0 / 14%), 0px 1px 3px 0px rgb(0 0 0 / 12%)',\n          }}\n        >\n          <TableContainer>\n            <Table\n              sx={{\n                tableLayout: 'initial',\n              }}\n            >\n              <TableHead>\n                <TableRow data-testid=\"tableHead-Row\">\n                  {columnItems.map((column) => (\n                    <TableCell\n                      key={column.title}\n                      width={column.width}\n                      align={column.align ?? 'left'}\n                      sortDirection={column.key === orderBy ? sortDirection : false}\n                      data-testid={column.key ? `tableHead-${column.key}` : ''}\n                    >\n                      {column.isSortable ? (\n                        <TableSortLabel\n                          active={column.key === orderBy}\n                          direction={column.key === orderBy ? sortDirection : 'desc'}\n                          hideSortIcon={column.key !== orderBy}\n                          onClick={() => sortByFn?.(column.key)}\n                        >\n                          {column.title}\n                        </TableSortLabel>\n                      ) : (\n                        column.title\n                      )}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              </TableHead>\n\n              <TableBody>\n                {listItems.map((row, index) => {\n                  const node = isNodeWrapper(row) ? row.node : row;\n\n                  return (\n                    <Row\n                      key={`row-${node.orderId}`}\n                      columnItems={columnItems}\n                      node={node}\n                      onClickRow={() => onClickRow(node, index)}\n                    />\n                  );\n                })}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          <TablePagination\n            labelDisplayedRows={({ from, to, count }) =>\n              b3Lang('global.pagination.pageXOfY', { from, to, count })\n            }\n            rowsPerPageOptions={rowsPerPageOptions}\n            labelRowsPerPage={b3Lang('global.pagination.rowsPerPage')}\n            component=\"div\"\n            sx={{\n              marginTop: '1.5rem',\n              '::-webkit-scrollbar': {\n                display: 'none',\n              },\n            }}\n            count={count}\n            rowsPerPage={first}\n            page={first === 0 ? 0 : offset / first}\n            onPageChange={handleChangePage}\n            onRowsPerPageChange={handleChangeRowsPerPage}\n          />\n        </Card>\n      )}\n    </>\n  ) : (\n    <B3NoData />\n  );\n}\n","import styled from '@emotion/styled';\nimport { useTheme } from '@mui/material';\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\n\nimport { isB2BUserSelector, useAppSelector } from '@/store';\nimport { currencyFormat, displayFormat } from '@/utils';\n\nimport OrderStatus from './components/OrderStatus';\n\ninterface ListItem {\n  orderId: string;\n  firstName: string;\n  lastName: string;\n  poNumber?: string;\n  status: string;\n  totalIncTax: string;\n  createdAt: string;\n}\n\ninterface OrderItemCardProps {\n  goToDetail: () => void;\n  item: ListItem;\n}\n\nconst Flex = styled('div')(() => ({\n  display: 'flex',\n  alignItems: 'center',\n  '&.between-flex': {\n    justifyContent: 'space-between',\n  },\n}));\n\nexport function OrderItemCard({ item, goToDetail }: OrderItemCardProps) {\n  const theme = useTheme();\n  const isB2BUser = useAppSelector(isB2BUserSelector);\n  const customer = useAppSelector(({ company }) => company.customer);\n\n  const getName = (item: ListItem) => {\n    if (isB2BUser) {\n      return `by ${item.firstName} ${item.lastName}`;\n    }\n    return `by ${customer.firstName} ${customer.lastName}`;\n  };\n\n  return (\n    <Card key={item.orderId}>\n      <CardContent sx={{ color: 'rgba(0, 0, 0, 0.6)' }} onClick={goToDetail}>\n        <Flex className=\"between-flex\">\n          <Box\n            sx={{\n              display: 'flex',\n              alignItems: 'center',\n            }}\n          >\n            <Typography\n              variant=\"h5\"\n              sx={{\n                color: 'rgba(0, 0, 0, 0.87)',\n              }}\n            >\n              {`# ${item.orderId}`}\n            </Typography>\n            <Typography\n              sx={{\n                ml: 1,\n              }}\n              variant=\"body2\"\n            >\n              {item.poNumber ? item.poNumber : '–'}\n            </Typography>\n          </Box>\n          <Box>\n            <OrderStatus code={item.status} />\n          </Box>\n        </Flex>\n\n        <Typography\n          variant=\"h6\"\n          sx={{\n            marginBottom: theme.spacing(2.5),\n            mt: theme.spacing(1.5),\n            minHeight: '1.43em',\n          }}\n        >\n          {currencyFormat(item.totalIncTax)}\n        </Typography>\n\n        <Box\n          sx={{\n            display: 'flex',\n            justifyContent: 'space-between',\n          }}\n        >\n          <Typography\n            variant=\"body2\"\n            sx={{\n              fontWeight: 'normal',\n              marginRight: theme.spacing(2),\n            }}\n          >\n            {getName(item)}\n          </Typography>\n          <Typography>{`${displayFormat(item.createdAt)}`}</Typography>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n}\n","import B3Request from '@/shared/service/request/b3Fetch';\nimport { OrderStatusItem } from '@/types';\nimport { convertArrayToGraphql } from '@/utils';\n\nexport type CustomerOrderNode = {\n  node: {\n    orderId?: string;\n    createdAt: number;\n    totalIncTax?: number;\n    money?: string;\n    poNumber?: string;\n    status: string;\n    companyName?: string;\n    firstName?: string;\n    lastName?: string;\n  };\n};\n\nexport interface GetCustomerOrders {\n  data: {\n    customerOrders: {\n      totalCount: number;\n      edges: Array<CustomerOrderNode>;\n    };\n  };\n}\n\nexport type CompanyOrderNode = {\n  node: {\n    orderId?: string;\n    createdAt: number;\n    totalIncTax?: number;\n    money?: string;\n    poNumber?: string;\n    status: string;\n    firstName?: string;\n    lastName?: string;\n    companyInfo?: {\n      companyName: string;\n    };\n  };\n};\n\nexport interface GetCompanyOrders {\n  data: {\n    allOrders: {\n      totalCount: number;\n      edges: Array<CustomerOrderNode>;\n    };\n  };\n}\n\nconst allOrders = (data: CustomFieldItems, fn: 'allOrders' | 'customerOrders') => `\nquery ${fn === 'allOrders' ? 'GetAllOrders' : 'GetCustomerOrders'} {\n  ${fn}(\n    search: \"${data.q || ''}\"\n    status: \"${data?.statusCode || ''}\"\n    first: ${data.first}\n    offset: ${data.offset}\n    beginDateAt: ${data?.beginDateAt ? JSON.stringify(data.beginDateAt) : null}\n    endDateAt: ${data?.endDateAt ? JSON.stringify(data.endDateAt) : null}\n    companyName: \"${data?.companyName || ''}\"\n    createdBy: \"${data?.createdBy || ''}\"\n    isShowMy: \"${data?.isShowMy || 0}\"\n    orderBy: \"${data.orderBy}\"\n    email: \"${data?.email || ''}\"\n    ${data?.companyIds ? `companyIds: ${convertArrayToGraphql(data.companyIds || [])}` : ''}\n  ){\n    totalCount,\n    edges{\n      node {\n        orderId,\n        createdAt,\n        totalIncTax,\n        money,\n        poNumber,\n        status,\n        firstName,\n        lastName,\n        companyInfo {\n          companyName,\n        }\n      }\n    }\n  }\n}`;\n\nexport interface OrderStatus {\n  systemLabel: string;\n  customLabel: string;\n  statusCode: string;\n}\n\nexport interface CustomerOrderStatues {\n  data: {\n    bcOrderStatuses: OrderStatus[];\n  };\n}\n\nexport interface CompanyOrderStatuses {\n  data: {\n    orderStatuses: OrderStatus[];\n  };\n}\n\nconst getOrderStatusTypeQl = (fn: 'orderStatuses' | 'bcOrderStatuses') => `\nquery ${fn === 'orderStatuses' ? 'GetOrderStatuses' : 'GetCustomerOrderStatuses'} {\n  ${fn} {\n    systemLabel,\n    customLabel,\n    statusCode,\n  }\n}`;\n\nconst getCreatedByUser = (companyId: number) => `\n  query GetOrdersCreatedByUser {\n    createdByUser (\n      companyId: ${companyId},\n      module: 0,\n    ){\n      results,\n    }\n  }\n`;\n\nexport const getB2BAllOrders = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: allOrders(data, 'allOrders'),\n  }).then((res) => res.allOrders);\n\nexport const getBCAllOrders = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: allOrders(data, 'customerOrders'),\n  }).then((res) => res.customerOrders);\n\nexport const getOrderStatusType = (): Promise<OrderStatusItem[]> =>\n  B3Request.graphqlB2B({\n    query: getOrderStatusTypeQl('orderStatuses'),\n  }).then((res) => res.orderStatuses);\n\nexport const getBcOrderStatusType = (): Promise<OrderStatusItem[]> =>\n  B3Request.graphqlB2B({\n    query: getOrderStatusTypeQl('bcOrderStatuses'),\n  }).then((res) => res.bcOrderStatuses);\n\nexport const getOrdersCreatedByUser = (companyId: number) =>\n  B3Request.graphqlB2B({\n    query: getCreatedByUser(companyId),\n  });\n"],"names":["isCompanyOrder","b3Lang","useB3Lang","isMobile","useMobile","role","isAgenting","companyId","isB2BUser","isEnabledCompanyHierarchy","selectedCompanyId","useAppSelector","isB2BUserSelector","companyB2BId","company","companyInfo","id","customer","salesRepCompanyId","b2bFeatures","masqueradeCompany","order","orderSubViewPermission","pagesSubsidiariesPermission","selectCompanyHierarchyId","companyHierarchyInfo","currentCompanyId","CustomerRole","SUPER_ADMIN","Number","useData","pagination","setPagination","useState","offset","first","allTotal","setAllTotal","filterData","setFilterData","filterInfo","setFilterInfo","getOrderStatuses","setOrderStatuses","orderBy","setOrderBy","key","dir","useEffect","search","getCompanyInitFilter","getCustomerInitFilter","GUEST","async","createdByUsers","getOrdersCreatedByUser","orderStatuses","getOrderStatusType","getBcOrderStatusType","getFilterMoreData","filterInfoWithTranslatedLabel","map","element","translatedElement","label","idLang","name","options","option","optionLabel","orderStatusTranslationVariables","systemLabel","elementOption","customLabel","initFilter","navigate","useNavigate","goToDetail","item","index","orderId","state","currentIndex","searchParams","getOrderBy","totalCount","beginDateAt","endDateAt","columnAllItems","title","width","isSortable","render","jsx","Box","children","companyName","poNumber","money","totalIncTax","ordersCurrencyFormat","JSON","parse","currencyFormat","align","status","OrderStatus","text","getOrderStatusText","code","firstName","lastName","createdAt","displayFormat","columnItems","filter","data","isFetching","Observer","isRestoring","useIsRestoring","errorResetBoundary","useQueryErrorResetBoundary","client","useQueryClient","defaultedOptions","defaultQueryOptions","getDefaultOptions","queries","_experimental_beforeQuery","_optimisticResults","ensureSuspenseTimers","ensurePreventErrorBoundaryRetry","useClearResetErrorBoundary","isNewCacheEntry","getQueryCache","get","queryHash","observer","React.useState","result","getOptimisticResult","shouldSubscribe","subscribed","React.useSyncExternalStore","React.useCallback","onStoreChange","unsubscribe","subscribe","notifyManager","batchCalls","noop","updateResult","getCurrentResult","React.useEffect","setOptions","shouldSuspend","fetchOptimistic","getHasError","throwOnError","query","suspense","error","_experimental_afterQuery","experimental_prefetchInRender","isServer","willFetch","promise","catch","finally","notifyOnChangeProps","trackResult","useBaseQuery","queryKey","enabled","Boolean","queryFn","createdBy","params","edges","getB2BAllOrders","email","getEmail","getName","getBCAllOrders","row","node","fetchList","QueryObserver","B3Spin","isSpinning","jsxs","sx","display","flexDirection","flex","justifyContent","alignItems","mr","mb","B2BAutoCompleteCheckbox","handleChangeCompanyIds","newCompanyIds","includes","companyIds","B3Filter","startPicker","isEnabled","defaultValue","pickerKey","endPicker","filterMoreInfo","handleChange","value","q","handleFilterChange","currentStatus","orderStatus","originStatus","find","startValue","endValue","PlacedBy","statusCode","pcTotalWidth","pcContainerWidth","pcSearchContainerWidth","B3Table","listItems","count","onPaginationChange","isInfiniteScroll","renderItem","OrderItemCard","onClickRow","sortDirection","sortByFn","prev","Object","keys","sortKeys","Error","assertSortKey","Subscribable","constructor","super","this","selectError","currentThenable","pendingThenable","bindMethods","currentQuery","currentQueryInitialState","currentResult","currentResultState","currentResultOptions","selectFn","selectResult","lastQueryWithDefinedData","staleTimeoutId","refetchIntervalId","currentRefetchInterval","trackedProps","Set","refetch","bind","onSubscribe","listeners","size","addObserver","shouldFetchOnMount","executeFetch","updateTimers","onUnsubscribe","hasListeners","destroy","shouldFetchOnReconnect","shouldFetchOn","refetchOnReconnect","shouldFetchOnWindowFocus","refetchOnWindowFocus","clearStaleTimeout","clearRefetchInterval","removeObserver","prevOptions","prevQuery","resolveEnabled","updateQuery","_defaulted","shallowEqualObjects","notify","type","mounted","shouldFetchOptionally","resolveStaleTime","staleTime","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","updateRefetchInterval","build","createResult","optimisticResult","onPropTracked","Proxy","target","trackProp","reject","Reflect","add","getCurrentQuery","fetch","then","fetchOptions","cancelRefetch","isStale","isValidTimeout","timeout","timeUntilStale","dataUpdatedAt","timeoutManager","setTimeout","refetchInterval","nextInterval","setInterval","refetchIntervalInBackground","focusManager","isFocused","clearTimeout","clearInterval","prevResult","prevResultState","prevResultOptions","queryInitialState","newState","isPlaceholderData","fetchOnMount","fetchOptionally","fetchState","fetchStatus","errorUpdatedAt","skipSelect","placeholderData","replaceData","select","Date","now","isPending","isError","isLoading","hasData","nextResult","isSuccess","isInitialLoading","failureCount","fetchFailureCount","failureReason","fetchFailureReason","errorUpdateCount","isFetched","dataUpdateCount","isFetchedAfterMount","isRefetching","isLoadingError","isPaused","isRefetchError","finalizeThenableIfPossible","thenable","resolve","recreateThenable","pending","prevThenable","reason","shouldNotifyListeners","notifyOnChangePropsValue","includedProps","some","typedKey","has","onQueryUpdate","notifyOptions","batch","forEach","listener","retryOnMount","shouldLoadOnMount","refetchOnMount","field","isStaleByTime","IsRestoringContext","React.createContext","React.useContext","Provider","QueryErrorResetBoundaryContext","isReset","clearReset","reset","createValue","shouldThrowError","MIN_SUSPENSE_TIME_MS","clamp","Math","max","originalStaleTime","args","gcTime","NoDataContainer","styled","height","minHeight","backgroundColor","color","fontSize","NoDataText","marginLeft","B3NoData","DataUsageRounded","isNodeWrapper","Row","TableRow","hover","onClick","cursor","column","TableCell","rowsPerPageOptions","portalStyle","useContext","CustomStyleContext","customColor","getContrastColor","handlePaginationChange","handleChangePage","_","page","handleChangeRowsPerPage","event","parseInt","length","Fragment","Grid","container","spacing","xs","TablePagination","labelDisplayedRows","from","to","labelRowsPerPage","component","b3HexToRgb","marginTop","rowsPerPage","onPageChange","onRowsPerPageChange","Card","boxShadow","TableContainer","Table","tableLayout","TableHead","TableSortLabel","active","direction","hideSortIcon","TableBody","placedBy","filterMoreList","required","default","fieldType","variant","replaceOptions","createdByUser","results","filterCondition","orderNumber","isShowMy","Flex","theme","useTheme","CardContent","className","Typography","ml","marginBottom","mt","fontWeight","marginRight","allOrders","fn","stringify","convertArrayToGraphql","getOrderStatusTypeQl","getCreatedByUser","B3Request","graphqlB2B","res","customerOrders","bcOrderStatuses","haystack","emailRegArr","exec","createdByUserRegArr","trim"],"mappings":"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","x_google_ignoreList":[1,2,4,5,6,7,8]}