System.register(["./react-setup-legacy-CKF-9cua.js","./load-functions-legacy-B3DSplhu.js","./intl-legacy-f5dGU49Z.js"],function(n,t){"use strict";var e,a,s;return{setters:[n=>{e=n.B,a=n.aD,s=n.ae},null,null],execute:function(){var t=n("S",(n=>(n[n.Approved=0]="Approved",n[n.Deleted=20]="Deleted",n[n.Draft=30]="Draft",n[n.ReadyForApproval=40]="ReadyForApproval",n[n.Rejected=50]="Rejected",n))(t||{}));const i=({offset:n=0,first:e=50,status:a="",createdBy:s="",email:i="",search:o="",isDefault:p=!0})=>` query B2BCustomerShoppingLists {\n  shoppingLists (\n    offset: ${n}\n    first: ${e}\n    search: "${o}"\n    createdBy: "${s}"\n    email: "${i}"\n    ${(n=>"number"==typeof n?n===t.Rejected?`status: [${t.Deleted}, ${t.Rejected}]`:`status: ${n}`:"object"==typeof n?`status: [${n}]`:"")(a)}\n    isDefault: ${p}\n  ){\n    totalCount,\n    pageInfo{\n      hasNextPage,\n      hasPreviousPage,\n    },\n    edges{\n      node{\n        id,\n        name,\n        description,\n        status,\n        customerInfo{\n          firstName,\n          lastName,\n          userId,\n          email,\n          role,\n        },\n        updatedAt,\n        isOwner,\n        products {\n          totalCount,\n        }\n        approvedFlag,\n        companyInfo {\n          companyId,\n          companyName,\n          companyAddress,\n          companyCountry,\n          companyState,\n          companyCity,\n          companyZipCode,\n          phoneNumber,\n          bcId,\n        },\n      }\n    }\n  }\n}`,o="shoppingList {\n  id,\n  name,\n  description,\n  status,\n  approvedFlag,\n  customerInfo{\n    firstName,\n    lastName,\n    userId,\n    email,\n  },\n  isOwner,\n  grandTotal,\n  totalDiscount,\n  totalTax,\n  isShowGrandTotal,\n  companyInfo {\n    companyId,\n    companyName,\n    companyAddress,\n    companyCountry,\n    companyState,\n    companyCity,\n    companyZipCode,\n    phoneNumber,\n    bcId,\n  },\n}",p=n=>`mutation B2BUpdateShoppingListItems {\n  shoppingListsItemsUpdate(\n    itemId: ${n.itemId}\n    shoppingListId: ${n.shoppingListId}\n    itemData: ${s(n.itemData||[])}\n  ) {\n    shoppingListsItem {\n      id,\n      createdAt,\n      updatedAt,\n      productId,\n      variantId,\n      quantity,\n      productName,\n      optionList,\n      itemId,\n      baseSku,\n      variantSku,\n      basePrice,\n      discount,\n      tax,\n      enteredInclusive,\n      productUrl,\n      primaryImage,\n      productNote,\n    }\n  }\n}`,r=n=>`\n  query B2BShoppingListDetails {\n    shoppingList (\n      id: ${n.id}\n    ) {\n      id,\n      createdAt,\n      updatedAt,\n      name,\n      description,\n      status,\n      reason,\n      customerInfo {\n        firstName,\n        lastName,\n        userId,\n        email,\n        role,\n      },\n      isOwner,\n      grandTotal,\n      totalDiscount,\n      totalTax,\n      isShowGrandTotal,\n      channelId,\n      channelName,\n      approvedFlag,\n      companyInfo {\n        companyId,\n        companyName,\n        companyAddress,\n        companyCountry,\n        companyState,\n        companyCity,\n        companyZipCode,\n        phoneNumber,\n        bcId,\n      },\n      products (\n        offset: ${n.offset||0}\n        first: ${n.first||100},\n        search: "${n.search||""}",\n        orderBy: "${n?.orderBy||"-updatedAt"}"\n      ) {\n        totalCount,\n        edges {\n          node {\n            id,\n            createdAt,\n            updatedAt,\n            productId,\n            variantId,\n            quantity,\n            productName,\n            optionList,\n            itemId,\n            baseSku,\n            variantSku,\n            basePrice,\n            discount,\n            tax,\n            enteredInclusive,\n            productUrl,\n            primaryImage,\n            productNote,\n          }\n        }\n      }\n    }\n  }\n`,d=n=>`mutation AddItemsToShoppingList {\n  shoppingListsItemsCreate(\n    shoppingListId: ${n.shoppingListId},\n    items: ${a(n.items||[])}\n  ) {\n    shoppingListsItems {\n      id,\n      createdAt,\n      updatedAt,\n      productId,\n      variantId,\n      quantity,\n      productName,\n      optionList,\n      itemId,\n      baseSku,\n      variantSku,\n      basePrice,\n      discount,\n      tax,\n      enteredInclusive,\n      productUrl,\n      primaryImage,\n    }\n  }\n}`,u=n=>`mutation {\n  shoppingListsItemsDelete(\n    itemId: ${n.itemId},\n    shoppingListId: ${n.shoppingListId},\n  ) {\n    message,\n  }\n}`,c=({offset:n=0,first:t=50,search:e="",channelId:a=1})=>`query CustomerShoppingLists {\n  customerShoppingLists (\n    offset: ${n}\n    first: ${t}\n    search: "${e}"\n    channelId: ${a}\n  ){\n    totalCount,\n    pageInfo{\n      hasNextPage,\n      hasPreviousPage,\n    },\n    edges{\n      node{\n        id,\n        name,\n        description,\n        updatedAt,\n        products {\n          totalCount,\n        }\n      }\n    }\n  }\n}`,m="\nshoppingList {\n  id,\n  name,\n  description,\n  grandTotal,\n  totalDiscount,\n  totalTax,\n  isShowGrandTotal,\n}",h=n=>`{\n  customerShoppingList (\n    id: ${n.id}\n  ) {\n    id,\n    createdAt,\n    updatedAt,\n    name,\n    description,\n    reason,\n    grandTotal,\n    totalDiscount,\n    totalTax,\n    isShowGrandTotal,\n    channelId,\n    channelName,\n    products (\n      offset: ${n.offset||0}\n      first: ${n.first||100},\n      search: "${n.search||""}",\n    ) {\n      totalCount,\n      edges {\n        node {\n          id,\n          createdAt,\n          updatedAt,\n          productId,\n          variantId,\n          quantity,\n          productName,\n          optionList,\n          itemId,\n          baseSku,\n          variantSku,\n          basePrice,\n          discount,\n          tax,\n          enteredInclusive,\n          productUrl,\n          primaryImage,\n          productNote,\n        }\n      }\n    }\n  }\n}`,g=n=>`mutation AddItemsToCustomerShoppingList {\n  customerShoppingListsItemsCreate (\n    shoppingListId: ${n.shoppingListId},\n    items: ${a(n.items||[])}\n  ) {\n    shoppingListsItems {\n      id,\n      createdAt,\n      updatedAt,\n      productId,\n      variantId,\n      quantity,\n      productName,\n      optionList,\n      itemId,\n      baseSku,\n      variantSku,\n      basePrice,\n      discount,\n      tax,\n      enteredInclusive,\n      productUrl,\n      primaryImage,\n    }\n  }\n}`,l=n=>`mutation {\n  customerShoppingListsItemsUpdate (\n    itemId: ${n.itemId}\n    shoppingListId: ${n.shoppingListId}\n    itemData: ${s(n.itemData||[])}\n  ) {\n    shoppingListsItem {\n      id,\n      createdAt,\n      updatedAt,\n      productId,\n      variantId,\n      quantity,\n      productName,\n      optionList,\n      itemId,\n      baseSku,\n      variantSku,\n      basePrice,\n      discount,\n      tax,\n      enteredInclusive,\n      productUrl,\n      primaryImage,\n    }\n  }\n}`,I=n=>`mutation {\n  customerShoppingListsItemsDelete (\n    itemId: ${n.itemId},\n    shoppingListId: ${n.shoppingListId},\n  ) {\n    message,\n  }\n}`,y=(n,t,e)=>`\n  query GetShoppingListsCreatedByUser {\n    ${e}(\n      companyId: ${n},\n      module: ${t},\n    ){\n      results,\n    }\n  }\n`;n("g",(n={})=>e.graphqlB2B({query:i(n)}).then(n=>n.shoppingLists)),n("d",n=>{return e.graphqlB2B({query:(t="shoppingListsCreate",`\nmutation CreateShoppingList($shoppingListData: ShoppingListsInputType!){\n  ${t}(\n    shoppingListData: $shoppingListData\n  ) {\n    ${o}\n  }\n}`),variables:{shoppingListData:{companyId:n.companyId,name:n.name,description:n.description,status:n.status}}});var t}),n("j",n=>{return e.graphqlB2B({query:(t="shoppingListsUpdate",`\n  mutation UpdateB2BShoppingList ($id: Int!, $shoppingListData: ShoppingListsInputType!) {\n    ${t}(\n      id: $id\n      shoppingListData: $shoppingListData\n    ) {\n      ${o}\n    }\n  }\n`),variables:{id:n?.id?Number(n.id):1,shoppingListData:{name:n.name,description:n.description,status:n.status}}});var t}),n("n",(n={})=>e.graphqlB2B({query:r(n)}).then(n=>n.shoppingList)),n("b",(n={})=>e.graphqlB2B({query:d(n)})),n("u",(n={})=>e.graphqlB2B({query:p(n)})),n("l",(n={})=>e.graphqlB2B({query:u(n)})),n("a",(n={})=>e.graphqlB2B({query:c(n)}).then(n=>n.customerShoppingLists)),n("e",n=>{return e.graphqlB2B({query:(t="customerShoppingListsCreate",`mutation CreateCustomerShoppingList($shoppingListData: CustomerShoppingListsInputType!){\n  ${t}(\n    shoppingListData: $shoppingListData\n  ) {\n    ${m}\n  }\n}`),variables:{shoppingListData:{name:n.name,description:n.description,channelId:n?.channelId?Number(n.channelId):1}}});var t}),n("k",n=>{return e.graphqlB2B({query:(t="customerShoppingListsUpdate",`mutation($id: Int!, $shoppingListData: CustomerShoppingListsInputType!){\n  ${t}(\n    id: $id\n    shoppingListData: $shoppingListData\n  ) {\n    ${m}\n  }\n}`),variables:{id:n?.id?Number(n.id):1,shoppingListData:{name:n.name,description:n.description,channelId:n?.channelId?Number(n.channelId):1}}});var t}),n("o",(n={})=>e.graphqlB2B({query:h(n)}).then(n=>n.customerShoppingList)),n("c",(n={})=>e.graphqlB2B({query:g(n)})),n("h",(n={})=>e.graphqlB2B({query:l(n)})),n("m",(n={})=>e.graphqlB2B({query:I(n)})),n("i",()=>e.graphqlB2B({query:'{\n  storeConfigSwitchStatus(\n    key: "junior_place_order",\n  ) {\n    id,\n    key,\n    isEnabled,\n  }\n}'})),n("f",(n,t)=>e.graphqlB2B({query:y(n,t,"createdByUser")}))}}});
//# sourceMappingURL=shoppingList-legacy-P85pMCak.js.map
