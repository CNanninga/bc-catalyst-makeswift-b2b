{"version":3,"file":"index-legacy-Bkc5pdfY.js","sources":["../../src/pages/CompanyHierarchy/components/CompanyTableRowCard.tsx","../../src/pages/CompanyHierarchy/components/TableTree.tsx","../../src/pages/CompanyHierarchy/index.tsx"],"sourcesContent":["import { useContext, useId, useMemo, useState } from 'react';\nimport { Business as BusinessIcon, MoreHoriz as MoreHorizIcon } from '@mui/icons-material';\nimport { Box, Card, Chip, IconButton, Menu, MenuItem } from '@mui/material';\n\nimport { useB3Lang } from '@/lib/lang';\nimport { CustomStyleContext } from '@/shared/customStyleButton';\n\nimport { RecursiveNode, TreeNodeProps } from './types';\n\ninterface CompanyTableRowCardProps<T extends TreeNodeProps> {\n  company: RecursiveNode<T>;\n  currentCompanyId?: string | number;\n  selectCompanyId?: string | number;\n  onSwitchCompany?: (node: T) => void;\n  getDisplayName?: (node: T) => string;\n  getNodeId?: (node: T) => string | number;\n}\n\nfunction CompanyTableRowCard<T extends TreeNodeProps>({\n  company,\n  currentCompanyId = '',\n  selectCompanyId = '',\n  onSwitchCompany,\n  getDisplayName = (node) => node.companyName,\n  getNodeId = (node) => node.companyId,\n}: CompanyTableRowCardProps<T>) {\n  const companyNameId = useId();\n  const nodeId = getNodeId(company);\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const b3Lang = useB3Lang();\n  const {\n    state: {\n      switchAccountButton: { color = '#ED6C02' },\n    },\n  } = useContext(CustomStyleContext);\n  const isCurrentCompanyId = Number(nodeId) === Number(currentCompanyId);\n  const isSelectCompanyId = Number(nodeId) === Number(selectCompanyId);\n\n  const open = Boolean(anchorEl);\n  const isDisabledAction = useMemo(() => {\n    if (selectCompanyId) {\n      return Number(selectCompanyId) !== Number(company.companyId);\n    }\n\n    return Number(currentCompanyId) !== Number(company.companyId);\n  }, [currentCompanyId, selectCompanyId, company]);\n\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleSwitchClick = () => {\n    handleClose();\n    onSwitchCompany?.(company);\n  };\n\n  const openIcon = open\n    ? {\n        borderRadius: '10%',\n        backgroundColor: 'rgba(0, 0, 0, 0.14)',\n      }\n    : {};\n\n  return (\n    <Card\n      sx={{\n        padding: '16px',\n        marginBottom: '16px',\n      }}\n      role=\"listitem\"\n      aria-labelledby={companyNameId}\n    >\n      <Box>\n        <Box sx={{ display: 'flex', alignItems: 'flex-start', justifyContent: 'space-between' }}>\n          <Box id={companyNameId} sx={{ display: 'flex', alignItems: 'flex-start' }}>\n            <BusinessIcon sx={{ color: 'rgba(0, 0, 0, 0.54)', mr: 1 }} />\n            {getDisplayName(company)}\n          </Box>\n          {company?.channelFlag && isDisabledAction && (\n            <IconButton\n              size=\"small\"\n              onClick={handleClick}\n              aria-controls={open ? 'company-menu' : undefined}\n              aria-haspopup=\"true\"\n              aria-expanded={open ? 'true' : undefined}\n              data-testid=\"actions\"\n              sx={{\n                pt: 0,\n\n                '& svg': {\n                  ...openIcon,\n                },\n              }}\n            >\n              <MoreHorizIcon />\n            </IconButton>\n          )}\n        </Box>\n        {isSelectCompanyId && (\n          <Chip\n            label={b3Lang('companyHierarchy.chip.selectCompany')}\n            size=\"small\"\n            sx={{\n              mt: 2,\n              backgroundColor: color,\n              color: 'white',\n              height: 24,\n              '& .MuiChip-label': {\n                px: 1,\n              },\n            }}\n          />\n        )}\n        {isCurrentCompanyId && (\n          <Chip\n            label={b3Lang('companyHierarchy.chip.currentCompany')}\n            size=\"small\"\n            sx={{\n              mt: 2,\n              backgroundColor: 'primary.main',\n              color: 'white',\n              height: 24,\n              '& .MuiChip-label': {\n                px: 1,\n              },\n            }}\n          />\n        )}\n      </Box>\n      <Menu\n        id=\"company-menu\"\n        anchorEl={anchorEl}\n        open={open}\n        onClose={handleClose}\n        MenuListProps={{\n          'aria-labelledby': 'company-button',\n        }}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'right',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n      >\n        <MenuItem\n          sx={{\n            color: 'primary.main',\n          }}\n          onClick={handleSwitchClick}\n        >\n          {b3Lang('companyHierarchy.dialog.title')}\n        </MenuItem>\n      </Menu>\n    </Card>\n  );\n}\n\nexport default CompanyTableRowCard;\n","import { useContext, useMemo, useState } from 'react';\nimport {\n  Business as BusinessIcon,\n  KeyboardArrowDown as KeyboardArrowDownIcon,\n  MoreHoriz as MoreHorizIcon,\n} from '@mui/icons-material';\nimport {\n  Box,\n  Chip,\n  IconButton,\n  Menu,\n  MenuItem,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from '@mui/material';\n\nimport useMobile from '@/hooks/useMobile';\nimport { useB3Lang } from '@/lib/lang';\nimport { CustomStyleContext } from '@/shared/customStyleButton';\n\nimport CompanyTableRowCard from './CompanyTableRowCard';\nimport { RecursiveNode, TreeNodeProps } from './types';\n\ninterface CompanyTableProps<T extends TreeNodeProps> {\n  data: RecursiveNode<T>[];\n  currentCompanyId?: string | number;\n  selectCompanyId?: string | number;\n  onSwitchCompany?: (node: T) => void;\n  getDisplayName?: (node: T) => string;\n  getNodeId?: (node: T) => string | number;\n}\n\ninterface CompanyTableRowProps<T extends TreeNodeProps> {\n  node: RecursiveNode<T>;\n  level?: number;\n  currentCompanyId?: string | number;\n  selectCompanyId?: string | number;\n  onSwitchCompany?: (node: T) => void;\n  getDisplayName?: (node: T) => string;\n  getNodeId?: (node: T) => string | number;\n}\n\nfunction CompanyTableRow<T extends TreeNodeProps>({\n  node,\n  level = 0,\n  currentCompanyId = '',\n  selectCompanyId = '',\n  onSwitchCompany,\n  getDisplayName = (node) => node.companyName,\n  getNodeId = (node) => node.companyId,\n}: CompanyTableRowProps<T>) {\n  const [expanded, setExpanded] = useState(true);\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n\n  const b3Lang = useB3Lang();\n\n  const {\n    state: {\n      switchAccountButton: { color = '#ED6C02' },\n    },\n  } = useContext(CustomStyleContext);\n\n  const hasChildren = node.children && node.children.length > 0;\n  const nodeId = getNodeId(node);\n  const isCurrentCompanyId = Number(nodeId) === Number(currentCompanyId);\n\n  const isSelectCompanyId = Number(nodeId) === Number(selectCompanyId);\n  const open = Boolean(anchorEl);\n\n  const isDisabledAction = useMemo(() => {\n    if (selectCompanyId) {\n      return Number(selectCompanyId) !== Number(node.companyId);\n    }\n\n    return Number(currentCompanyId) !== Number(node.companyId);\n  }, [currentCompanyId, selectCompanyId, node]);\n\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleSwitchClick = () => {\n    handleClose();\n    onSwitchCompany?.(node);\n  };\n\n  return (\n    <>\n      <TableRow\n        sx={{\n          '&:last-child td, &:last-child th': { border: 0 },\n          '& > td': { bgcolor: 'background.paper' },\n          height: '3.25rem',\n        }}\n      >\n        <TableCell sx={{ width: '100%', py: 1 }}>\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <Box sx={{ display: 'flex', ml: level * 4, alignItems: 'center' }}>\n              {hasChildren ? (\n                <IconButton\n                  data-testid={expanded ? 'collapse' : 'open'}\n                  size=\"small\"\n                  onClick={() => setExpanded(!expanded)}\n                  sx={{ mr: 1 }}\n                >\n                  <KeyboardArrowDownIcon\n                    sx={{\n                      transform: expanded ? 'rotate(0deg)' : 'rotate(-90deg)',\n                      transition: 'transform 0.2s',\n                      color: 'rgba(0, 0, 0, 0.54)',\n                    }}\n                  />\n                </IconButton>\n              ) : (\n                <Box sx={{ width: 40 }} />\n              )}\n              <Box sx={{ mr: 1, display: 'flex', alignItems: 'center' }}>\n                <BusinessIcon sx={{ color: 'rgba(0, 0, 0, 0.54)' }} />\n              </Box>\n              <Box component=\"span\" sx={{ mr: 1 }}>\n                {getDisplayName(node)}\n              </Box>\n              {isSelectCompanyId && (\n                <Chip\n                  label={b3Lang('companyHierarchy.chip.selectCompany')}\n                  size=\"small\"\n                  sx={{\n                    backgroundColor: color,\n                    color: 'white',\n                    height: 24,\n                    '& .MuiChip-label': {\n                      px: 1,\n                    },\n                  }}\n                />\n              )}\n              {isCurrentCompanyId && (\n                <Chip\n                  label={b3Lang('companyHierarchy.chip.currentCompany')}\n                  size=\"small\"\n                  sx={{\n                    backgroundColor: 'primary.main',\n                    color: 'white',\n                    height: 24,\n                    '& .MuiChip-label': {\n                      px: 1,\n                    },\n                  }}\n                />\n              )}\n            </Box>\n          </Box>\n        </TableCell>\n        <TableCell align=\"right\" sx={{ width: 48, py: 1 }}>\n          {node?.channelFlag && isDisabledAction && (\n            <IconButton\n              size=\"small\"\n              onClick={handleClick}\n              aria-controls={open ? 'company-menu' : undefined}\n              aria-haspopup=\"true\"\n              aria-expanded={open ? 'true' : undefined}\n              data-testid=\"actions\"\n            >\n              <MoreHorizIcon />\n            </IconButton>\n          )}\n          <Menu\n            id=\"company-menu\"\n            anchorEl={anchorEl}\n            open={open}\n            onClose={handleClose}\n            MenuListProps={{\n              'aria-labelledby': 'company-button',\n            }}\n            anchorOrigin={{\n              vertical: 'bottom',\n              horizontal: 'right',\n            }}\n            transformOrigin={{\n              vertical: 'top',\n              horizontal: 'right',\n            }}\n          >\n            <MenuItem\n              sx={{\n                color: 'primary.main',\n              }}\n              onClick={handleSwitchClick}\n            >\n              {b3Lang('companyHierarchy.dialog.title')}\n            </MenuItem>\n          </Menu>\n        </TableCell>\n      </TableRow>\n      {expanded &&\n        hasChildren &&\n        (node?.children || []).map((child) => (\n          <CompanyTableRow\n            key={getNodeId(child)}\n            node={child}\n            level={level + 1}\n            currentCompanyId={currentCompanyId}\n            selectCompanyId={selectCompanyId}\n            onSwitchCompany={onSwitchCompany}\n            getDisplayName={getDisplayName}\n            getNodeId={getNodeId}\n          />\n        ))}\n    </>\n  );\n}\n\nfunction CompanyHierarchyTableTree<T extends TreeNodeProps>({\n  data,\n  currentCompanyId,\n  selectCompanyId,\n  onSwitchCompany,\n  getDisplayName = (node) => node.companyName,\n  getNodeId = (node) => node.companyId,\n}: CompanyTableProps<T>) {\n  const [isMobile] = useMobile();\n  const b3Lang = useB3Lang();\n\n  const handleExpandCompanyData = (\n    companies: RecursiveNode<T>[] | [],\n    companyData: RecursiveNode<T>[],\n  ) => {\n    if (companies.length === 0) return companyData;\n    companies.forEach((company) => {\n      companyData.push({\n        ...company,\n        children: [],\n      });\n\n      const isHasChildren = company.children && company.children.length > 0;\n\n      if (isHasChildren) {\n        handleExpandCompanyData(company?.children || [], companyData);\n      }\n    });\n\n    return companyData;\n  };\n  const mobileCompanyData = handleExpandCompanyData(data, []);\n\n  return (\n    <>\n      {isMobile ? (\n        <div role=\"list\">\n          {mobileCompanyData.map((company) => (\n            <CompanyTableRowCard\n              key={getNodeId(company)}\n              company={company}\n              currentCompanyId={currentCompanyId}\n              selectCompanyId={selectCompanyId}\n              onSwitchCompany={onSwitchCompany}\n              getDisplayName={getDisplayName}\n              getNodeId={getNodeId}\n            />\n          ))}\n        </div>\n      ) : (\n        <Paper sx={{ width: '100%', minHeight: '100px', mx: 'auto', mt: 2 }}>\n          <TableContainer>\n            <Table size=\"small\" aria-label=\"company structure table\">\n              <TableHead>\n                <TableRow sx={{ height: '3.25rem' }}>\n                  <TableCell sx={{ fontWeight: 500, pl: 8 }}>\n                    {b3Lang('companyHierarchy.table.name')}\n                  </TableCell>\n                  <TableCell sx={{ width: 48 }} />\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {data.map((company) => (\n                  <CompanyTableRow\n                    key={getNodeId(company)}\n                    node={company}\n                    currentCompanyId={currentCompanyId}\n                    selectCompanyId={selectCompanyId}\n                    onSwitchCompany={onSwitchCompany}\n                    getDisplayName={getDisplayName}\n                    getNodeId={getNodeId}\n                  />\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Paper>\n      )}\n    </>\n  );\n}\n\nexport default CompanyHierarchyTableTree;\n","import { useEffect, useRef, useState } from 'react';\nimport { Box } from '@mui/material';\n\nimport B3Spin from '@/components/spin/B3Spin';\nimport { getCompanySubsidiaries } from '@/shared/service/b2b';\nimport { useAppSelector } from '@/store';\nimport { CompanyHierarchyListProps, CompanyHierarchyProps } from '@/types';\nimport { buildHierarchy } from '@/utils';\n\nimport HierarchyDialog from './components/HierarchyDialog';\nimport CompanyHierarchyTableTree from './components/TableTree';\n\nfunction CompanyHierarchy() {\n  const [data, setData] = useState<CompanyHierarchyProps[]>([]);\n\n  const [open, setOpen] = useState<boolean>(false);\n\n  const [currentRow, setCurrentRow] = useState<CompanyHierarchyProps | null>(null);\n\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const originDataRef = useRef<CompanyHierarchyListProps[]>([]);\n\n  const { id: currentCompanyId } = useAppSelector(({ company }) => company.companyInfo);\n\n  const { selectCompanyHierarchyId } = useAppSelector(\n    ({ company }) => company.companyHierarchyInfo,\n  );\n\n  const init = async () => {\n    setLoading(true);\n\n    const { companySubsidiaries } = await getCompanySubsidiaries();\n\n    const list = buildHierarchy({\n      data: companySubsidiaries || [],\n    });\n\n    originDataRef.current = companySubsidiaries;\n\n    setData(list);\n\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    if (currentCompanyId) {\n      init();\n    }\n\n    // ignore init\n    // due they are funtions that do not depend on any reactive value\n  }, [currentCompanyId]);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleRowClick = (row: CompanyHierarchyProps) => {\n    setCurrentRow(row);\n    setOpen(true);\n  };\n\n  return (\n    <B3Spin isSpinning={loading}>\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n          width: '100%',\n        }}\n      >\n        <CompanyHierarchyTableTree<CompanyHierarchyProps>\n          data={data}\n          onSwitchCompany={handleRowClick}\n          currentCompanyId={currentCompanyId}\n          selectCompanyId={selectCompanyHierarchyId}\n        />\n\n        <HierarchyDialog\n          open={open}\n          handleClose={handleClose}\n          currentRow={currentRow}\n          companyHierarchyAllList={originDataRef?.current || []}\n        />\n      </Box>\n    </B3Spin>\n  );\n}\n\nexport default CompanyHierarchy;\n"],"names":["CompanyTableRowCard","company","currentCompanyId","selectCompanyId","onSwitchCompany","getDisplayName","node","companyName","getNodeId","companyId","companyNameId","useId","nodeId","anchorEl","setAnchorEl","useState","b3Lang","useB3Lang","state","switchAccountButton","color","useContext","CustomStyleContext","isCurrentCompanyId","Number","isSelectCompanyId","open","Boolean","isDisabledAction","useMemo","handleClose","openIcon","borderRadius","backgroundColor","jsxs","Card","sx","padding","marginBottom","role","children","Box","display","alignItems","justifyContent","id","jsx","BusinessIcon","mr","channelFlag","IconButton","size","onClick","event","currentTarget","pt","MoreHorizIcon","Chip","label","mt","height","px","Menu","onClose","MenuListProps","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","handleSwitchClick","CompanyTableRow","level","expanded","setExpanded","hasChildren","length","Fragment","TableRow","border","bgcolor","TableCell","width","py","ml","KeyboardArrowDownIcon","transform","transition","component","align","map","child","CompanyHierarchyTableTree","data","isMobile","useMobile","handleExpandCompanyData","companies","companyData","forEach","push","mobileCompanyData","Paper","minHeight","mx","TableContainer","Table","TableHead","fontWeight","pl","TableBody","setData","setOpen","currentRow","setCurrentRow","loading","setLoading","originDataRef","useRef","useAppSelector","companyInfo","selectCompanyHierarchyId","companyHierarchyInfo","useEffect","async","companySubsidiaries","getCompanySubsidiaries","list","buildHierarchy","current","init","B3Spin","isSpinning","flexDirection","flex","row","HierarchyDialog","companyHierarchyAllList"],"mappings":"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"}