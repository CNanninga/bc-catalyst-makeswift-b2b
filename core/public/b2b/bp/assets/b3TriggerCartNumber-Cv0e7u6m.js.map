{"version":3,"file":"b3TriggerCartNumber-Cv0e7u6m.js","sources":["../../src/utils/b3TriggerCartNumber.ts"],"sourcesContent":["import { getCart } from '@/shared/service/bc/graphql/cart';\nimport { setCartNumber, store } from '@/store';\n\nimport b2bLogger from './b3Logger';\n\nconst productTypeKey = [\n  'customItems',\n  'digitalItems',\n  'giftCertificates',\n  'physicalItems',\n] as const;\n\nconst b3TriggerCartNumber = async () => {\n  let number = 0;\n\n  try {\n    const cartInfo = await getCart();\n\n    if (cartInfo.data.site.cart) {\n      const items = cartInfo.data.site.cart.lineItems;\n      productTypeKey.forEach((key) => {\n        const productItem = items[key];\n        if (productItem && productItem.length > 0) {\n          if (key === 'giftCertificates') {\n            number += productItem.length;\n          } else {\n            productItem.forEach((item) => {\n              number += Number(item.quantity);\n            });\n          }\n        }\n      });\n    }\n  } catch (err) {\n    b2bLogger.error(err);\n  }\n\n  store.dispatch(setCartNumber(number));\n};\n\nexport default b3TriggerCartNumber;\n"],"names":["productTypeKey","b3TriggerCartNumber","number","cartInfo","getCart","items","key","productItem","item","err","b2bLogger","store","setCartNumber"],"mappings":"qGAKA,MAAMA,EAAiB,CACrB,cACA,eACA,mBACA,eACF,EAEMC,EAAsB,SAAY,CACtC,IAAIC,EAAS,EAEb,GAAI,CACF,MAAMC,EAAW,MAAMC,EAAA,EAEvB,GAAID,EAAS,KAAK,KAAK,KAAM,CAC3B,MAAME,EAAQF,EAAS,KAAK,KAAK,KAAK,UACtCH,EAAe,QAASM,GAAQ,CAC9B,MAAMC,EAAcF,EAAMC,CAAG,EACzBC,GAAeA,EAAY,OAAS,IAClCD,IAAQ,mBACVJ,GAAUK,EAAY,OAEtBA,EAAY,QAASC,GAAS,CAC5BN,GAAU,OAAOM,EAAK,QAAQ,CAChC,CAAC,EAGP,CAAC,CACH,CACF,OAASC,EAAK,CACZC,EAAU,MAAMD,CAAG,CACrB,CAEAE,EAAM,SAASC,EAAcV,CAAM,CAAC,CACtC"}