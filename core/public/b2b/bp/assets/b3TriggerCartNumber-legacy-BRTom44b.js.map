{"version":3,"file":"b3TriggerCartNumber-legacy-BRTom44b.js","sources":["../../src/utils/b3TriggerCartNumber.ts"],"sourcesContent":["import { getCart } from '@/shared/service/bc/graphql/cart';\nimport { setCartNumber, store } from '@/store';\n\nimport b2bLogger from './b3Logger';\n\nconst productTypeKey = [\n  'customItems',\n  'digitalItems',\n  'giftCertificates',\n  'physicalItems',\n] as const;\n\nconst b3TriggerCartNumber = async () => {\n  let number = 0;\n\n  try {\n    const cartInfo = await getCart();\n\n    if (cartInfo.data.site.cart) {\n      const items = cartInfo.data.site.cart.lineItems;\n      productTypeKey.forEach((key) => {\n        const productItem = items[key];\n        if (productItem && productItem.length > 0) {\n          if (key === 'giftCertificates') {\n            number += productItem.length;\n          } else {\n            productItem.forEach((item) => {\n              number += Number(item.quantity);\n            });\n          }\n        }\n      });\n    }\n  } catch (err) {\n    b2bLogger.error(err);\n  }\n\n  store.dispatch(setCartNumber(number));\n};\n\nexport default b3TriggerCartNumber;\n"],"names":["productTypeKey","async","number","cartInfo","getCart","data","site","cart","items","lineItems","forEach","key","productItem","length","item","Number","quantity","err","b2bLogger","error","store","dispatch","setCartNumber"],"mappings":"gMAKA,MAAMA,EAAiB,CACrB,cACA,eACA,mBACA,uBAG0BC,UAC1B,IAAIC,EAAS,EAEb,IACE,MAAMC,QAAiBC,IAEvB,GAAID,EAASE,KAAKC,KAAKC,KAAM,CAC3B,MAAMC,EAAQL,EAASE,KAAKC,KAAKC,KAAKE,UACtCT,EAAeU,QAASC,IACtB,MAAMC,EAAcJ,EAAMG,GACtBC,GAAeA,EAAYC,OAAS,IAC1B,qBAARF,EACFT,GAAUU,EAAYC,OAEtBD,EAAYF,QAASI,IACnBZ,GAAUa,OAAOD,EAAKE,cAKhC,CACF,OAASC,GACPC,EAAUC,MAAMF,EAClB,CAEAG,EAAMC,SAASC,EAAcpB"}