{"version":3,"file":"index-legacy-DASAZQ1V.js","sources":["../../src/pages/Dashboard/components/DashboardCard.tsx","../../src/pages/Dashboard/index.tsx","../../src/pages/Dashboard/ActionMenuCell.tsx","../../src/pages/Dashboard/CompanyNameCell/SelectedBadge.tsx","../../src/pages/Dashboard/CompanyNameCell/index.tsx"],"sourcesContent":["import { Box, Button, Card, CardContent, Typography } from '@mui/material';\n\nimport { useB3Lang } from '@/lib/lang';\n\ninterface DashboardCardProps {\n  companyName: string;\n  email: string;\n  isSelected: boolean;\n  action: { label: string; onClick: () => void };\n}\n\nfunction SelectedBadge() {\n  const b3Lang = useB3Lang();\n\n  return (\n    <Box\n      sx={{\n        fontWeight: 400,\n        fontSize: '13px',\n        background: '#ED6C02',\n        display: 'inline-block',\n        p: '2px 7px',\n        color: '#FFFFFF',\n        borderRadius: '10px',\n      }}\n    >\n      {b3Lang('dashboard.selected')}\n    </Box>\n  );\n}\n\nexport function DashboardCard({ companyName, email, isSelected, action }: DashboardCardProps) {\n  return (\n    <Card>\n      <CardContent\n        sx={{\n          color: '#313440',\n        }}\n      >\n        <Typography\n          sx={{\n            fontWeight: 400,\n            fontSize: '24px',\n            color: 'rgba(0, 0, 0, 0.87)',\n          }}\n        >\n          {companyName}\n        </Typography>\n\n        {isSelected && <SelectedBadge />}\n\n        <Box\n          sx={{\n            display: 'flex',\n            fontSize: '16px',\n            mt: '15px',\n            gap: '5px',\n          }}\n        >\n          <Typography\n            sx={{\n              fontWeight: 500,\n            }}\n          >\n            Email:\n          </Typography>\n          <Typography variant=\"body1\">{email}</Typography>\n        </Box>\n      </CardContent>\n\n      <Button\n        sx={{\n          ml: '10px',\n          mb: '10px',\n        }}\n        variant=\"text\"\n        onClick={() => action.onClick()}\n      >\n        {action.label}\n      </Button>\n    </Card>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Box } from '@mui/material';\nimport Cookies from 'js-cookie';\n\nimport { usePageMask } from '@/components';\nimport { ConfirmMasqueradeDialog } from '@/components/ConfirmMasqueradeDialog';\nimport B3FilterSearch from '@/components/filter/B3FilterSearch';\nimport B3Spin from '@/components/spin/B3Spin';\nimport { B3PaginationTable, GetRequestList } from '@/components/table/B3PaginationTable';\nimport { TableColumnItem } from '@/components/table/B3Table';\nimport { useSort } from '@/hooks';\nimport { useB3Lang } from '@/lib/lang';\nimport { PageProps } from '@/pages/PageProps';\nimport { superAdminCompanies } from '@/shared/service/b2b';\nimport { deleteCart } from '@/shared/service/bc/graphql/cart';\nimport { setCartNumber, useAppSelector, useAppStore } from '@/store';\nimport { endMasquerade, startMasquerade } from '@/utils/masquerade';\n\nimport { DashboardCard } from './components/DashboardCard';\nimport { ActionMenuCell } from './ActionMenuCell';\nimport { CompanyNameCell } from './CompanyNameCell';\n\ninterface ListItem {\n  [key: string]: string;\n}\n\ntype ConfirmState =\n  | {\n      type: 'start';\n      companyId: number;\n    }\n  | {\n      type: 'end';\n    };\n\nconst defaultSortKey = 'companyName';\n\nconst sortKeys = {\n  companyName: 'companyName',\n  companyAdminName: 'companyAdminName',\n  companyEmail: 'companyEmail',\n};\n\nconst rowsPerPage = [10, 20, 30];\n\nfunction useData() {\n  const customerId = useAppSelector(({ company }) => company.customer.id);\n  const b2bId = useAppSelector(({ company }) => company.customer.b2bId);\n  const cartNumber = useAppSelector(({ global }) => global.cartNumber);\n  const salesRepCompanyId = Number(\n    useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.id),\n  );\n\n  return { salesRepCompanyId, b2bId, customerId, cartNumber };\n}\n\nfunction Dashboard(props: PageProps) {\n  const showPageMask = usePageMask();\n  const store = useAppStore();\n\n  const { salesRepCompanyId, b2bId, customerId, cartNumber } = useData();\n\n  const { setOpenPage } = props;\n  const b3Lang = useB3Lang();\n\n  const [isRequestLoading, setIsRequestLoading] = useState(false);\n  const [confirmMasquerade, setConfirmMasquerade] = useState<ConfirmState>();\n\n  const [filterData, setFilterData] = useState<ListItem>({\n    q: '',\n    orderBy: sortKeys[defaultSortKey],\n  });\n\n  const [handleSetOrderBy, order, orderBy] = useSort(\n    sortKeys,\n    defaultSortKey,\n    filterData,\n    setFilterData,\n    'asc',\n  );\n\n  const location = useLocation();\n\n  const getSuperAdminCompaniesList: GetRequestList<ListItem, ListItem> = async (params) => {\n    let list = { edges: [], totalCount: 0 };\n    if (typeof b2bId === 'number') {\n      list = (await superAdminCompanies(b2bId, params)).superAdminCompanies;\n    }\n\n    return list;\n  };\n\n  const clearCart = async (cartEntityId: string) => {\n    await deleteCart({ deleteCartInput: { cartEntityId } });\n    Cookies.remove('cartId');\n    store.dispatch(setCartNumber(0));\n  };\n\n  const startActing = async (companyId: number) => {\n    try {\n      setIsRequestLoading(true);\n      if (typeof b2bId === 'number') {\n        await startMasquerade({ customerId, companyId }, store);\n      }\n\n      const cartEntityId = Cookies.get('cartId');\n      if (cartEntityId) {\n        await clearCart(cartEntityId);\n      }\n\n      setOpenPage({\n        isOpen: true,\n        openUrl: '/dashboard',\n      });\n\n      setFilterData({\n        ...filterData,\n      });\n    } finally {\n      setIsRequestLoading(false);\n    }\n  };\n\n  const endActing = async () => {\n    try {\n      showPageMask(true);\n      if (typeof b2bId === 'number') {\n        await endMasquerade(store);\n      }\n\n      const cartEntityId = Cookies.get('cartId');\n      if (cartEntityId) {\n        await clearCart(cartEntityId);\n      }\n\n      setFilterData({\n        ...filterData,\n      });\n    } finally {\n      showPageMask(false);\n    }\n  };\n\n  useEffect(() => {\n    const params = {\n      ...location,\n    };\n    if (params?.state) {\n      endActing();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location]);\n\n  const handleChange = async (q: string) => {\n    setFilterData({\n      ...filterData,\n      q,\n    });\n  };\n\n  const onStartMasquerade = async (companyId: number) => {\n    if (cartNumber > 0) {\n      setConfirmMasquerade({ type: 'start', companyId });\n    } else {\n      await startActing(companyId);\n    }\n  };\n\n  const onEndMasquerade = async () => {\n    if (cartNumber > 0) {\n      setConfirmMasquerade({ type: 'end' });\n    } else {\n      await endActing();\n    }\n  };\n\n  const columnItems: TableColumnItem<ListItem>[] = [\n    {\n      key: 'companyName',\n      title: b3Lang('dashboard.company'),\n      render: ({ companyName, companyId }) => (\n        <CompanyNameCell\n          companyName={companyName}\n          isSelected={Number(companyId) === Number(salesRepCompanyId)}\n        />\n      ),\n      isSortable: true,\n    },\n    {\n      key: 'companyEmail',\n      title: b3Lang('dashboard.email'),\n      isSortable: true,\n    },\n    {\n      key: 'actions',\n      title: b3Lang('dashboard.action'),\n      render: ({ companyId }) => {\n        const isSelected = Number(companyId) === Number(salesRepCompanyId);\n\n        if (isSelected) {\n          return (\n            <ActionMenuCell\n              label={b3Lang('dashboard.endMasqueradeAction')}\n              onClick={() => onEndMasquerade()}\n            />\n          );\n        }\n\n        return (\n          <ActionMenuCell\n            label={b3Lang('dashboard.masqueradeAction')}\n            onClick={() => onStartMasquerade(Number(companyId))}\n          />\n        );\n      },\n    },\n  ];\n\n  return (\n    <B3Spin isSpinning={isRequestLoading}>\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n        }}\n      >\n        <Box\n          sx={{\n            mb: '24px',\n          }}\n        >\n          <B3FilterSearch handleChange={handleChange} />\n        </Box>\n        <B3PaginationTable\n          columnItems={columnItems}\n          rowsPerPageOptions={rowsPerPage}\n          getRequestList={getSuperAdminCompaniesList}\n          searchParams={filterData || {}}\n          isCustomRender={false}\n          requestLoading={setIsRequestLoading}\n          tableKey=\"id\"\n          sortDirection={order}\n          orderBy={orderBy}\n          sortByFn={handleSetOrderBy}\n          renderItem={({ companyName, companyEmail, companyId }) => {\n            const isSelected = Number(companyId) === Number(salesRepCompanyId);\n            const action = isSelected\n              ? {\n                  label: b3Lang('dashboard.endMasqueradeAction'),\n                  onClick: () => onEndMasquerade(),\n                }\n              : {\n                  label: b3Lang('dashboard.masqueradeAction'),\n                  onClick: () => onStartMasquerade(Number(companyId)),\n                };\n\n            return (\n              <DashboardCard\n                companyName={companyName}\n                email={companyEmail}\n                isSelected={isSelected}\n                action={action}\n              />\n            );\n          }}\n        />\n      </Box>\n      <ConfirmMasqueradeDialog\n        title={\n          confirmMasquerade?.type === 'end'\n            ? b3Lang('dashboard.masqueradeModal.title.end')\n            : b3Lang('dashboard.masqueradeModal.title.start')\n        }\n        isOpen={confirmMasquerade !== undefined}\n        isRequestLoading={isRequestLoading}\n        handleClose={() => setConfirmMasquerade(undefined)}\n        handleConfirm={async () => {\n          if (confirmMasquerade?.type === 'start') {\n            await startActing(confirmMasquerade.companyId);\n            setConfirmMasquerade(undefined);\n          } else if (confirmMasquerade?.type === 'end') {\n            await endActing();\n            setConfirmMasquerade(undefined);\n          }\n        }}\n      />\n    </B3Spin>\n  );\n}\n\nexport default Dashboard;\n","import { useRef, useState } from 'react';\nimport { MoreHoriz as MoreHorizIcon } from '@mui/icons-material';\nimport { IconButton, Menu, MenuItem } from '@mui/material';\nimport { styled } from '@mui/material/styles';\n\nconst StyledMenu = styled(Menu)(() => ({\n  '& .MuiPaper-elevation': {\n    boxShadow:\n      '0px 1px 0px -1px rgba(0, 0, 0, 0.1), 0px 1px 6px rgba(0, 0, 0, 0.07), 0px 1px 4px rgba(0, 0, 0, 0.06)',\n    borderRadius: '4px',\n  },\n}));\n\ninterface Props {\n  label: string;\n  onClick: () => void;\n}\n\nexport function ActionMenuCell({ label, onClick }: Props) {\n  const ref = useRef<HTMLButtonElement | null>(null);\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <>\n      <IconButton onClick={() => setIsOpen(true)} ref={ref}>\n        <MoreHorizIcon />\n      </IconButton>\n      <StyledMenu\n        anchorEl={ref.current}\n        open={isOpen}\n        onClose={() => setIsOpen(false)}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'right',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n      >\n        <MenuItem\n          sx={{\n            color: 'primary.main',\n          }}\n          onClick={() => {\n            onClick();\n            setIsOpen(false);\n          }}\n        >\n          {label}\n        </MenuItem>\n      </StyledMenu>\n    </>\n  );\n}\n","import { Box } from '@mui/material';\n\nimport { useB3Lang } from '@/lib/lang';\n\nexport function SelectedBadge() {\n  const b3Lang = useB3Lang();\n\n  return (\n    <Box\n      sx={{\n        fontWeight: 400,\n        fontSize: '13px',\n        background: '#ED6C02',\n        ml: '16px',\n        p: '2px 7px',\n        color: '#FFFFFF',\n        borderRadius: '10px',\n      }}\n    >\n      {b3Lang('dashboard.selected')}\n    </Box>\n  );\n}\n","import { Box } from '@mui/material';\n\nimport { SelectedBadge } from './SelectedBadge';\n\ninterface Props {\n  companyName: string;\n  isSelected: boolean;\n}\n\nexport function CompanyNameCell({ companyName, isSelected }: Props) {\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        alignItems: 'center',\n      }}\n    >\n      {companyName}\n      {isSelected && <SelectedBadge />}\n    </Box>\n  );\n}\n"],"names":["SelectedBadge","b3Lang","useB3Lang","jsx","Box","sx","fontWeight","fontSize","background","display","p","color","borderRadius","children","DashboardCard","companyName","email","isSelected","action","Card","jsxs","CardContent","Typography","mt","gap","variant","Button","ml","mb","onClick","label","props","showPageMask","usePageMask","store","useAppStore","salesRepCompanyId","b2bId","customerId","cartNumber","useAppSelector","company","customer","id","global","Number","b2bFeatures","masqueradeCompany","useData","setOpenPage","isRequestLoading","setIsRequestLoading","useState","confirmMasquerade","setConfirmMasquerade","filterData","setFilterData","q","orderBy","sortKeys","defaultSortKey","handleSetOrderBy","order","useSort","location","useLocation","clearCart","async","deleteCart","deleteCartInput","cartEntityId","Cookies","remove","dispatch","setCartNumber","startActing","startMasquerade","companyId","get","isOpen","openUrl","endActing","endMasquerade","useEffect","params","state","onStartMasquerade","type","onEndMasquerade","columnItems","key","title","render","CompanyNameCell","isSortable","ActionMenuCell","B3Spin","isSpinning","flexDirection","flex","B3FilterSearch","handleChange","B3PaginationTable","rowsPerPageOptions","rowsPerPage","getRequestList","list","edges","totalCount","superAdminCompanies","searchParams","isCustomRender","requestLoading","tableKey","sortDirection","sortByFn","renderItem","companyEmail","ConfirmMasqueradeDialog","handleClose","handleConfirm","StyledMenu","styled","Menu","boxShadow","ref","useRef","setIsOpen","Fragment","IconButton","MoreHorizIcon","anchorEl","current","open","onClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","alignItems","companyAdminName"],"mappings":"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"}