{"version":3,"file":"payment-legacy-DMCut_VB.js","sources":["../../src/shared/service/b2b/graphql/invoice.ts","../../src/pages/Invoice/utils/payment.ts"],"sourcesContent":["import { convertArrayToGraphql } from '../../../../utils';\nimport B3Request from '../../request/b3Fetch';\n\nconst invoiceList = (data: CustomFieldItems) => `\nquery GetInvoices {\n  invoices (\n    search: \"${data.q || ''}\"\n    first: ${data.first}\n    offset: ${data.offset} \n    ${data?.status ? `status: ${convertArrayToGraphql(data.status ? [data.status] : [])}` : ''}\n    ${data?.beginDateAt ? `beginDateAt: \"${data.beginDateAt}\"` : ''}\n    ${data?.endDateAt ? `endDateAt: \"${data.endDateAt}\"` : ''}\n    orderBy: \"${data?.orderBy}\"\n    ${data?.beginDueDateAt ? `beginDueDateAt: \"${data.beginDueDateAt}\"` : ''}\n    ${data?.endDueDateAt ? `endDueDateAt: \"${data.endDueDateAt}\"` : ''}\n    ${data?.companyIds ? `companyIds: ${convertArrayToGraphql(data.companyIds || [])}` : ''}\n  ){\n    totalCount,\n    pageInfo{\n      hasNextPage,\n      hasPreviousPage,\n    },\n    edges{\n      node {\n        id,\n        createdAt,\n        updatedAt,\n        storeHash,\n        customerId,\n        externalId,\n        invoiceNumber,\n        dueDate,\n        orderNumber,\n        purchaseOrderNumber,\n        notAllowedPay,\n        details,\n        status,\n        pendingPaymentCount,\n        purchaseOrderNumber,\n        openBalance {\n          code,\n          value,\n        },\n        originalBalance {\n          code,\n          value,\n        },\n        companyInfo {\n          companyId,\n          companyName,\n          companyAddress,\n          companyCountry,\n          companyState,\n          companyCity,\n          companyZipCode,\n          phoneNumber,\n          bcId,\n        },\n        orderUserId,\n      }\n    }\n  }\n}`;\n\nconst invoiceStats = (status: number | string, decimalPlaces: number, companyIds: number[]) => `\nquery GetInvoiceStats {\n  invoiceStats (\n    ${status === '' ? '' : `status: ${status},`}\n    decimalPlaces: ${decimalPlaces}\n    ${companyIds.length ? `companyIds: ${convertArrayToGraphql(companyIds || [])}` : ''}\n  ){\n    totalBalance,\n    overDueBalance,\n  }\n}`;\n\nconst getInvoiceDownloadPDF = (invoiceId: number, isPayNow: boolean) => `\nmutation GetInvoicePDFUrl {\n  invoicePdf (\n    invoiceId: ${invoiceId}\n    ${isPayNow ? `isPayNow: ${isPayNow}` : ''}\n  ){\n    url,\n  }\n}`;\n\nconst invoiceCreateBcCart = (data: any) => `\nmutation CreateCart {\n  invoiceCreateBcCart (\n    bcCartData: {\n      lineItems: ${convertArrayToGraphql(data.lineItems)},\n      currency: \"${data.currency}\"\n      details: {\n        memo: \"\"\n      }\n    }\n  ) {\n    result {\n      checkoutUrl\n      cartId\n    }\n  }\n}`;\n\nconst receiptLine = (id: number) => `\nquery GetInvoicePaymentHistory {\n  allReceiptLines (\n    invoiceId: \"${id}\"\n    first: 50\n    offset: 0\n  ) {\n    edges {\n      node {\n        id\n        paymentType\n        invoiceId\n        amount\n        transactionType\n        referenceNumber\n        createdAt\n      }\n    }\n    totalCount\n  }\n}`;\n\nconst invoiceDetail = (invoiceId: number) => `\nquery GetInvoiceDetails {\n  invoice (\n    invoiceId: ${invoiceId}\n  ) {\n    id,\n    createdAt,\n    updatedAt,\n    storeHash,\n    customerId,\n    externalId,\n    invoiceNumber,\n    dueDate,\n    orderNumber,\n    purchaseOrderNumber,\n    notAllowedPay,\n    details,\n    status,\n    pendingPaymentCount,\n    purchaseOrderNumber,\n    openBalance {\n      code,\n      value,\n    },\n    originalBalance {\n      code,\n      value,\n    },\n  }\n}`;\n\nconst invoiceReceipt = (id: number) => `\nquery GetInvoiceReceipt {\n  receipt (\n    id: ${id}\n  ) {\n    id,\n    createdAt,\n    updatedAt,\n    storeHash,\n    customerId,\n    externalId,\n    externalCustomerId,\n    totalCode,\n    totalAmount,\n    payerName,\n    payerCustomerId,\n    details,\n    paymentId,\n    transactionType,\n    paymentType,\n    referenceNumber,\n    receiptLineSet {\n      edges {\n        node {\n          id,\n          createdAt,\n          updatedAt,\n          storeHash,\n          customerId,\n          externalId,\n          externalCustomerId,\n          receiptId,\n          invoiceId,\n          amountCode,\n          amount,\n          paymentStatus,\n          paymentType,\n          invoiceNumber,\n          paymentId,\n          transactionType,\n          referenceNumber,\n        }\n      }\n    }\n  }\n}`;\n\nconst exportInvoices = `\nmutation ExportInvoicesAsCSV ($invoiceFilterData: InvoiceFilterDataType!, $lang: String!) {\n  invoicesExport (\n    invoiceFilterData: $invoiceFilterData,\n    lang: $lang,\n  ) {\n    url\n  }\n}`;\n\nexport const getInvoiceList = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: invoiceList(data),\n  });\n\nexport const invoiceDownloadPDF = (invoiceId: number, isPayNow: boolean) =>\n  B3Request.graphqlB2B({\n    query: getInvoiceDownloadPDF(invoiceId, isPayNow),\n  });\n\nexport const getInvoiceCheckoutUrl = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: invoiceCreateBcCart(data),\n  });\n\nexport const getInvoicePaymentHistory = (id: number) =>\n  B3Request.graphqlB2B({\n    query: receiptLine(id),\n  });\n\nexport const getInvoiceDetail = (id: number) =>\n  B3Request.graphqlB2B({\n    query: invoiceDetail(id),\n  });\n\nexport const getInvoicePaymentInfo = (id: number) =>\n  B3Request.graphqlB2B({\n    query: invoiceReceipt(id),\n  });\n\nexport const exportInvoicesAsCSV = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: exportInvoices,\n    variables: data,\n  });\n\nexport const getInvoiceStats = (\n  status: number | string,\n  decimalPlaces: number,\n  companyIds: number[],\n) =>\n  B3Request.graphqlB2B({\n    query: invoiceStats(status, decimalPlaces, companyIds),\n  });\n","import round from 'lodash-es/round';\n\nimport { getInvoiceCheckoutUrl } from '@/shared/service/b2b';\nimport { BcCartData } from '@/types/invoice';\nimport { attemptCheckoutLoginAndRedirect } from '@/utils/b3checkout';\nimport b2bLogger from '@/utils/b3Logger';\n\nconst getCheckoutUrlAndCart = async (params: BcCartData) => {\n  const {\n    invoiceCreateBcCart: {\n      result: { checkoutUrl, cartId },\n    },\n  } = await getInvoiceCheckoutUrl(params);\n\n  return {\n    checkoutUrl,\n    cartId,\n  };\n};\n\nexport const gotoInvoiceCheckoutUrl = async (\n  params: BcCartData,\n  platform: string,\n  isReplaceCurrentUrl?: boolean,\n) => {\n  const { checkoutUrl, cartId } = await getCheckoutUrlAndCart(params);\n  const handleStencil = () => {\n    if (isReplaceCurrentUrl) {\n      window.location.replace(checkoutUrl);\n    } else {\n      window.location.href = checkoutUrl;\n    }\n  };\n\n  if (platform === 'bigcommerce') {\n    handleStencil();\n    return;\n  }\n\n  if (platform === 'catalyst') {\n    window.location.assign(`/checkout?cartId=${cartId}`);\n    return;\n  }\n\n  try {\n    await attemptCheckoutLoginAndRedirect(cartId, checkoutUrl, isReplaceCurrentUrl);\n  } catch (e) {\n    b2bLogger.error(e);\n    handleStencil();\n  }\n};\n\nexport const formattingNumericValues = (value: number, decimalPlaces: number) =>\n  round(Number(value), decimalPlaces).toFixed(decimalPlaces);\n"],"names":["invoiceList","data","q","first","offset","status","convertArrayToGraphql","beginDateAt","endDateAt","orderBy","beginDueDateAt","endDueDateAt","companyIds","invoiceStats","decimalPlaces","length","getInvoiceDownloadPDF","invoiceId","isPayNow","invoiceCreateBcCart","lineItems","currency","receiptLine","id","invoiceReceipt","getCheckoutUrlAndCart","B3Request","graphqlB2B","query","exports","variables","async","result","checkoutUrl","cartId","params","platform","isReplaceCurrentUrl","handleStencil","window","location","replace","href","attemptCheckoutLoginAndRedirect","e","b2bLogger","error","assign","value","round","Number","toFixed"],"mappings":"+VAGA,MAAMA,EAAeC,GAA2B,qDAGjCA,EAAKC,GAAK,mBACZD,EAAKE,sBACJF,EAAKG,gBACbH,GAAMI,OAAS,WAAWC,EAAsBL,EAAKI,OAAS,CAACJ,EAAKI,QAAU,MAAQ,WACtFJ,GAAMM,YAAc,iBAAiBN,EAAKM,eAAiB,WAC3DN,GAAMO,UAAY,eAAeP,EAAKO,aAAe,qBAC3CP,GAAMQ,iBAChBR,GAAMS,eAAiB,oBAAoBT,EAAKS,kBAAoB,WACpET,GAAMU,aAAe,kBAAkBV,EAAKU,gBAAkB,WAC9DV,GAAMW,WAAa,eAAeN,EAAsBL,EAAKW,YAAc,MAAQ,23BAiDnFC,EAAeA,CAACR,EAAyBS,EAAuBF,IAAyB,oDAG9E,KAAXP,EAAgB,GAAK,WAAWA,4BACjBS,UACfF,EAAWG,OAAS,eAAeT,EAAsBM,GAAc,MAAQ,2DAO/EI,EAAwBA,CAACC,EAAmBC,IAAsB,iEAGvDD,UACXC,EAAW,aAAaA,IAAa,6BAMrCC,EAAuBlB,GAAc,yFAIxBK,EAAsBL,EAAKmB,iCAC3BnB,EAAKoB,qIAalBC,EAAeC,GAAe,4EAGlBA,sPAkDZC,EAAkBD,GAAe,qDAG7BA,ywBCzJJE,SD+MyBxB,GAC7ByB,EAAUC,WAAW,CACnBC,MAAO5B,EAAYC,MAGV4B,EAAA,IAAqB,CAACZ,EAAmBC,IACpDQ,EAAUC,WAAW,CACnBC,MAAOZ,EAAsBC,EAAWC,YAQHK,GACvCG,EAAUC,WAAW,CACnBC,MAAON,EAAYC,YAGUA,IAC/BG,SAAUC,WAAW,CACnBC,OA9GmBX,EA8GEM,EA9GoB,4DAG5BN,kZAHMA,cAiHeM,GACpCG,EAAUC,WAAW,CACnBC,MAAOJ,EAAeD,YAGUtB,GAClCyB,EAAUC,WAAW,CACnBC,MA1CmB,0MA2CnBE,UAAW7B,WAGgB,CAC7BI,EACAS,EACAF,IAEAc,EAAUC,WAAW,CACnBC,MAAOf,EAAaR,EAAQS,EAAeF,MCzPjBmB,UAC5B,MACEZ,qBACEa,QAAQC,YAAEA,EAAAC,OAAaA,WDsNSjC,ECpNJkC,EDqNhCT,EAAUC,WAAW,CACnBC,MAAOT,EAAoBlB,MAFOA,MClNpC,MAAO,CACLgC,cACAC,kBAIkCH,MACpCI,EACAC,EACAC,KAEA,MAAMJ,YAAEA,EAAAC,OAAaA,SAAiBT,EAAsBU,GACtDG,EAAgBA,KAChBD,EACFE,OAAOC,SAASC,QAAQR,GAExBM,OAAOC,SAASE,KAAOT,GAI3B,GAAiB,gBAAbG,EAKJ,GAAiB,aAAbA,EAKJ,UACQO,EAAgCT,EAAQD,EAAaI,EAC7D,OAASO,GACPC,EAAUC,MAAMF,GAChBN,GACF,MATEC,OAAOC,SAASO,OAAO,oBAAoBb,UAL3CI,MAiBST,EAAA,IAA0B,CAACmB,EAAelC,IACrDmC,EAAMC,OAAOF,GAAQlC,GAAeqC,QAAQrC"}