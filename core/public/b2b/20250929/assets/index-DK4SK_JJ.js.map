{"version":3,"file":"index-DK4SK_JJ.js","sources":["../../src/pages/Invoice/utils/pdf.ts","../../src/pages/Invoice/components/triggerPdfDownload.tsx","../../src/pages/Invoice/components/B3Pulldown.tsx","../../src/pages/Invoice/components/InvoiceFooter.tsx","../../src/pages/Invoice/components/InvoiceStatus.tsx","../../src/pages/Invoice/components/PaymentsHistory.tsx","../../src/pages/Invoice/utils/config.ts","../../src/pages/Invoice/components/PaymentSuccess.tsx","../../src/pages/Invoice/components/PrintTemplate.tsx","../../src/pages/Invoice/InvoiceItemCard.tsx","../../src/pages/Invoice/index.tsx"],"sourcesContent":["import { invoiceDownloadPDF } from '@/shared/service/b2b';\n\nconst analyzePDFUrl = (url: string): Promise<string> =>\n  new Promise((resolve, reject) => {\n    fetch(url)\n      .then((res) => res.blob())\n      .then((response) => {\n        const blob = new Blob([response], { type: 'application/pdf' });\n\n        const invoicePDFUrl = window.URL.createObjectURL(blob);\n\n        resolve(invoicePDFUrl);\n      })\n      .catch((e) => {\n        reject(e);\n      });\n  });\n\nexport const getInvoiceDownloadPDFUrl = async (\n  invoiceId: string,\n  isPayNow = false,\n): Promise<string> => {\n  const {\n    invoicePdf: { url },\n  } = await invoiceDownloadPDF(Number(invoiceId), isPayNow);\n\n  return url;\n};\n\nexport const handlePrintPDF = async (invoiceId: string, isPayNow = false): Promise<string> => {\n  let url = '';\n  try {\n    url = await getInvoiceDownloadPDFUrl(invoiceId, isPayNow);\n    const pdfUrl = await analyzePDFUrl(url);\n\n    return pdfUrl;\n  } catch (error) {\n    return url;\n  }\n};\n","export function triggerPdfDownload(url: string, fileName: string) {\n  const a = document.createElement('a');\n  a.href = url;\n  a.target = '_blank';\n  a.download = fileName;\n  a.click();\n}\n","import { useEffect, useRef, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { MoreHoriz as MoreHorizIcon } from '@mui/icons-material';\nimport { IconButton, Menu, MenuItem } from '@mui/material';\nimport { styled } from '@mui/material/styles';\n\nimport { useB3Lang } from '@/lib/lang';\nimport { rolePermissionSelector, useAppSelector } from '@/store';\nimport { InvoiceList } from '@/types/invoice';\nimport { b2bPermissionsMap, snackbar, verifyLevelPermission } from '@/utils';\n\nimport { gotoInvoiceCheckoutUrl } from '../utils/payment';\nimport { getInvoiceDownloadPDFUrl, handlePrintPDF } from '../utils/pdf';\n\nimport { triggerPdfDownload } from './triggerPdfDownload';\n\nconst StyledMenu = styled(Menu)(() => ({\n  '& .MuiPaper-elevation': {\n    boxShadow:\n      '0px 1px 0px -1px rgba(0, 0, 0, 0.1), 0px 1px 6px rgba(0, 0, 0, 0.07), 0px 1px 4px rgba(0, 0, 0, 0.06)',\n    borderRadius: '4px',\n  },\n}));\n\ninterface B3PulldownProps {\n  row: InvoiceList;\n  setIsRequestLoading: (bool: boolean) => void;\n  setInvoiceId: (id: string) => void;\n  handleOpenHistoryModal: (bool: boolean) => void;\n  isCurrentCompany: boolean;\n  invoicePay: boolean;\n}\n\nfunction B3Pulldown({\n  row,\n  setIsRequestLoading,\n  setInvoiceId,\n  handleOpenHistoryModal,\n  isCurrentCompany,\n  invoicePay,\n}: B3PulldownProps) {\n  const platform = useAppSelector(({ global }) => global.storeInfo.platform);\n  const ref = useRef<HTMLButtonElement | null>(null);\n  const [isOpen, setIsOpen] = useState(false);\n  const [isPay, setIsPay] = useState<boolean>(true);\n\n  const navigate = useNavigate();\n\n  const b3Lang = useB3Lang();\n\n  const { invoicePayPermission, purchasabilityPermission } = useAppSelector(rolePermissionSelector);\n  const { getOrderPermission: getOrderPermissionCode } = b2bPermissionsMap;\n\n  const [isCanViewOrder, setIsCanViewOrder] = useState<boolean>(false);\n\n  const close = () => {\n    setIsOpen(false);\n  };\n\n  const handleMoreActionsClick = () => {\n    const { id } = row;\n    setInvoiceId(id);\n    setIsOpen(true);\n  };\n\n  const handleViewInvoice = async (isPayNow: boolean) => {\n    const { id } = row;\n\n    close();\n\n    setIsRequestLoading(true);\n\n    const pdfUrl = await handlePrintPDF(id, isPayNow);\n\n    setIsRequestLoading(false);\n\n    if (!pdfUrl) {\n      snackbar.error('pdf url resolution error');\n      return;\n    }\n\n    const { href } = window.location;\n    if (!href.includes('invoice')) {\n      return;\n    }\n\n    window.open(pdfUrl, '_blank', 'fullscreen=yes');\n  };\n\n  const handleViewOrder = () => {\n    const { orderNumber } = row;\n    close();\n    navigate(`/orderDetail/${orderNumber}`);\n  };\n\n  const handlePay = async () => {\n    close();\n\n    const { openBalance, originalBalance, id } = row;\n\n    const params = {\n      lineItems: [\n        {\n          invoiceId: Number(id),\n          amount: openBalance.value === '.' ? '0' : `${Number(openBalance.value)}`,\n        },\n      ],\n      currency: openBalance?.code || originalBalance.code,\n    };\n\n    if (openBalance.value === '.' || Number(openBalance.value) === 0) {\n      snackbar.error('The payment amount entered has an invalid value.');\n\n      return;\n    }\n\n    await gotoInvoiceCheckoutUrl(params, platform, false);\n  };\n\n  const viewPaymentHistory = async () => {\n    close();\n    handleOpenHistoryModal(true);\n  };\n\n  const handleDownloadPDF = async () => {\n    const { id } = row;\n\n    close();\n    setIsRequestLoading(true);\n    const url = await getInvoiceDownloadPDFUrl(id);\n\n    setIsRequestLoading(false);\n\n    triggerPdfDownload(url, 'file.pdf');\n  };\n\n  useEffect(() => {\n    const { openBalance, orderUserId, companyInfo } = row;\n    const payPermissions =\n      Number(openBalance.value) > 0 && invoicePayPermission && purchasabilityPermission;\n\n    const isPayInvoice = isCurrentCompany ? payPermissions : payPermissions && invoicePay;\n    setIsPay(isPayInvoice);\n\n    const viewOrderPermission = verifyLevelPermission({\n      code: getOrderPermissionCode,\n      companyId: Number(companyInfo.companyId),\n      userId: Number(orderUserId),\n    });\n\n    setIsCanViewOrder(viewOrderPermission);\n    // disabling as we only need to run this once and values at starting render are good enough\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <IconButton\n        onClick={handleMoreActionsClick}\n        ref={ref}\n        aria-label={b3Lang('invoice.actions.moreActions')}\n        aria-haspopup=\"menu\"\n      >\n        <MoreHorizIcon />\n      </IconButton>\n      <StyledMenu\n        id=\"basic-menu\"\n        anchorEl={ref.current}\n        open={isOpen}\n        onClose={close}\n        MenuListProps={{\n          'aria-labelledby': 'basic-button',\n        }}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'right',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n      >\n        <MenuItem\n          key=\"View-invoice\"\n          sx={{\n            color: 'primary.main',\n          }}\n          onClick={() =>\n            handleViewInvoice(row.status !== 2 && invoicePayPermission && purchasabilityPermission)\n          }\n        >\n          {b3Lang('invoice.actions.viewInvoice')}\n        </MenuItem>\n        {isCanViewOrder && (\n          <MenuItem\n            key=\"View-Order\"\n            sx={{\n              color: 'primary.main',\n            }}\n            onClick={handleViewOrder}\n          >\n            {b3Lang('invoice.actions.viewOrder')}\n          </MenuItem>\n        )}\n\n        {row.status !== 0 && (\n          <MenuItem\n            key=\"View-payment-history\"\n            sx={{\n              color: 'primary.main',\n            }}\n            onClick={viewPaymentHistory}\n          >\n            {b3Lang('invoice.actions.viewPaymentHistory')}\n          </MenuItem>\n        )}\n        {isPay && (\n          <MenuItem\n            key=\"Pay\"\n            sx={{\n              color: 'primary.main',\n            }}\n            onClick={handlePay}\n          >\n            {b3Lang('invoice.actions.pay')}\n          </MenuItem>\n        )}\n        <MenuItem\n          key=\"Print\"\n          sx={{\n            color: 'primary.main',\n          }}\n          onClick={() =>\n            handleViewInvoice(row.status !== 2 && invoicePayPermission && purchasabilityPermission)\n          }\n        >\n          {b3Lang('invoice.actions.print')}\n        </MenuItem>\n        <MenuItem\n          key=\"Download\"\n          sx={{\n            color: 'primary.main',\n          }}\n          onClick={() => handleDownloadPDF()}\n        >\n          {b3Lang('invoice.actions.download')}\n        </MenuItem>\n      </StyledMenu>\n    </>\n  );\n}\n\nexport default B3Pulldown;\n","import { useEffect, useState } from 'react';\nimport { Box, Button, Grid, Typography } from '@mui/material';\n\nimport { useMobile } from '@/hooks';\nimport { useB3Lang } from '@/lib/lang';\nimport { useAppSelector } from '@/store';\nimport { BcCartData, BcCartDataLineItem, InvoiceListNode } from '@/types/invoice';\nimport { handleGetCorrespondingCurrencyToken, snackbar } from '@/utils';\n\nimport { formattingNumericValues, gotoInvoiceCheckoutUrl } from '../utils/payment';\n\ninterface InvoiceFooterProps {\n  selectedPay: CustomFieldItems;\n  decimalPlaces: number;\n}\n\nfunction InvoiceFooter(props: InvoiceFooterProps) {\n  const platform = useAppSelector(({ global }) => global.storeInfo.platform);\n  const b3Lang = useB3Lang();\n  const [isMobile] = useMobile();\n  const [selectedAccount, setSelectedAccount] = useState<number | string>(0);\n  const [currentToken, setCurrentToken] = useState<string>('$');\n\n  const isAgenting = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.isAgenting);\n\n  const containerStyle = isMobile\n    ? {\n        alignItems: 'flex-start',\n        flexDirection: 'column',\n      }\n    : {\n        alignItems: 'center',\n      };\n\n  const { selectedPay, decimalPlaces } = props;\n\n  const handlePay = async () => {\n    const lineItems: BcCartDataLineItem[] = [];\n    let currency = 'SGD';\n\n    if (selectedPay.length > 0) {\n      selectedPay.forEach((item: InvoiceListNode) => {\n        const {\n          node: { id, openBalance, originalBalance },\n        } = item;\n\n        const currentValue =\n          formattingNumericValues(Number(openBalance.originValue), decimalPlaces) ===\n          openBalance.value\n            ? Number(openBalance.originValue)\n            : Number(openBalance.value);\n        lineItems.push({\n          invoiceId: Number(id),\n          amount: openBalance.value === '.' ? '0' : `${Number(currentValue)}`,\n        });\n\n        currency = openBalance?.code || originalBalance.code;\n      });\n\n      const badItem = lineItems.find(\n        (item: CustomFieldItems) => item.amount === '.' || Number(item.amount) === 0,\n      );\n      if (badItem) {\n        snackbar.error(b3Lang('invoice.footer.invalidNameError'));\n\n        return;\n      }\n\n      const params: BcCartData = {\n        lineItems,\n        currency,\n      };\n\n      await gotoInvoiceCheckoutUrl(params, platform, false);\n    }\n  };\n\n  useEffect(() => {\n    if (selectedPay.length > 0) {\n      const handleStatisticsInvoiceAmount = (checkedArr: CustomFieldItems) => {\n        let amount = 0;\n\n        checkedArr.forEach((item: InvoiceListNode) => {\n          const {\n            node: { openBalance },\n          } = item;\n          amount += openBalance.value === '.' ? 0 : Number(openBalance.value);\n        });\n\n        setSelectedAccount(formattingNumericValues(amount, decimalPlaces));\n      };\n      const {\n        node: { openBalance },\n      } = selectedPay[0];\n\n      const token = handleGetCorrespondingCurrencyToken(openBalance.code);\n      setCurrentToken(token);\n      handleStatisticsInvoiceAmount(selectedPay);\n    }\n  }, [decimalPlaces, selectedPay]);\n\n  return (\n    <Grid\n      sx={{\n        position: 'fixed',\n        bottom: isMobile && isAgenting ? '52px' : 0,\n        left: 0,\n        backgroundColor: '#fff',\n        width: '100%',\n        padding: isMobile ? '0 0 1rem 0' : '0 40px 1rem 40px',\n        height: isMobile ? '8rem' : 'auto',\n        marginLeft: 0,\n        display: 'flex',\n        flexWrap: 'nowrap',\n        zIndex: '999',\n      }}\n      container\n      spacing={2}\n    >\n      <Grid\n        item\n        sx={{\n          display: isMobile ? 'none' : 'block',\n          width: '290px',\n          paddingLeft: '20px',\n        }}\n      />\n      <Grid\n        item\n        sx={\n          isMobile\n            ? {\n                flexBasis: '100%',\n              }\n            : {\n                flexBasis: '690px',\n                flexGrow: 1,\n              }\n        }\n      >\n        <Box\n          sx={{\n            width: '100%',\n            pr: '20px',\n            display: 'flex',\n            zIndex: '999',\n            justifyContent: 'space-between',\n            ...containerStyle,\n          }}\n        >\n          <Typography\n            sx={{\n              color: '#000000',\n              fontSize: '16px',\n              fontWeight: '400',\n            }}\n          >\n            {b3Lang('invoice.footer.invoiceSelected', {\n              invoices: selectedPay.length,\n            })}\n          </Typography>\n          <Box\n            sx={{\n              display: 'flex',\n              alignItems: 'center',\n              flexWrap: isMobile ? 'wrap' : 'nowrap',\n              width: isMobile ? '100%' : 'auto',\n            }}\n          >\n            <Typography\n              variant=\"h6\"\n              sx={{\n                fontSize: '16px',\n                fontWeight: '700',\n                color: '#000000',\n              }}\n            >\n              {b3Lang('invoice.footer.totalPayment', {\n                total: `${currentToken}${selectedAccount}`,\n              })}\n            </Typography>\n            <Box\n              sx={{\n                display: 'flex',\n                alignItems: 'center',\n                marginTop: isMobile ? '0.5rem' : 0,\n                width: isMobile ? '100%' : 'auto',\n              }}\n            >\n              <Button\n                variant=\"contained\"\n                sx={{\n                  marginLeft: isMobile ? 0 : '1rem',\n                  width: isMobile ? '100%' : 'auto',\n                }}\n                onClick={() => {\n                  handlePay();\n                }}\n              >\n                {b3Lang('invoice.footer.payInvoices')}\n              </Button>\n            </Box>\n          </Box>\n        </Box>\n      </Grid>\n      <Grid\n        item\n        sx={\n          isMobile\n            ? {\n                flexBasis: '100%',\n                display: isMobile ? 'none' : 'block',\n              }\n            : {\n                flexBasis: '0',\n                display: isMobile ? 'none' : 'block',\n              }\n        }\n      />\n    </Grid>\n  );\n}\n\nexport default InvoiceFooter;\n","import { B3Tag } from '@/components';\nimport { useB3Lang } from '@/lib/lang';\n\ninterface StatusProps {\n  code: InvoiceStatusCode;\n}\n\ninterface InvoiceStatusProps {\n  [key: string]: {\n    [key: string]: string;\n  };\n}\n\nexport enum InvoiceStatusCode {\n  Open = 0,\n  PartiallyPaid = 1,\n  Paid = 2,\n  Overdue = 3,\n}\n\nexport default function InvoiceStatus(props: StatusProps) {\n  const { code } = props;\n  const b3Lang = useB3Lang();\n\n  const getInvoiceStatus = (code: number) => {\n    const invoiceStatus: InvoiceStatusProps = {\n      [InvoiceStatusCode.Open]: {\n        textColor: '#000000',\n        name: b3Lang('invoice.filterStatus.open'),\n        color: '#F1C224',\n      },\n      [InvoiceStatusCode.PartiallyPaid]: {\n        textColor: '#FFFFFF',\n        name: b3Lang('invoice.filterStatus.partiallyPaid'),\n        color: '#516FAE',\n      },\n      [InvoiceStatusCode.Paid]: {\n        textColor: '#000000',\n        name: b3Lang('invoice.filterStatus.paid'),\n        color: '#C4DD6C',\n      },\n      [InvoiceStatusCode.Overdue]: {\n        textColor: '#FFFFFF',\n        name: b3Lang('invoice.filterStatus.overdue'),\n        color: '#D32F2F',\n      },\n    };\n\n    const statusInfo = invoiceStatus[code] || {};\n\n    return statusInfo;\n  };\n\n  const status = getInvoiceStatus(code);\n\n  return status.name ? (\n    <B3Tag color={status.color} textColor={status.textColor}>\n      {status.name}\n    </B3Tag>\n  ) : null;\n}\n","import { useEffect, useState } from 'react';\nimport { Box, Card, CardContent, Typography } from '@mui/material';\n\nimport { B3NoData } from '@/components';\nimport B3Dialog from '@/components/B3Dialog';\nimport B3Spin from '@/components/spin/B3Spin';\nimport { useMobile } from '@/hooks';\nimport { useB3Lang } from '@/lib/lang';\nimport { getInvoicePaymentHistory } from '@/shared/service/b2b';\nimport { displayFormat, handleGetCorrespondingCurrency } from '@/utils';\n\ninterface PaymentsHistoryProps {\n  open: boolean;\n  setOpen: (bool: boolean) => void;\n  currentInvoiceId: string;\n}\n\ninterface PaymentsHistoryList {\n  node: InvoiceData;\n}\n\ninterface InvoiceData {\n  id: string;\n  paymentType: string;\n  invoiceId: number;\n  amount: {\n    code: string;\n    value: string;\n  };\n  transactionType: string;\n  referenceNumber: string;\n  createdAt: number;\n}\n\nfunction Title({ title }: { title: string }) {\n  return (\n    <Typography\n      sx={{\n        fontWeight: 'bold',\n        pr: '5px',\n      }}\n    >\n      {title}:\n    </Typography>\n  );\n}\n\nfunction HistoryList({ list }: { list: PaymentsHistoryList[] }) {\n  return (\n    <>\n      {list.map((item: PaymentsHistoryList) => {\n        const {\n          node: { createdAt, amount, paymentType, transactionType, referenceNumber, id },\n        } = item;\n\n        return (\n          <Card\n            key={id}\n            sx={{\n              mb: '10px',\n            }}\n          >\n            <CardContent\n              sx={{\n                color: '#313440',\n                wordBreak: 'break-word',\n              }}\n            >\n              <Box\n                sx={{\n                  display: 'flex',\n                }}\n              >\n                <Title title=\"Date received\" />\n                <Typography variant=\"body1\">{`${displayFormat(Number(createdAt))}`}</Typography>\n              </Box>\n              <Box\n                sx={{\n                  display: 'flex',\n                }}\n              >\n                <Title title=\"Amount\" />\n                <Typography variant=\"body1\">\n                  {handleGetCorrespondingCurrency(amount.code, Number(amount?.value || 0))}\n                </Typography>\n              </Box>\n              <Box\n                sx={{\n                  display: 'flex',\n                }}\n              >\n                <Title title=\"Transaction type\" />\n                <Typography variant=\"body1\">{transactionType}</Typography>\n              </Box>\n              <Box\n                sx={{\n                  display: 'flex',\n                }}\n              >\n                <Title title=\"Payment type\" />\n                <Typography variant=\"body1\">{paymentType}</Typography>\n              </Box>\n              <Box\n                sx={{\n                  display: 'flex',\n                }}\n              >\n                <Title title=\"Reference\" />\n                <Typography variant=\"body1\">{referenceNumber || '–'}</Typography>\n              </Box>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </>\n  );\n}\n\nfunction PaymentsHistory({ open, setOpen, currentInvoiceId }: PaymentsHistoryProps) {\n  const b3Lang = useB3Lang();\n  const [isMobile] = useMobile();\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const [list, setList] = useState<PaymentsHistoryList[] | []>([]);\n\n  useEffect(() => {\n    const init = async () => {\n      setLoading(true);\n      const {\n        allReceiptLines: { edges = [] },\n      } = await getInvoicePaymentHistory(Number(currentInvoiceId));\n\n      setList(edges);\n      setLoading(false);\n    };\n\n    if (open && currentInvoiceId) {\n      init();\n    }\n  }, [open, currentInvoiceId]);\n\n  return (\n    <B3Dialog\n      isOpen={open}\n      leftSizeBtn=\"\"\n      rightSizeBtn=\"ok\"\n      title={b3Lang('invoice.paymentHistory.title')}\n      showLeftBtn={false}\n      handRightClick={() => setOpen(false)}\n    >\n      <Box\n        sx={{\n          width: isMobile ? '100%' : '384px',\n          maxHeight: '600px',\n        }}\n      >\n        <B3Spin isSpinning={loading}>\n          <Box\n            sx={{\n              display: 'flex',\n              flexDirection: 'column',\n              flex: 1,\n            }}\n          >\n            {list.length ? <HistoryList list={list} /> : <B3NoData />}\n          </Box>\n        </B3Spin>\n      </Box>\n    </B3Dialog>\n  );\n}\n\nexport default PaymentsHistory;\n","// NORMAL:   ;  DETAIL:  ; CHECKOUT:  ;\nconst InvoiceListType = {\n  NORMAL: 'normal',\n  DETAIL: 'detail',\n  CHECKOUT: 'checkout',\n};\n\n// invoice status\n// (0, \"open\"), (1, \"partial paid\"), (2, \"Paid\")\nconst invoiceStatus = [\n  {\n    key: 'open',\n    value: 0,\n    label: 'Open',\n  },\n  {\n    key: 'partialPaid',\n    value: 1,\n    label: 'Partially paid',\n  },\n  {\n    key: 'paid',\n    value: 2,\n    label: 'Paid',\n  },\n  {\n    key: 'overdue',\n    value: 3,\n    label: 'Overdue',\n  },\n];\n\nexport const filterFormConfig = [\n  {\n    name: 'status',\n    label: 'Status',\n    required: false,\n    default: '',\n    fieldType: 'dropdown',\n    xs: 12,\n    variant: 'filled',\n    size: 'small',\n    options: invoiceStatus,\n  },\n];\n\nexport const filterFormConfigsTranslationVariables: { [key: string]: string } = {\n  status: 'invoice.filterStatus.title',\n  open: 'invoice.filterStatus.open',\n  partialPaid: 'invoice.filterStatus.partiallyPaid',\n  paid: 'invoice.filterStatus.paid',\n  overdue: 'invoice.filterStatus.overdue',\n};\n\nexport const defaultSortKey = 'id';\n\nexport const sortIdArr: { [key: string]: string } = {\n  id: 'invoiceNumber',\n  orderNumber: 'orderNumber',\n  createdAt: 'createdAt',\n  updatedAt: 'dueDate',\n  originalBalance: 'originalBalanceAmount',\n  openBalance: 'openBalanceAmount',\n  status: 'status',\n};\n\nexport const exportOrderByArr: { [key: string]: string } = {\n  invoiceNumber: 'invoice_number',\n  orderNumber: 'order_number',\n  createdAt: 'created_at',\n  dueDate: 'due_date',\n  originalBalanceAmount: 'original_balance_amount',\n  openBalanceAmount: 'open_balance_amount',\n};\nexport default InvoiceListType;\n","import { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Box, Button, Typography } from '@mui/material';\n\nimport { B3NoData } from '@/components';\nimport B3Dialog from '@/components/B3Dialog';\nimport B3Spin from '@/components/spin/B3Spin';\nimport { useMobile } from '@/hooks';\nimport { useB3Lang } from '@/lib/lang';\nimport { getInvoicePaymentInfo } from '@/shared/service/b2b';\nimport { InvoiceSuccessData, ReceiptLineSet } from '@/types/invoice';\nimport { displayFormat, handleGetCorrespondingCurrency } from '@/utils';\n\nimport InvoiceListType from '../utils/config';\n\ninterface PaymentSuccessKeysProps {\n  key: string;\n  label: string;\n  type: string;\n  isRow: boolean;\n  idLang: string;\n}\n\nfunction Title({ title, withColon = true }: { title: string; withColon?: boolean }) {\n  return (\n    <Typography\n      sx={{\n        fontWeight: 'bold',\n        pr: '5px',\n      }}\n    >\n      {withColon ? `${title}:` : title}\n    </Typography>\n  );\n}\n\ninterface RowProps {\n  isRow?: boolean;\n  type: string;\n  value: string | number;\n  label: string;\n  code: string;\n}\nfunction Row({ isRow = true, type = '', value, label, code }: RowProps) {\n  const getNewVal = (): string | number | Date => {\n    if (type === 'time') {\n      return displayFormat(Number(value)) || '';\n    }\n    if (type === 'currency') {\n      const val = Number(value || 0);\n      const accountValue = handleGetCorrespondingCurrency(code, val);\n      return accountValue;\n    }\n    if (type === 'paymentType') {\n      let val = `${value}`.trim();\n\n      if (value) {\n        val = val.slice(0, 1).toUpperCase() + val.slice(1).toLowerCase();\n      }\n\n      return val;\n    }\n    return value || '–';\n  };\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: isRow ? 'row' : 'column',\n      }}\n    >\n      <Title title={label} />\n      <Typography variant=\"body1\">{`${getNewVal()}`}</Typography>\n    </Box>\n  );\n}\n\nfunction PaymentSuccessList({ list }: { list: InvoiceSuccessData }) {\n  const {\n    receiptLineSet: { edges = [] },\n    details,\n  } = list;\n\n  const comment = details?.paymentDetails?.comment || '';\n\n  const b3Lang = useB3Lang();\n\n  const paymentSuccessKeys = [\n    {\n      key: 'paymentId',\n      label: 'Payment#',\n      type: '',\n      isRow: true,\n      idLang: 'payment.paymentNumber',\n    },\n    {\n      key: 'createdAt',\n      label: 'Payment received on',\n      type: 'time',\n      isRow: true,\n      idLang: 'payment.paymentReceivedOn',\n    },\n    {\n      key: 'transactionType',\n      label: 'Transaction type',\n      type: '',\n      isRow: true,\n      idLang: 'payment.transactionType',\n    },\n    {\n      key: 'paymentType',\n      label: 'Payment type',\n      type: 'paymentType',\n      isRow: true,\n      idLang: 'payment.paymentType',\n    },\n    {\n      key: 'totalAmount',\n      label: 'Payment total',\n      type: 'currency',\n      isRow: true,\n      idLang: 'payment.paymentTotal',\n    },\n    {\n      key: 'referenceNumber',\n      label: 'Reference',\n      type: '',\n      isRow: true,\n      idLang: 'payment.reference',\n    },\n  ] as const satisfies PaymentSuccessKeysProps[];\n\n  return (\n    <Box>\n      {paymentSuccessKeys.map((item) => (\n        <Row\n          key={item.key}\n          isRow={!!item.isRow}\n          type={item.type}\n          value={(list as CustomFieldItems)[item.key]}\n          code={(list as CustomFieldItems)?.totalCode || 'SGD'}\n          label={b3Lang(item.idLang)}\n        />\n      ))}\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          mb: '30px',\n        }}\n      >\n        <Title title={b3Lang('payment.paymentComment')} />\n        <Typography\n          sx={{\n            maxHeight: '50px',\n          }}\n        >\n          {comment}\n        </Typography>\n      </Box>\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n        }}\n      >\n        <Title title={b3Lang('payment.invoicesPaid')} withColon={false} />\n        <Typography variant=\"body1\">{b3Lang('payment.paymentTowardsInvoices')} </Typography>\n      </Box>\n      <Box>\n        <Box\n          sx={{\n            borderBottom: '1px solid #D9DCE9',\n            padding: '20px 15px',\n            display: 'flex',\n            justifyContent: 'space-between',\n            fontWeight: 500,\n          }}\n        >\n          <Typography\n            sx={{\n              fontSize: '14px',\n              fontWeight: '500',\n              color: '#000000',\n            }}\n          >\n            {b3Lang('payment.invoiceNumber')}\n          </Typography>\n          <Typography\n            sx={{\n              fontSize: '14px',\n              fontWeight: '500',\n              color: '#000000',\n            }}\n          >\n            {b3Lang('payment.amountPaid')}\n          </Typography>\n        </Box>\n        {edges.map((item: ReceiptLineSet) => {\n          const {\n            id,\n            invoiceNumber,\n            amount: { value, code },\n          } = item.node;\n          const val = Number(value || 0);\n\n          const accountValue = handleGetCorrespondingCurrency(code, val);\n          return (\n            <Box\n              key={id}\n              sx={{\n                borderBottom: '1px solid #D9DCE9',\n                padding: '20px 15px',\n                display: 'flex',\n                justifyContent: 'space-between',\n              }}\n            >\n              <Typography>{invoiceNumber}</Typography>\n              <Typography>{accountValue}</Typography>\n            </Box>\n          );\n        })}\n      </Box>\n    </Box>\n  );\n}\n\ninterface PaymentSuccessProps {\n  receiptId: number | number;\n  type: string;\n}\n\nfunction PaymentSuccess({ receiptId, type }: PaymentSuccessProps) {\n  const [isMobile] = useMobile();\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const [open, setOpen] = useState<boolean>(false);\n\n  const [detailData, setDetailData] = useState<InvoiceSuccessData | null>(null);\n\n  const navigate = useNavigate();\n\n  const b3Lang = useB3Lang();\n\n  useEffect(() => {\n    const init = async () => {\n      setLoading(true);\n      const { receipt } = await getInvoicePaymentInfo(Number(receiptId));\n\n      setDetailData(receipt);\n      setOpen(true);\n      setLoading(false);\n    };\n\n    if (type === InvoiceListType.CHECKOUT && receiptId) {\n      init();\n    }\n  }, [receiptId, type]);\n\n  const handleCloseClick = () => {\n    setOpen(false);\n    navigate('/invoice');\n  };\n  const customActions = () => (\n    <Button onClick={handleCloseClick} variant=\"text\">\n      {b3Lang('payment.okButton')}\n    </Button>\n  );\n\n  return (\n    <B3Dialog\n      isOpen={open}\n      leftSizeBtn=\"\"\n      customActions={customActions}\n      title={b3Lang('payment.paymentSuccess')}\n      showLeftBtn={false}\n    >\n      <Box\n        sx={{\n          width: isMobile ? '100%' : '384px',\n          maxHeight: '600px',\n        }}\n      >\n        <B3Spin isSpinning={loading}>\n          <Box\n            sx={{\n              display: 'flex',\n              flexDirection: 'column',\n              flex: 1,\n            }}\n          >\n            {detailData ? <PaymentSuccessList list={detailData} /> : <B3NoData />}\n          </Box>\n        </B3Spin>\n      </Box>\n    </B3Dialog>\n  );\n}\n\nexport default PaymentSuccess;\n","import { SyntheticEvent, useEffect, useRef, useState } from 'react';\nimport { Resizable } from 'react-resizable';\nimport { Box } from '@mui/material';\n// cspell:disable-next-line\nimport PDFObject from 'pdfobject';\n\nimport B3Spin from '@/components/spin/B3Spin';\nimport { snackbar } from '@/utils';\n\nimport { handlePrintPDF } from '../utils/pdf';\n\ninterface RowList {\n  id: string;\n  createdAt: number;\n  updatedAt: number;\n}\n\nconst templateMinHeight = 300;\n\ninterface PrintTemplateProps {\n  row: RowList;\n}\n\nfunction PrintTemplate({ row }: PrintTemplateProps) {\n  const container = useRef<HTMLInputElement | null>(null);\n\n  const dom = useRef<HTMLInputElement | null>(null);\n\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const [height, setHeight] = useState<number>(templateMinHeight);\n\n  const onFirstBoxResize = (\n    _: SyntheticEvent<Element, Event>,\n    { size }: { size: { height: number } },\n  ) => {\n    setHeight(size.height);\n  };\n\n  useEffect(() => {\n    const viewPrint = async () => {\n      setLoading(true);\n      const { id: invoiceId } = row;\n\n      const invoicePDFUrl = await handlePrintPDF(invoiceId);\n\n      if (!invoicePDFUrl) {\n        snackbar.error('pdf url resolution error');\n        return;\n      }\n\n      if (!container?.current) return;\n\n      PDFObject.embed(invoicePDFUrl, container.current);\n\n      setLoading(false);\n    };\n\n    viewPrint();\n\n    return () => {\n      container.current = null;\n    };\n  }, [row]);\n\n  return (\n    <B3Spin isSpinning={loading}>\n      <Box\n        ref={dom}\n        sx={{\n          display: 'flex',\n          flexWrap: 'wrap',\n          width: '100%',\n          '& .box': {\n            display: 'flex',\n            flexDirection: 'column',\n            overflow: 'hidden',\n            position: 'relative',\n            width: '100%',\n            '& .react-resizable': {\n              position: 'relative',\n            },\n            '& .react-resizable-handle': {\n              position: 'absolute',\n              width: '100%',\n              height: '30px',\n              backgroundRepeat: 'no-repeat',\n              backgroundOrigin: 'content-box',\n              boxSizing: 'border-box',\n            },\n            '& .react-resizable-handle-s': {\n              cursor: 'ns-resize',\n              bottom: 0,\n            },\n          },\n        }}\n      >\n        <Resizable\n          className=\"box\"\n          height={height}\n          minConstraints={[dom?.current?.offsetWidth || 0, 0]}\n          width={dom.current?.offsetWidth || 0}\n          onResize={onFirstBoxResize}\n          resizeHandles={['s']}\n        >\n          <div style={{ width: '100%', height: `${height}px` }}>\n            <div ref={container} style={{ height: '100%', width: '100%' }} />\n          </div>\n        </Resizable>\n      </Box>\n    </B3Spin>\n  );\n}\n\nexport default PrintTemplate;\n","import { ReactElement, useId } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled from '@emotion/styled';\nimport { Box, Card, CardContent, InputAdornment, TextField, Typography } from '@mui/material';\n\nimport { TableColumnItem } from '@/components/table/B3Table';\nimport { useB3Lang } from '@/lib/lang';\nimport { InvoiceList, InvoiceListNode } from '@/types/invoice';\nimport { currencyFormat, displayFormat } from '@/utils';\n\nimport B3Pulldown from './components/B3Pulldown';\nimport InvoiceStatus from './components/InvoiceStatus';\n\ninterface InvoiceItemCardProps {\n  item: any;\n  checkBox?: (disable: boolean) => ReactElement;\n  handleSetSelectedInvoiceAccount: (value: string, id: string) => void;\n  handleViewInvoice: (id: string, status: string | number, invoiceCompanyId: string) => void;\n  setIsRequestLoading: (bool: boolean) => void;\n  setInvoiceId: (id: string) => void;\n  handleOpenHistoryModal: (bool: boolean) => void;\n  selectedPay: CustomFieldItems | InvoiceListNode[];\n  handleGetCorrespondingCurrency: (code: string) => string;\n  addBottom: boolean;\n  isCurrentCompany: boolean;\n  invoicePay: boolean;\n}\n\nconst StyleCheckoutContainer = styled(Box)(() => ({\n  '& > span': {\n    padding: '0 9px 0 0',\n  },\n}));\n\nexport function InvoiceItemCard(props: InvoiceItemCardProps) {\n  const currentDate = new Date().getTime();\n  const {\n    item,\n    checkBox,\n    handleSetSelectedInvoiceAccount,\n    handleViewInvoice,\n    setIsRequestLoading,\n    setInvoiceId,\n    handleOpenHistoryModal,\n    selectedPay = [],\n    handleGetCorrespondingCurrency,\n    addBottom,\n    isCurrentCompany,\n    invoicePay,\n  } = props;\n  const b3Lang = useB3Lang();\n  const navigate = useNavigate();\n\n  const { id, status, dueDate, openBalance, companyInfo } = item;\n  const currentCode = openBalance.code || 'USD';\n  const currentCurrencyToken = handleGetCorrespondingCurrency(currentCode);\n\n  let statusCode = item.status;\n  if (status === 0 && currentDate > dueDate * 1000) {\n    statusCode = 3;\n  }\n\n  const columnAllItems: TableColumnItem<InvoiceList>[] = [\n    {\n      key: 'orderNumber',\n      title: b3Lang('invoice.invoiceItemCardHeader.order'),\n      render: () => (\n        <Box\n          role=\"button\"\n          sx={{\n            color: '#000000',\n            cursor: 'pointer',\n            textDecoration: 'underline',\n          }}\n          onClick={() => {\n            navigate(`/orderDetail/${item.orderNumber}`);\n          }}\n        >\n          {item?.orderNumber || '-'}\n        </Box>\n      ),\n    },\n    {\n      key: 'createdAt',\n      title: b3Lang('invoice.invoiceItemCardHeader.invoiceDate'),\n      render: () => `${item.createdAt ? displayFormat(Number(item.createdAt)) : '–'}`,\n    },\n    {\n      key: 'updatedAt',\n      title: b3Lang('invoice.invoiceItemCardHeader.dueDate'),\n      render: () => {\n        const { dueDate, status } = item;\n        const isOverdue = currentDate > dueDate * 1000 && status !== 2;\n\n        return (\n          <Typography\n            sx={{\n              color: isOverdue ? '#D32F2F' : 'rgba(0, 0, 0, 0.87)',\n              fontSize: '14px',\n            }}\n          >\n            {`${item.dueDate ? displayFormat(Number(item.dueDate)) : '–'}`}\n          </Typography>\n        );\n      },\n    },\n    {\n      key: 'originalBalance',\n      title: b3Lang('invoice.invoiceItemCardHeader.invoiceTotal'),\n      render: () => {\n        const { originalBalance } = item;\n        const originalAmount = Number(originalBalance.value);\n\n        return currencyFormat(originalAmount || 0);\n      },\n    },\n    {\n      key: 'openBalance',\n      title: b3Lang('invoice.invoiceItemCardHeader.amountDue'),\n      render: () => {\n        const { openBalance } = item;\n\n        const openAmount = Number(openBalance.value);\n\n        return currencyFormat(openAmount || 0);\n      },\n    },\n    {\n      key: 'openBalanceToPay',\n      title: b3Lang('invoice.invoiceItemCardHeader.amountToPay'),\n      render: () => {\n        const { openBalance, id } = item;\n        let valuePrice = openBalance.value;\n        let disabled = true;\n\n        if (selectedPay.length > 0) {\n          const currentSelected = selectedPay.find((item: InvoiceListNode) => {\n            const {\n              node: { id: selectedId },\n            } = item;\n\n            return Number(selectedId) === Number(id);\n          });\n\n          if (currentSelected) {\n            const {\n              node: { openBalance: selectedOpenBalance },\n            } = currentSelected;\n\n            disabled = false;\n            valuePrice = selectedOpenBalance.value;\n\n            if (Number(openBalance.value) === 0) {\n              disabled = true;\n            }\n          }\n        }\n\n        return (\n          <TextField\n            disabled={disabled}\n            variant=\"filled\"\n            value={valuePrice}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment\n                  position=\"start\"\n                  sx={{ padding: '8px 0', marginTop: '0 !important' }}\n                >\n                  {currentCurrencyToken || '$'}\n                </InputAdornment>\n              ),\n            }}\n            sx={{\n              '& input': {\n                paddingTop: '8px',\n              },\n            }}\n            onChange={(e: CustomFieldItems) => {\n              const val = e.target?.value;\n              handleSetSelectedInvoiceAccount(val, id);\n            }}\n            type=\"number\"\n          />\n        );\n      },\n    },\n  ];\n\n  const groupId = useId();\n\n  return (\n    <Card\n      role=\"group\"\n      aria-labelledby={groupId}\n      sx={{\n        marginBottom: selectedPay.length > 0 && addBottom ? '5rem' : 0,\n      }}\n    >\n      <CardContent\n        sx={{\n          color: 'rgba(0, 0, 0, 0.6)',\n        }}\n      >\n        <Box\n          sx={{\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'space-between',\n          }}\n        >\n          <Box\n            sx={{\n              display: 'flex',\n              alignItems: 'center',\n              mb: '0.5rem',\n            }}\n          >\n            <StyleCheckoutContainer>\n              {checkBox && checkBox(!!item?.disableCurrentCheckbox)}\n            </StyleCheckoutContainer>\n            <Typography\n              variant=\"h6\"\n              sx={{\n                color: 'rgba(0, 0, 0, 0.87)',\n              }}\n            >\n              <Box\n                id={groupId}\n                role=\"button\"\n                sx={{\n                  color: '#000000',\n                  cursor: 'pointer',\n                  textDecoration: 'underline',\n                }}\n                onClick={() => {\n                  handleViewInvoice(id, status, companyInfo.companyId);\n                }}\n              >\n                {id || '-'}\n              </Box>\n            </Typography>\n          </Box>\n          <Box sx={{ mb: '0.5rem' }}>\n            <B3Pulldown\n              row={item}\n              setInvoiceId={setInvoiceId}\n              handleOpenHistoryModal={handleOpenHistoryModal}\n              setIsRequestLoading={setIsRequestLoading}\n              isCurrentCompany={isCurrentCompany}\n              invoicePay={invoicePay}\n            />\n          </Box>\n        </Box>\n        <Box sx={{ mb: '1rem' }}>\n          <InvoiceStatus code={statusCode} />\n        </Box>\n\n        {columnAllItems.map((list: CustomFieldItems) => (\n          <Box\n            key={list.key}\n            sx={{\n              display: 'flex',\n              alignItems: 'center',\n              mt: '4px',\n            }}\n          >\n            <Typography\n              sx={{\n                fontWeight: 'bold',\n                color: 'rgba(0, 0, 0, 0.87)',\n                mr: '5px',\n                whiteSpace: 'nowrap',\n              }}\n            >\n              {`${list.title}:`}\n            </Typography>\n            <Box\n              sx={{\n                color: 'black',\n                wordBreak: 'break-all',\n              }}\n            >\n              {list?.render ? list.render() : item[list.key]}\n            </Box>\n          </Box>\n        ))}\n      </CardContent>\n    </Card>\n  );\n}\n","import { useContext, useEffect, useRef, useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { Box, Button, InputAdornment, TextField, Typography } from '@mui/material';\nimport cloneDeep from 'lodash-es/cloneDeep';\n\nimport { B2BAutoCompleteCheckbox } from '@/components';\nimport B3Spin from '@/components/spin/B3Spin';\nimport { B3PaginationTable, GetRequestList } from '@/components/table/B3PaginationTable';\nimport { TableColumnItem } from '@/components/table/B3Table';\nimport { permissionLevels } from '@/constants';\nimport { useMobile, useSort } from '@/hooks';\nimport { useB3Lang } from '@/lib/lang';\nimport { GlobalContext } from '@/shared/global';\nimport { exportInvoicesAsCSV, getInvoiceList, getInvoiceStats } from '@/shared/service/b2b';\nimport { rolePermissionSelector, useAppSelector } from '@/store';\nimport { CustomerRole } from '@/types';\nimport { InvoiceList, InvoiceListNode } from '@/types/invoice';\nimport {\n  b2bPermissionsMap,\n  currencyFormat,\n  currencyFormatInfo,\n  displayFormat,\n  getUTCTimestamp,\n  handleGetCorrespondingCurrencyToken,\n  snackbar,\n  validatePermissionWithComparisonType,\n} from '@/utils';\nimport b2bLogger from '@/utils/b3Logger';\n\nimport B3Filter from '../../components/filter/B3Filter';\n\nimport B3Pulldown from './components/B3Pulldown';\nimport InvoiceFooter from './components/InvoiceFooter';\nimport InvoiceStatus from './components/InvoiceStatus';\nimport PaymentsHistory from './components/PaymentsHistory';\nimport PaymentSuccess from './components/PaymentSuccess';\nimport PrintTemplate from './components/PrintTemplate';\nimport InvoiceListType, {\n  defaultSortKey,\n  exportOrderByArr,\n  filterFormConfig,\n  filterFormConfigsTranslationVariables,\n  sortIdArr,\n} from './utils/config';\nimport { formattingNumericValues } from './utils/payment';\nimport { handlePrintPDF } from './utils/pdf';\nimport { InvoiceItemCard } from './InvoiceItemCard';\n\ninterface FilterSearchProps {\n  [key: string]: string | number | number[] | null;\n  q: string;\n  startValue: number | string;\n  endValue: number | string;\n  companyIds: number[];\n}\n\ninterface PaginationTableRefProps extends HTMLInputElement {\n  getList: () => void;\n  getCacheList: () => void;\n  setCacheAllList: (items?: InvoiceList[]) => void;\n  setList: (items?: InvoiceListNode[]) => void;\n  getSelectedValue: () => void;\n}\n\nconst initFilter = {\n  q: '',\n  first: 10,\n  offset: 0,\n  orderBy: `-${sortIdArr[defaultSortKey]}`,\n  companyIds: [],\n};\n\nfunction useData() {\n  const role = useAppSelector(({ company }) => company.customer.role);\n  const isAgenting = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.isAgenting);\n\n  const companyInfoId = useAppSelector(({ company }) => company.companyInfo.id);\n  const { selectCompanyHierarchyId, isEnabledCompanyHierarchy } = useAppSelector(\n    ({ company }) => company.companyHierarchyInfo,\n  );\n  const salesRepCompanyId = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.id);\n\n  const { invoicePayPermission, purchasabilityPermission } = useAppSelector(rolePermissionSelector);\n  const currentCompanyId =\n    role === CustomerRole.SUPER_ADMIN && isAgenting\n      ? Number(salesRepCompanyId)\n      : Number(companyInfoId);\n\n  const { invoice: invoiceSubViewPermission } = useAppSelector(\n    ({ company }) => company.pagesSubsidiariesPermission,\n  );\n\n  return {\n    isAgenting,\n    selectCompanyHierarchyId,\n    isEnabledCompanyHierarchy,\n    invoicePayPermission,\n    purchasabilityPermission,\n    currentCompanyId,\n    invoiceSubViewPermission,\n  };\n}\n\nfunction Invoice() {\n  const currentDate = new Date().getTime();\n  const b3Lang = useB3Lang();\n\n  const {\n    isAgenting,\n    selectCompanyHierarchyId,\n    isEnabledCompanyHierarchy,\n    invoicePayPermission,\n    purchasabilityPermission,\n    currentCompanyId,\n    invoiceSubViewPermission,\n  } = useData();\n\n  const navigate = useNavigate();\n  const [isMobile] = useMobile();\n  const paginationTableRef = useRef<PaginationTableRefProps | null>(null);\n\n  const { decimal_places: decimalPlaces = 2 } = currencyFormatInfo();\n\n  const [isRequestLoading, setIsRequestLoading] = useState<boolean>(false);\n  const [isOpenHistory, setIsOpenHistory] = useState<boolean>(false);\n  const [currentInvoiceId, setCurrentInvoiceId] = useState<string>('');\n  const [receiptId, setReceiptId] = useState<string>('');\n  const [type, setType] = useState<string>('');\n  const [unpaidAmount, setUnpaidAmount] = useState<number>(0);\n  const [overdueAmount, setOverdueAmount] = useState<number>(0);\n  const [checkedArr, setCheckedArr] = useState<CustomFieldItems | InvoiceListNode[]>([]);\n  const [selectedPay, setSelectedPay] = useState<CustomFieldItems | InvoiceListNode[]>([]);\n  const [list, setList] = useState<InvoiceListNode[]>([]);\n\n  const [filterData, setFilterData] = useState<Partial<FilterSearchProps>>({});\n\n  const [exportCsvText, setExportCsvText] = useState<string>(b3Lang('invoice.exportCsvText'));\n\n  const [filterChangeFlag, setFilterChangeFlag] = useState(false);\n  const [filterLists, setFilterLists] = useState<InvoiceListNode[]>([]);\n  const [selectAllPay, setSelectAllPay] = useState<boolean>(invoicePayPermission);\n\n  const invoiceSubPayPermission = validatePermissionWithComparisonType({\n    level: permissionLevels.COMPANY_SUBSIDIARIES,\n    code: b2bPermissionsMap.invoicePayPermission,\n  });\n\n  const {\n    state: { bcLanguage },\n  } = useContext(GlobalContext);\n\n  const [handleSetOrderBy, order, orderBy] = useSort(\n    sortIdArr,\n    defaultSortKey,\n    filterData,\n    setFilterData,\n  );\n\n  const location = useLocation();\n\n  const isFiltering = (filterData: Partial<FilterSearchProps>) =>\n    Object.keys(filterData).some(\n      (key) => key !== 'first' && key !== 'offset' && key !== 'orderBy' && filterData[key],\n    );\n\n  const cacheFilterLists = (edges: InvoiceListNode[]) => {\n    if (filterChangeFlag) {\n      setFilterLists(edges);\n      setFilterChangeFlag(false);\n      return;\n    }\n\n    if (!filterLists.length) setFilterLists(edges);\n\n    const copyCacheFilterList = [...filterLists];\n\n    edges.forEach((item: InvoiceListNode) => {\n      const option = item?.node || item;\n      const isExist = filterLists.some((cache: InvoiceListNode) => {\n        const cacheOption = cache.node;\n        return cacheOption.id === option.id;\n      });\n\n      if (!isExist) {\n        copyCacheFilterList.push(item);\n      }\n    });\n\n    setFilterLists(copyCacheFilterList);\n  };\n\n  const handleStatisticsInvoiceAmount = async () => {\n    try {\n      setIsRequestLoading(true);\n      const { invoiceStats } = await getInvoiceStats(\n        filterData?.status ? Number(filterData.status) : 0,\n        Number(decimalPlaces),\n        filterData?.companyIds || [],\n      );\n\n      if (invoiceStats) {\n        const { overDueBalance, totalBalance } = invoiceStats;\n        setUnpaidAmount(Number(formattingNumericValues(Number(totalBalance), decimalPlaces)));\n        setOverdueAmount(Number(formattingNumericValues(Number(overDueBalance), decimalPlaces)));\n      }\n    } catch (err) {\n      b2bLogger.error(err);\n    } finally {\n      setIsRequestLoading(false);\n    }\n  };\n\n  const handleChange = (key: string, value: string) => {\n    if (key === 'search') {\n      setFilterData({\n        ...filterData,\n        q: value,\n      });\n      setFilterChangeFlag(true);\n      setType(InvoiceListType.NORMAL);\n    }\n  };\n\n  const handleFilterChange = (value: Partial<FilterSearchProps>) => {\n    const startValue = value?.startValue\n      ? getUTCTimestamp(new Date(value?.startValue).getTime() / 1000)\n      : '';\n\n    const endValue = value?.endValue\n      ? getUTCTimestamp(new Date(value?.endValue).getTime() / 1000, true)\n      : '';\n\n    const status = value?.status === 3 ? 0 : value?.status;\n\n    const search: Partial<FilterSearchProps> = {\n      status: `${status}` || '',\n      beginDateAt: startValue,\n      endDateAt: endValue,\n      beginDueDateAt: value?.status === 0 ? parseInt(`${currentDate / 1000}`, 10) : '',\n      endDueDateAt: value?.status === 3 ? parseInt(`${currentDate / 1000}`, 10) : '',\n    };\n\n    setFilterData({\n      ...filterData,\n      ...search,\n    });\n    setFilterChangeFlag(true);\n    setType(InvoiceListType.NORMAL);\n  };\n\n  const getSelectCheckbox = (selectCheckbox: Array<string | number>) => {\n    if (selectCheckbox.length > 0) {\n      const productList = paginationTableRef.current?.getCacheList() || [];\n\n      const checkedItems = selectCheckbox.map((item: number | string) => {\n        const newItems = productList.find((product: InvoiceListNode) => {\n          const { node } = product;\n\n          return Number(node.id) === Number(item);\n        });\n\n        return newItems;\n      });\n\n      const newEnableItems = checkedItems.filter(\n        (item: InvoiceListNode | undefined) => item && !item.node.disableCurrentCheckbox,\n      );\n      setCheckedArr([...newEnableItems]);\n    } else {\n      setCheckedArr([]);\n    }\n  };\n\n  const handleViewInvoice = async (\n    id: string,\n    status: string | number,\n    invoiceCompanyId: string,\n  ) => {\n    try {\n      const invoicePay =\n        Number(invoiceCompanyId) === Number(currentCompanyId)\n          ? invoicePayPermission\n          : invoiceSubPayPermission;\n      setIsRequestLoading(true);\n      const isPayNow = purchasabilityPermission && invoicePay && status !== 2;\n      const pdfUrl = await handlePrintPDF(id, isPayNow);\n\n      if (!pdfUrl) {\n        snackbar.error(b3Lang('invoice.pdfUrlResolutionError'));\n        return;\n      }\n\n      const { href } = window.location;\n      if (!href.includes('invoice')) {\n        return;\n      }\n\n      window.open(pdfUrl, '_blank', 'fullscreen=yes');\n    } catch (err) {\n      b2bLogger.error(err);\n    } finally {\n      setIsRequestLoading(false);\n    }\n  };\n\n  const handleSetSelectedInvoiceAccount = (newPrice: number | string, invoiceId: string) => {\n    const currentOriginInvoice = checkedArr.find((invoice: InvoiceListNode) => {\n      const {\n        node: { id },\n      } = invoice;\n\n      return Number(id) === Number(invoiceId);\n    });\n\n    if (selectedPay.length > 0) {\n      const newInvoices = selectedPay.map((selectedItem: InvoiceListNode) => {\n        const {\n          node: { id, openBalance },\n        } = selectedItem;\n        const {\n          node: { openBalance: currentOriginOpenBalance },\n        } = currentOriginInvoice;\n\n        if (Number(id) === Number(invoiceId)) {\n          openBalance.value =\n            Number(currentOriginOpenBalance.value) < Number(newPrice)\n              ? currentOriginOpenBalance.value\n              : newPrice;\n        }\n\n        return selectedItem;\n      });\n\n      setSelectedPay(newInvoices);\n    }\n  };\n\n  const handleExportInvoiceAsCSV = async () => {\n    try {\n      setIsRequestLoading(true);\n      const filtering = filterData ? isFiltering(filterData) : false;\n      const currentCheckedArr = filtering\n        ? filterLists.filter((item: InvoiceListNode) =>\n            checkedArr.some((item2: InvoiceListNode) => item?.node?.id === item2?.node?.id),\n          )\n        : checkedArr;\n\n      const invoiceNumber = currentCheckedArr.map((item: InvoiceListNode) => item.node.id);\n      const invoiceStatus = filterData?.status ? [Number(filterData.status)] : [];\n\n      let orderByFiled = '-invoice_number';\n      if (filterData?.orderBy) {\n        const orderByStr = String(filterData.orderBy);\n        orderByFiled = orderByStr.includes('-')\n          ? `-${exportOrderByArr[orderByStr.split('-')[1]]}`\n          : exportOrderByArr[orderByStr];\n      }\n\n      const invoiceFilterData = {\n        search: filterData?.q || '',\n        idIn: `${invoiceNumber || ''}`,\n        orderNumber: '',\n        beginDateAt: filterData?.beginDateAt || null,\n        endDateAt: filterData?.endDateAt || null,\n        status: invoiceStatus,\n        orderBy: orderByFiled,\n        companyIds: filterData?.companyIds || [],\n      };\n\n      const { invoicesExport } = await exportInvoicesAsCSV({\n        invoiceFilterData,\n        lang: bcLanguage || 'en',\n      });\n\n      if (invoicesExport?.url) {\n        window.open(invoicesExport?.url, '_blank');\n      }\n    } catch (err) {\n      b2bLogger.error(err);\n    } finally {\n      setIsRequestLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    const newInitFilter = {\n      ...initFilter,\n      companyIds: [Number(selectCompanyHierarchyId) || Number(currentCompanyId)],\n    };\n    if (location?.search) {\n      const params = new URLSearchParams(location.search);\n      const getInvoiceId = params.get('invoiceId') || '';\n      const getReceiptId = params.get('receiptId') || '';\n\n      if (getInvoiceId) {\n        setFilterData({\n          ...newInitFilter,\n          q: getInvoiceId,\n        });\n        setType(InvoiceListType.DETAIL);\n      }\n\n      if (getReceiptId) {\n        // open Successful page\n        setType(InvoiceListType.CHECKOUT);\n        setFilterData({\n          ...newInitFilter,\n        });\n        setReceiptId(getReceiptId);\n      }\n    } else {\n      setType(InvoiceListType.NORMAL);\n      setFilterData({\n        ...newInitFilter,\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location, selectCompanyHierarchyId]);\n\n  const handleSelectCompanies = (company: number[]) => {\n    const newCompanyIds = company.includes(-1) ? [] : company;\n    setFilterData({\n      ...filterData,\n      companyIds: newCompanyIds,\n    });\n\n    setSelectAllPay(\n      company.includes(currentCompanyId) || company.includes(-1)\n        ? invoicePayPermission\n        : invoiceSubPayPermission,\n    );\n  };\n\n  useEffect(() => {\n    const selectedInvoice =\n      checkedArr.filter((item: InvoiceListNode) => {\n        const {\n          node: { openBalance },\n        } = item;\n\n        return Number(openBalance.value) !== 0;\n      }) || [];\n\n    if (selectedInvoice.length > 0) {\n      if (selectedPay.length === 0) {\n        setSelectedPay(cloneDeep(selectedInvoice));\n      } else {\n        const newArr = selectedInvoice.map((checkedItem: InvoiceListNode) => {\n          const {\n            node: { id, openBalance },\n          } = checkedItem;\n\n          const currentSelectedItem = selectedPay.find((item: InvoiceListNode) => {\n            const {\n              node: { id: selectedId },\n            } = item;\n\n            return Number(id) === Number(selectedId);\n          });\n\n          if (currentSelectedItem) {\n            const {\n              node: { openBalance: currentOpenBalance },\n            } = currentSelectedItem;\n\n            openBalance.value = currentOpenBalance.value;\n          }\n\n          return checkedItem;\n        });\n\n        setSelectedPay(cloneDeep(newArr));\n      }\n    } else {\n      setSelectedPay([]);\n    }\n    // ignore selectedPay cause it will trigger an useEffect loop\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [checkedArr]);\n\n  const fetchList: GetRequestList<Partial<FilterSearchProps>, InvoiceList> = async (params) => {\n    const {\n      invoices: { edges, totalCount },\n    } = await getInvoiceList(params);\n\n    const invoicesList: InvoiceListNode[] = edges;\n\n    if (type === InvoiceListType.DETAIL && invoicesList.length) {\n      invoicesList.forEach((invoice: InvoiceListNode) => {\n        const item = invoice;\n        item.node.isCollapse = true;\n      });\n    }\n\n    invoicesList.forEach((invoiceNode: InvoiceListNode) => {\n      const {\n        node: { openBalance },\n      } = invoiceNode;\n      const item = invoiceNode;\n      item.node.disableCurrentCheckbox = false;\n\n      openBalance.originValue = `${Number(openBalance.value)}`;\n      openBalance.value = formattingNumericValues(Number(openBalance.value), decimalPlaces);\n\n      item.node.disableCurrentCheckbox = Number(openBalance.value) === 0;\n\n      const { companyInfo } = item.node;\n      if (Number(companyInfo.companyId) !== Number(currentCompanyId)) {\n        item.node.disableCurrentCheckbox =\n          !invoiceSubPayPermission || Number(openBalance.value) === 0;\n      }\n    });\n    setList(invoicesList);\n    handleStatisticsInvoiceAmount();\n\n    if (filterData && isFiltering(filterData) && invoicesList.length) {\n      cacheFilterLists(invoicesList);\n    } else {\n      setFilterLists([]);\n    }\n\n    return {\n      edges: invoicesList,\n      totalCount,\n    };\n  };\n\n  const handleSetSelectedInvoiceAccountNumber = (val: string, id: string) => {\n    let result = val;\n    if (val.includes('.')) {\n      const wholeDecimalNumber = val.split('.');\n      const movePoint =\n        decimalPlaces === 0 ? 0 : wholeDecimalNumber[1].length - Number(decimalPlaces);\n      if (wholeDecimalNumber[1] && movePoint > 0) {\n        const newVal = wholeDecimalNumber[0] + wholeDecimalNumber[1];\n        result = `${newVal.slice(0, -decimalPlaces)}.${newVal.slice(-decimalPlaces)}`;\n      }\n      if (wholeDecimalNumber[1] && movePoint === 0) {\n        result = formattingNumericValues(Number(val), decimalPlaces);\n      }\n    } else if (result.length > 1) {\n      result = `${val.slice(0, 1)}.${val.slice(-1)}`;\n      if (Number(decimalPlaces) === 0) result = val;\n    } else {\n      result = val;\n    }\n\n    handleSetSelectedInvoiceAccount(result, id);\n  };\n\n  const columnAllItems: TableColumnItem<InvoiceList>[] = [\n    {\n      key: 'id',\n      title: b3Lang('invoice.headers.invoice'),\n      isSortable: true,\n      render: (item: InvoiceList) => (\n        <Box\n          sx={{\n            color: '#000000',\n            cursor: 'pointer',\n            ':hover': {\n              textDecoration: 'underline',\n            },\n          }}\n          role=\"button\"\n          onClick={() => {\n            const companyInfo = item?.companyInfo || {};\n            handleViewInvoice(item.id, item.status, companyInfo?.companyId);\n          }}\n        >\n          {item?.invoiceNumber ? item?.invoiceNumber : item?.id}\n        </Box>\n      ),\n      width: '8%',\n    },\n    {\n      key: 'companyInfo',\n      title: b3Lang('invoice.headers.companyName'),\n      isSortable: false,\n      render: (item: InvoiceList) => {\n        const { companyName } = item?.companyInfo || {};\n\n        return <Box>{companyName}</Box>;\n      },\n      width: '15%',\n    },\n    {\n      key: 'orderNumber',\n      title: b3Lang('invoice.headers.order'),\n      isSortable: true,\n      render: (item: InvoiceList) => (\n        <Box\n          role=\"button\"\n          sx={{\n            color: '#000000',\n            cursor: 'pointer',\n            ':hover': {\n              textDecoration: 'underline',\n            },\n          }}\n          onClick={() => {\n            navigate(`/orderDetail/${item.orderNumber}`);\n          }}\n        >\n          {item?.orderNumber || '-'}\n        </Box>\n      ),\n      width: '12%',\n    },\n    {\n      key: 'createdAt',\n      title: b3Lang('invoice.headers.invoiceDate'),\n      isSortable: true,\n      render: (item: InvoiceList) =>\n        `${item.createdAt ? displayFormat(Number(item.createdAt)) : '–'}`,\n      width: '15%',\n    },\n    {\n      key: 'updatedAt',\n      title: b3Lang('invoice.headers.dueDate'),\n      isSortable: true,\n      render: (item: InvoiceList) => {\n        const { dueDate, status } = item;\n        const isOverdue = currentDate > dueDate * 1000 && status !== 2;\n\n        return (\n          <Typography\n            sx={{\n              color: isOverdue ? '#D32F2F' : 'rgba(0, 0, 0, 0.87)',\n              fontSize: '14px',\n            }}\n          >\n            {`${item.dueDate ? displayFormat(Number(item.dueDate)) : '–'}`}\n          </Typography>\n        );\n      },\n      width: '15%',\n    },\n    {\n      key: 'originalBalance',\n      title: b3Lang('invoice.headers.invoiceTotal'),\n      isSortable: true,\n      render: (item: InvoiceList) => {\n        const { originalBalance } = item;\n        const originalAmount = formattingNumericValues(\n          Number(originalBalance.value),\n          decimalPlaces,\n        );\n\n        const token = handleGetCorrespondingCurrencyToken(originalBalance.code);\n\n        return `${token}${originalAmount || 0}`;\n      },\n      width: '10%',\n    },\n    {\n      key: 'openBalance',\n      title: b3Lang('invoice.headers.amountDue'),\n      isSortable: true,\n      render: (item: InvoiceList) => {\n        const { openBalance } = item;\n\n        const openAmount = formattingNumericValues(Number(openBalance.value), decimalPlaces);\n        const token = handleGetCorrespondingCurrencyToken(openBalance.code);\n\n        return `${token}${openAmount || 0}`;\n      },\n      width: '10%',\n    },\n    {\n      key: 'openBalanceToPay',\n      title: b3Lang('invoice.headers.amountToPay'),\n      render: (item: InvoiceList) => {\n        const { openBalance, id } = item;\n        const currentCode = openBalance.code || 'USD';\n        let valuePrice = openBalance.value;\n        let disabled = true;\n\n        if (selectedPay.length > 0) {\n          const currentSelected = selectedPay.find((item: InvoiceListNode) => {\n            const {\n              node: { id: selectedId },\n            } = item;\n\n            return Number(selectedId) === Number(id);\n          });\n\n          if (currentSelected) {\n            const {\n              node: { openBalance: selectedOpenBalance },\n            } = currentSelected;\n\n            disabled = false;\n            valuePrice = selectedOpenBalance.value;\n\n            if (Number(openBalance.value) === 0) {\n              disabled = true;\n            }\n          }\n        }\n\n        return (\n          <TextField\n            disabled={disabled}\n            variant=\"filled\"\n            value={valuePrice || ''}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment\n                  position=\"start\"\n                  sx={{ padding: '8px 0', marginTop: '0 !important' }}\n                >\n                  {handleGetCorrespondingCurrencyToken(currentCode)}\n                </InputAdornment>\n              ),\n            }}\n            sx={{\n              '& input': {\n                paddingTop: '8px',\n              },\n              '& input[type=\"number\"]::-webkit-inner-spin-button, & input[type=\"number\"]::-webkit-outer-spin-button':\n                {\n                  WebkitAppearance: 'none',\n                  margin: 0,\n                },\n            }}\n            onChange={(e: CustomFieldItems) => {\n              const val = e.target?.value;\n              handleSetSelectedInvoiceAccountNumber(val, id);\n            }}\n            type=\"number\"\n          />\n        );\n      },\n      width: '15%',\n    },\n    {\n      key: 'status',\n      title: b3Lang('invoice.headers.status'),\n      isSortable: true,\n      render: (item: InvoiceList) => {\n        const { status, dueDate } = item;\n        let code = item.status;\n\n        // (3, \"Overdue\")-【Display status when invoice exceeds due date. For front-end display only】\n        if (status === 0 && currentDate > dueDate * 1000) {\n          code = 3;\n        }\n\n        return <InvoiceStatus code={code} />;\n      },\n    },\n    {\n      key: 'invoiceActions',\n      title: b3Lang('invoice.headers.action'),\n      render: (row: InvoiceList) => {\n        const { id, companyInfo } = row;\n        let actionRow = row;\n        if (selectedPay.length > 0) {\n          const currentSelected = selectedPay.find((item: InvoiceListNode) => {\n            const {\n              node: { id: selectedId },\n            } = item;\n\n            return Number(selectedId) === Number(id);\n          });\n\n          if (currentSelected) {\n            actionRow = currentSelected.node;\n          }\n        }\n\n        return (\n          <B3Pulldown\n            row={actionRow}\n            setInvoiceId={setCurrentInvoiceId}\n            handleOpenHistoryModal={setIsOpenHistory}\n            setIsRequestLoading={setIsRequestLoading}\n            isCurrentCompany={Number(currentCompanyId) === Number(companyInfo.companyId)}\n            invoicePay={\n              Number(currentCompanyId) === Number(companyInfo.companyId)\n                ? invoicePayPermission\n                : invoiceSubPayPermission\n            }\n          />\n        );\n      },\n      width: '10%',\n    },\n  ];\n\n  useEffect(() => {\n    let exportCsvTexts = b3Lang('invoice.exportCsvText');\n\n    const filtering = filterData ? isFiltering(filterData) : false;\n    const currentCheckedArr = filtering\n      ? filterLists.filter((item: InvoiceListNode) =>\n          checkedArr.some((item2: InvoiceListNode) => item?.node?.id === item2?.node?.id),\n        )\n      : checkedArr;\n\n    if (filtering) {\n      exportCsvTexts =\n        currentCheckedArr.length > 0\n          ? b3Lang('invoice.exportSelectedAsCsv')\n          : b3Lang('invoice.exportFilteredAsCsv');\n    } else {\n      exportCsvTexts =\n        currentCheckedArr.length > 0\n          ? b3Lang('invoice.exportSelectedAsCsv')\n          : b3Lang('invoice.exportCsvText');\n    }\n\n    setExportCsvText(exportCsvTexts);\n    // disabling because of b3lang rendering errors\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [checkedArr, filterData, filterLists]);\n\n  const translatedFilterFormConfigs = filterFormConfig.map((element) => {\n    const config = element;\n    if (element.name === 'status') {\n      config.label = b3Lang(filterFormConfigsTranslationVariables.status);\n    }\n\n    config.options = element.options.map((option) => {\n      const elementOption = option;\n      elementOption.label = b3Lang(filterFormConfigsTranslationVariables[option.key]);\n\n      return option;\n    });\n\n    return element;\n  });\n\n  return (\n    <B3Spin isSpinning={isRequestLoading}>\n      <Box\n        sx={{\n          overflowX: 'auto',\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n          position: 'relative',\n        }}\n      >\n        <Box\n          sx={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: isMobile ? 'flex-start' : 'center',\n            flexDirection: isMobile ? 'column' : 'row',\n          }}\n        >\n          <Box\n            sx={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: isMobile ? 'flex-start' : 'center',\n              flexDirection: isMobile ? 'column' : 'row',\n              width: isMobile ? '100%' : 'auto',\n\n              '& > div': {\n                width: isMobile ? '100%' : 'auto',\n              },\n            }}\n          >\n            {isEnabledCompanyHierarchy && invoiceSubViewPermission && (\n              <Box\n                sx={{\n                  mr: isMobile ? 0 : '10px',\n                  mb: '30px',\n                }}\n              >\n                <B2BAutoCompleteCheckbox handleChangeCompanyIds={handleSelectCompanies} />\n              </Box>\n            )}\n            <B3Filter\n              filterMoreInfo={translatedFilterFormConfigs}\n              handleChange={handleChange}\n              handleFilterChange={handleFilterChange}\n              startPicker={{\n                isEnabled: true,\n                label: b3Lang('invoice.filter.from'),\n                defaultValue:\n                  typeof filterData?.beginDateAt === 'number'\n                    ? Number(filterData.beginDateAt) * 1000\n                    : '',\n                pickerKey: 'start',\n              }}\n              endPicker={{\n                isEnabled: true,\n                label: b3Lang('invoice.filter.to'),\n                defaultValue:\n                  typeof filterData?.endDateAt === 'number'\n                    ? Number(filterData.endDateAt) * 1000\n                    : '',\n                pickerKey: 'end',\n              }}\n              searchValue={filterData?.q || ''}\n              pcContainerWidth=\"36rem\"\n              pcSearchContainerWidth=\"80%\"\n            />\n          </Box>\n          <Box\n            sx={{\n              display: 'flex',\n              marginBottom: '30px',\n              flexDirection: document.body.clientWidth <= 465 ? 'column' : 'row',\n            }}\n          >\n            <Typography\n              sx={{\n                fontSize: '24px',\n                color: '#000000',\n              }}\n            >\n              {b3Lang('invoice.openUnpaid', {\n                unpaid: currencyFormat(unpaidAmount),\n              })}\n            </Typography>\n            {document.body.clientWidth >= 465 && (\n              <Typography\n                sx={{\n                  fontSize: '24px',\n                  margin: '0 8px',\n                }}\n              >\n                |\n              </Typography>\n            )}\n            <Typography\n              sx={{\n                fontSize: '24px',\n                color: '#D32F2F',\n              }}\n            >\n              {b3Lang('invoice.overdueAmount', {\n                overdue: currencyFormat(overdueAmount),\n              })}\n            </Typography>\n          </Box>\n        </Box>\n        <B3PaginationTable\n          ref={paginationTableRef}\n          columnItems={columnAllItems}\n          rowsPerPageOptions={[10, 20, 30]}\n          getRequestList={fetchList}\n          searchParams={filterData}\n          isCustomRender={false}\n          requestLoading={setIsRequestLoading}\n          tableKey=\"id\"\n          showCheckbox={selectAllPay && purchasabilityPermission}\n          showSelectAllCheckbox={!isMobile && selectAllPay && purchasabilityPermission}\n          disableCheckbox={false}\n          applyAllDisableCheckbox={false}\n          getSelectCheckbox={getSelectCheckbox}\n          CollapseComponent={PrintTemplate}\n          sortDirection={order}\n          orderBy={orderBy}\n          sortByFn={handleSetOrderBy}\n          isSelectOtherPageCheckbox\n          hover\n          isAutoRefresh={false}\n          renderItem={(row, index, checkBox) => (\n            <InvoiceItemCard\n              item={row}\n              checkBox={checkBox}\n              handleSetSelectedInvoiceAccount={handleSetSelectedInvoiceAccountNumber}\n              handleViewInvoice={handleViewInvoice}\n              setIsRequestLoading={setIsRequestLoading}\n              setInvoiceId={setCurrentInvoiceId}\n              handleOpenHistoryModal={setIsOpenHistory}\n              selectedPay={selectedPay}\n              handleGetCorrespondingCurrency={handleGetCorrespondingCurrencyToken}\n              addBottom={list.length - 1 === index}\n              isCurrentCompany={Number(currentCompanyId) === Number(row.companyInfo.companyId)}\n              invoicePay={\n                Number(currentCompanyId) === Number(row.companyInfo.companyId)\n                  ? invoicePayPermission\n                  : invoiceSubPayPermission\n              }\n            />\n          )}\n        />\n        {list.length > 0 && !isMobile && (\n          <Box\n            sx={{\n              position: 'absolute',\n              bottom: '8px',\n              left: '20px',\n            }}\n          >\n            <Button variant=\"text\" onClick={handleExportInvoiceAsCSV}>\n              {exportCsvText}\n            </Button>\n          </Box>\n        )}\n      </Box>\n      {selectedPay.length > 0 &&\n        (((invoicePayPermission || invoiceSubPayPermission) && purchasabilityPermission) ||\n          isAgenting) && <InvoiceFooter selectedPay={selectedPay} decimalPlaces={decimalPlaces} />}\n      <PaymentsHistory\n        open={isOpenHistory}\n        currentInvoiceId={currentInvoiceId}\n        setOpen={setIsOpenHistory}\n      />\n      <PaymentSuccess receiptId={Number(receiptId)} type={type} />\n    </B3Spin>\n  );\n}\n\nexport default Invoice;\n"],"names":["analyzePDFUrl","url","resolve","reject","res","response","blob","invoicePDFUrl","e","getInvoiceDownloadPDFUrl","invoiceId","isPayNow","invoiceDownloadPDF","handlePrintPDF","error","triggerPdfDownload","fileName","a","StyledMenu","styled","Menu","B3Pulldown","row","setIsRequestLoading","setInvoiceId","handleOpenHistoryModal","isCurrentCompany","invoicePay","platform","useAppSelector","global","ref","useRef","isOpen","setIsOpen","useState","isPay","setIsPay","navigate","useNavigate","b3Lang","useB3Lang","invoicePayPermission","purchasabilityPermission","rolePermissionSelector","getOrderPermissionCode","b2bPermissionsMap","isCanViewOrder","setIsCanViewOrder","close","handleMoreActionsClick","id","handleViewInvoice","pdfUrl","snackbar","href","handleViewOrder","orderNumber","handlePay","openBalance","originalBalance","params","gotoInvoiceCheckoutUrl","viewPaymentHistory","handleDownloadPDF","useEffect","orderUserId","companyInfo","payPermissions","viewOrderPermission","verifyLevelPermission","jsxs","Fragment","jsx","IconButton","MoreHorizIcon","MenuItem","InvoiceFooter","props","isMobile","useMobile","selectedAccount","setSelectedAccount","currentToken","setCurrentToken","isAgenting","b2bFeatures","containerStyle","selectedPay","decimalPlaces","lineItems","currency","item","currentValue","formattingNumericValues","handleStatisticsInvoiceAmount","checkedArr","amount","token","handleGetCorrespondingCurrencyToken","Grid","Box","Typography","Button","InvoiceStatus","code","status","B3Tag","Title","title","HistoryList","list","createdAt","paymentType","transactionType","referenceNumber","Card","CardContent","displayFormat","handleGetCorrespondingCurrency","PaymentsHistory","open","setOpen","currentInvoiceId","loading","setLoading","setList","edges","getInvoicePaymentHistory","B3Dialog","B3Spin","B3NoData","InvoiceListType","invoiceStatus","filterFormConfig","filterFormConfigsTranslationVariables","defaultSortKey","sortIdArr","exportOrderByArr","withColon","Row","isRow","type","value","label","getNewVal","val","PaymentSuccessList","details","comment","_a","paymentSuccessKeys","invoiceNumber","accountValue","PaymentSuccess","receiptId","detailData","setDetailData","init","receipt","getInvoicePaymentInfo","handleCloseClick","customActions","templateMinHeight","PrintTemplate","container","dom","height","setHeight","onFirstBoxResize","_","size","PDFObject","Resizable","_b","StyleCheckoutContainer","InvoiceItemCard","currentDate","checkBox","handleSetSelectedInvoiceAccount","addBottom","dueDate","currentCode","currentCurrencyToken","statusCode","columnAllItems","isOverdue","originalAmount","currencyFormat","openAmount","valuePrice","disabled","currentSelected","selectedId","selectedOpenBalance","TextField","InputAdornment","groupId","useId","initFilter","useData","role","company","companyInfoId","selectCompanyHierarchyId","isEnabledCompanyHierarchy","salesRepCompanyId","currentCompanyId","CustomerRole","invoiceSubViewPermission","Invoice","paginationTableRef","currencyFormatInfo","isRequestLoading","isOpenHistory","setIsOpenHistory","setCurrentInvoiceId","setReceiptId","setType","unpaidAmount","setUnpaidAmount","overdueAmount","setOverdueAmount","setCheckedArr","setSelectedPay","filterData","setFilterData","exportCsvText","setExportCsvText","filterChangeFlag","setFilterChangeFlag","filterLists","setFilterLists","selectAllPay","setSelectAllPay","invoiceSubPayPermission","validatePermissionWithComparisonType","permissionLevels","bcLanguage","useContext","GlobalContext","handleSetOrderBy","order","orderBy","useSort","location","useLocation","isFiltering","key","cacheFilterLists","copyCacheFilterList","option","cache","invoiceStats","getInvoiceStats","overDueBalance","totalBalance","err","b2bLogger","handleChange","handleFilterChange","startValue","getUTCTimestamp","endValue","search","getSelectCheckbox","selectCheckbox","productList","newEnableItems","product","node","invoiceCompanyId","newPrice","currentOriginInvoice","invoice","newInvoices","selectedItem","currentOriginOpenBalance","handleExportInvoiceAsCSV","item2","orderByFiled","orderByStr","invoiceFilterData","invoicesExport","exportInvoicesAsCSV","newInitFilter","getInvoiceId","getReceiptId","handleSelectCompanies","newCompanyIds","selectedInvoice","cloneDeep","newArr","checkedItem","currentSelectedItem","currentOpenBalance","fetchList","totalCount","getInvoiceList","invoicesList","invoiceNode","handleSetSelectedInvoiceAccountNumber","result","wholeDecimalNumber","movePoint","newVal","companyName","actionRow","exportCsvTexts","filtering","currentCheckedArr","translatedFilterFormConfigs","element","config","elementOption","B2BAutoCompleteCheckbox","B3Filter","B3PaginationTable","index"],"mappings":"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"}