{"version":3,"file":"index-legacy-DlmyO8wN.js","sources":["../../src/pages/Registered/RegisterComplete.tsx","../../src/pages/Registered/RegisteredAccount.tsx","../../src/pages/Registered/RegisteredDetail.tsx","../../src/pages/Registered/index.tsx","../../src/pages/Registered/RegisterContent.tsx","../../src/pages/Registered/RegisteredStep.tsx"],"sourcesContent":["import { MouseEvent, useContext, useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Alert, Box, Typography } from '@mui/material';\n\nimport { B3CustomForm } from '@/components';\nimport { Captcha } from '@/components/form';\nimport { getContrastColor } from '@/components/outSideComponents/utils/b3CustomStyles';\nimport { useB3Lang } from '@/lib/lang';\nimport { CustomStyleContext } from '@/shared/customStyleButton/context';\nimport { GlobalContext } from '@/shared/global';\nimport {\n  createB2BCompanyUser,\n  createBCCompanyUser,\n  sendSubscribersState,\n  uploadB2BFile,\n} from '@/shared/service/b2b';\nimport { getStorefrontToken } from '@/shared/service/b2b/graphql/recaptcha';\nimport { channelId, storeHash } from '@/utils';\nimport b2bLogger from '@/utils/b3Logger';\n\nimport { RegisteredContext } from './context/RegisteredContext';\nimport { deCodeField, toHump } from './config';\nimport { PrimaryButton } from './PrimaryButton';\nimport { InformationFourLabels, TipContent } from './styled';\nimport { RegisterFields } from './types';\n\ninterface RegisterCompleteProps {\n  handleBack: () => void;\n  handleNext: (password: string) => void;\n}\n\ntype RegisterCompleteList = Array<RegisterFields> | undefined;\n\nexport default function RegisterComplete(props: RegisterCompleteProps) {\n  const b3Lang = useB3Lang();\n  const { handleBack, handleNext } = props;\n  const [personalInfo, setPersonalInfo] = useState<Array<CustomFieldItems>>([]);\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const [enterEmail, setEnterEmail] = useState<string>('');\n\n  const [captchaKey, setCaptchaKey] = useState('');\n  const [isEnabledOnStorefront, setIsEnabledOnStorefront] = useState(false);\n  const [storefrontSiteKey, setStorefrontSiteKey] = useState('');\n\n  const [isCaptchaMissing, setIsCaptchaMissing] = useState(false);\n\n  const handleGetCaptchaKey = (key: string) => setCaptchaKey(key);\n\n  useEffect(() => {\n    const getIsEnabledOnStorefront = async () => {\n      try {\n        const response = await getStorefrontToken();\n\n        if (response) {\n          setIsEnabledOnStorefront(response.isEnabledOnStorefront);\n          setStorefrontSiteKey(response.siteKey);\n        }\n      } catch (e) {\n        b2bLogger.error(e);\n      }\n    };\n\n    getIsEnabledOnStorefront();\n  }, []);\n\n  useEffect(() => {\n    if (captchaKey) setIsCaptchaMissing(false);\n  }, [captchaKey]);\n\n  const {\n    control,\n    handleSubmit,\n    setError,\n    formState: { errors },\n  } = useForm({\n    mode: 'all',\n  });\n  const { state, dispatch } = useContext(RegisteredContext);\n\n  const {\n    state: { blockPendingAccountOrderCreation },\n  } = useContext(GlobalContext);\n\n  const {\n    state: {\n      portalStyle: { backgroundColor = '#FEF9F5' },\n    },\n  } = useContext(CustomStyleContext);\n\n  const customColor = getContrastColor(backgroundColor);\n\n  const {\n    contactInformation,\n    bcContactInformation,\n    passwordInformation = [],\n    bcPasswordInformation = [],\n    accountType,\n    additionalInformation,\n    bcAdditionalInformation,\n    addressBasicFields = [],\n    bcAddressBasicFields = [],\n    companyInformation = [],\n    emailMarketingNewsletter,\n  } = state;\n\n  const list: RegisterCompleteList =\n    accountType === '1' ? contactInformation : bcContactInformation;\n  const passwordInfo: RegisterCompleteList =\n    accountType === '1' ? passwordInformation : bcPasswordInformation;\n\n  const passwordName = passwordInfo[0]?.groupName || '';\n\n  const additionalInfo: RegisterCompleteList =\n    accountType === '1' ? additionalInformation : bcAdditionalInformation;\n\n  const addressBasicList = accountType === '1' ? addressBasicFields : bcAddressBasicFields;\n\n  useEffect(() => {\n    if (!accountType) return;\n    if (list && list.length) {\n      const emailFields: CustomFieldItems =\n        list.find((item: RegisterFields) => item.name === 'email') || {};\n\n      setEnterEmail(emailFields?.default || '');\n    }\n\n    setPersonalInfo(passwordInfo);\n  }, [contactInformation, bcContactInformation, accountType, list, passwordInfo]);\n\n  const getBCFieldsValue = (data: CustomFieldItems) => {\n    const bcFields: CustomFieldItems = {};\n\n    bcFields.authentication = {\n      force_password_reset: false,\n      new_password: data.password,\n    };\n\n    bcFields.accepts_product_review_abandoned_cart_emails = emailMarketingNewsletter;\n\n    if (list) {\n      list.forEach((item: any) => {\n        const name = deCodeField(item.name);\n        if (name === 'accepts_marketing_emails') {\n          bcFields.accepts_product_review_abandoned_cart_emails = !!item?.default?.length;\n        } else if (!item.custom) {\n          bcFields[name] = item?.default || '';\n        }\n      });\n\n      bcFields.form_fields = [];\n      if (additionalInfo && (additionalInfo as Array<CustomFieldItems>).length) {\n        additionalInfo.forEach((field: CustomFieldItems) => {\n          bcFields.form_fields.push({\n            name: field.bcLabel,\n            value: field.default,\n          });\n        });\n      }\n    }\n\n    bcFields.addresses = [];\n    bcFields.origin_channel_id = channelId;\n    bcFields.channel_ids = [channelId];\n\n    if (accountType === '2') {\n      const addresses: CustomFieldItems = {};\n\n      const getBCAddressField = addressBasicList.filter((field: any) => !field.custom);\n      const getBCExtraAddressField = addressBasicList.filter((field: any) => field.custom);\n\n      if (getBCAddressField) {\n        bcFields.addresses = {};\n        getBCAddressField.forEach((field: any) => {\n          if (field.name === 'country') {\n            addresses.country_code = field.default;\n          } else if (field.name === 'state') {\n            addresses.state_or_province = field.default;\n          } else if (field.name === 'postalCode') {\n            addresses.postal_code = field.default;\n          } else if (field.name === 'firstName') {\n            addresses.first_name = field.default;\n          } else if (field.name === 'lastName') {\n            addresses.last_name = field.default;\n          } else {\n            addresses[field.name] = field.default;\n          }\n        });\n      }\n\n      addresses.form_fields = [];\n      // BC Extra field\n      if (getBCExtraAddressField && getBCExtraAddressField.length) {\n        getBCExtraAddressField.forEach((field: any) => {\n          addresses.form_fields.push({\n            name: field.bcLabel,\n            value: field.default,\n          });\n        });\n      }\n\n      bcFields.addresses = [addresses];\n      bcFields.trigger_account_created_notification = true;\n    }\n\n    const userItem = {\n      storeHash,\n      ...bcFields,\n    };\n\n    return createBCCompanyUser(userItem, captchaKey);\n  };\n\n  const getB2BFieldsValue = async (\n    _: CustomFieldItems,\n    customerId: number | string,\n    fileList: any,\n  ) => {\n    try {\n      const b2bFields: CustomFieldItems = {};\n      b2bFields.customerId = customerId || '';\n      b2bFields.storeHash = storeHash;\n\n      // company user extra field\n      const b2bContactInformationList = list || [];\n      const companyUserExtraFieldsList = b2bContactInformationList.filter((item) => !!item.custom);\n\n      if (companyUserExtraFieldsList.length) {\n        const companyUserExtraFields: Array<CustomFieldItems> = [];\n        companyUserExtraFieldsList.forEach((item: CustomFieldItems) => {\n          const itemExtraField: CustomFieldItems = {};\n          itemExtraField.fieldName = deCodeField(item.name);\n          itemExtraField.fieldValue = item?.default || '';\n          companyUserExtraFields.push(itemExtraField);\n        });\n        b2bFields.userExtraFields = companyUserExtraFields;\n      }\n\n      const companyInfo = companyInformation.filter(\n        (list) => !list.custom && list.fieldType !== 'files',\n      );\n      const companyExtraInfo = companyInformation.filter((list) => !!list.custom);\n      // company field\n      if (companyInfo.length) {\n        companyInfo.forEach((item: any) => {\n          b2bFields[toHump(deCodeField(item.name))] = item?.default || '';\n        });\n      }\n\n      // Company Additional Field\n      if (companyExtraInfo.length) {\n        const extraFields: Array<CustomFieldItems> = [];\n        companyExtraInfo.forEach((item: CustomFieldItems) => {\n          const itemExtraField: CustomFieldItems = {};\n          itemExtraField.fieldName = deCodeField(item.name);\n          itemExtraField.fieldValue = item?.default || '';\n          extraFields.push(itemExtraField);\n        });\n        b2bFields.extraFields = extraFields;\n      }\n\n      // address Field\n      const addressBasicInfo = addressBasicList.filter((list) => !list.custom) || [];\n      const addressExtraBasicInfo = addressBasicList.filter((list) => !!list.custom) || [];\n\n      if (addressBasicInfo.length) {\n        addressBasicInfo.forEach((field: CustomFieldItems) => {\n          const name = deCodeField(field.name);\n          if (name === 'address1') {\n            b2bFields.addressLine1 = field.default;\n          }\n          if (name === 'address2') {\n            b2bFields.addressLine2 = field.default;\n          }\n          b2bFields[name] = field.default;\n        });\n      }\n\n      // address Additional Field\n      if (addressExtraBasicInfo.length) {\n        const extraFields: Array<CustomFieldItems> = [];\n        addressExtraBasicInfo.forEach((item: CustomFieldItems) => {\n          const itemExtraField: CustomFieldItems = {};\n          itemExtraField.fieldName = deCodeField(item.name);\n          itemExtraField.fieldValue = item?.default || '';\n          extraFields.push(itemExtraField);\n        });\n        b2bFields.addressExtraFields = extraFields;\n      }\n      b2bFields.fileList = fileList;\n      b2bFields.channelId = channelId;\n\n      return await createB2BCompanyUser(b2bFields);\n    } catch (error) {\n      b2bLogger.error(error);\n    }\n    return undefined;\n  };\n\n  const getFileUrl = async (attachmentsList: RegisterFields[]) => {\n    let attachments: File[] = [];\n\n    if (!attachmentsList.length) return undefined;\n\n    attachmentsList.forEach((field: any) => {\n      attachments = field.default;\n    });\n\n    try {\n      const fileResponse = await Promise.all(\n        attachments.map((file: File) =>\n          uploadB2BFile({\n            file,\n            type: 'companyAttachedFile',\n          }),\n        ),\n      );\n\n      const fileList = fileResponse.reduce((fileList: any, res: any) => {\n        let list = fileList;\n        if (res.code === 200) {\n          const newData = {\n            ...res.data,\n          };\n          newData.fileSize = newData.fileSize ? `${newData.fileSize}` : '';\n          list = [...fileList, newData];\n        } else {\n          throw (\n            res.data.errMsg || res.message || b3Lang('intl.global.fileUpload.fileUploadFailure')\n          );\n        }\n        return list;\n      }, []);\n\n      return fileList;\n    } catch (error) {\n      b2bLogger.error(error);\n      throw error;\n    }\n  };\n\n  const saveRegisterPassword = (data: CustomFieldItems) => {\n    const newPasswordInformation = passwordInformation.map((field: RegisterFields) => {\n      const registerField = field;\n      if (accountType === '1') {\n        registerField.default = data[field.name] || field.default;\n      }\n      return field;\n    });\n\n    const newBcPasswordInformation = bcPasswordInformation.map((field: RegisterFields) => {\n      const registerField = field;\n      if (accountType === '2') {\n        registerField.default = data[field.name] || field.default;\n      }\n\n      return field;\n    });\n\n    dispatch({\n      type: 'all',\n      payload: {\n        passwordInformation: newPasswordInformation,\n        bcPasswordInformation: newBcPasswordInformation,\n      },\n    });\n  };\n\n  const handleSendSubscribersState = async () => {\n    if (list && list.length > 0) {\n      const emailMe = list.find(\n        (item: CustomFieldItems) =>\n          item.fieldId === 'field_email_marketing_newsletter' && item.fieldType === 'checkbox',\n      );\n      const firstName: CustomFieldItems =\n        list.find((item: RegisterFields) => item.fieldId === 'field_first_name') || {};\n      const lastName: CustomFieldItems =\n        list.find((item: RegisterFields) => item.fieldId === 'field_last_name') || {};\n      const isChecked = emailMe?.isChecked || false;\n      const defaultValue = emailMe?.default || [];\n\n      if (isChecked && (defaultValue as Array<string>).length > 0) {\n        try {\n          await sendSubscribersState({\n            storeHash,\n            email: enterEmail,\n            first_name: firstName.default,\n            last_name: lastName.default,\n            channel_id: channelId || 1,\n          });\n        } catch (err: any) {\n          setErrorMessage(err?.message || err);\n        }\n      }\n    }\n  };\n\n  const handleCompleted = (event: MouseEvent) => {\n    handleSubmit(async ({ password, confirmPassword }: CustomFieldItems) => {\n      if (password !== confirmPassword) {\n        setError('confirmPassword', {\n          type: 'manual',\n          message: b3Lang('global.registerComplete.passwordMatchPrompt'),\n        });\n        setError('password', {\n          type: 'manual',\n          message: b3Lang('global.registerComplete.passwordMatchPrompt'),\n        });\n        return;\n      }\n\n      if (isEnabledOnStorefront && !captchaKey) {\n        setIsCaptchaMissing(true);\n        return;\n      }\n\n      if (!isCaptchaMissing) {\n        try {\n          dispatch({\n            type: 'loading',\n            payload: {\n              isLoading: true,\n            },\n          });\n\n          let isAuto = true;\n          if (accountType === '2') {\n            await getBCFieldsValue({ password, confirmPassword });\n          } else {\n            const attachmentsList = companyInformation.filter((list) => list.fieldType === 'files');\n            const fileList = await getFileUrl(attachmentsList || []);\n            const res = await getBCFieldsValue({ password, confirmPassword });\n            const {\n              customerCreate: { customer: data },\n            } = res;\n            const accountInfo = await getB2BFieldsValue(\n              { password, confirmPassword },\n              data.id,\n              fileList,\n            );\n\n            const companyStatus = accountInfo?.companyCreate?.company?.companyStatus || '';\n            isAuto = Number(companyStatus) === 1;\n          }\n          dispatch({\n            type: 'finishInfo',\n            payload: {\n              submitSuccess: true,\n              isAutoApproval: isAuto,\n              blockPendingAccountOrderCreation,\n            },\n          });\n          saveRegisterPassword({ password, confirmPassword });\n          await handleSendSubscribersState();\n          handleNext(password);\n        } catch (err: any) {\n          setErrorMessage(err?.message || err);\n        } finally {\n          dispatch({\n            type: 'loading',\n            payload: {\n              isLoading: false,\n            },\n          });\n        }\n      }\n    })(event);\n  };\n\n  return (\n    <Box\n      sx={{\n        pl: 1,\n        pr: 1,\n        mt: 2,\n        width: '100%',\n        '& h4': {\n          color: customColor,\n        },\n        '& input, & .MuiFormControl-root .MuiTextField-root': {\n          borderRadius: '4px',\n          borderBottomLeftRadius: '0',\n          borderBottomRightRadius: '0',\n        },\n      }}\n    >\n      {errorMessage && (\n        <Alert severity=\"error\">\n          <TipContent>{errorMessage}</TipContent>\n        </Alert>\n      )}\n      <Box>\n        <InformationFourLabels>{passwordName}</InformationFourLabels>\n        {personalInfo && (\n          <>\n            {enterEmail.length > 0 && (\n              <Box\n                sx={{\n                  fontSize: '16px',\n                  fontWeight: 400,\n                  color: '#000000',\n                  marginBottom: '10px',\n                  marginTop: '-12px',\n                  wordWrap: 'break-word',\n                }}\n              >\n                {`Create password for ${enterEmail}`}\n              </Box>\n            )}\n            <B3CustomForm formFields={personalInfo} errors={errors} control={control} />\n          </>\n        )}\n        {isCaptchaMissing ? (\n          <Typography\n            variant=\"body1\"\n            sx={{\n              color: 'red',\n              display: 'flex',\n              alignSelf: 'flex-start',\n              marginLeft: '8px',\n              marginTop: '2px',\n              fontSize: '13px',\n            }}\n          >\n            {b3Lang('login.loginText.missingCaptcha')}\n          </Typography>\n        ) : (\n          ''\n        )}\n        {isEnabledOnStorefront ? (\n          <Box\n            sx={{\n              display: 'flex',\n              justifyContent: 'center',\n              marginTop: '20px',\n            }}\n          >\n            <Captcha siteKey={storefrontSiteKey} size=\"normal\" handleGetKey={handleGetCaptchaKey} />\n          </Box>\n        ) : (\n          ''\n        )}\n      </Box>\n\n      <Box\n        sx={{\n          display: 'flex',\n          justifyContent: 'flex-end',\n          pt: 2,\n          gap: 1,\n        }}\n      >\n        <PrimaryButton onClick={handleBack}>{b3Lang('global.button.back')}</PrimaryButton>\n        <PrimaryButton onClick={handleCompleted}>{b3Lang('global.button.submit')}</PrimaryButton>\n      </Box>\n    </Box>\n  );\n}\n","import { ChangeEvent, MouseEvent, useContext, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Alert, Box, FormControl, FormControlLabel, Radio, RadioGroup } from '@mui/material';\n\nimport { B3CustomForm } from '@/components';\nimport { b3HexToRgb, getContrastColor } from '@/components/outSideComponents/utils/b3CustomStyles';\nimport { useB3Lang } from '@/lib/lang';\nimport { CustomStyleContext } from '@/shared/customStyleButton';\nimport {\n  checkUserBCEmail,\n  checkUserEmail,\n  validateBCCompanyUserExtraFields,\n} from '@/shared/service/b2b';\nimport { themeFrameSelector, useAppSelector } from '@/store';\nimport { channelId } from '@/utils';\nimport b2bLogger from '@/utils/b3Logger';\n\nimport { RegisteredContext } from './context/RegisteredContext';\nimport { Base64, emailError } from './config';\nimport { PrimaryButton } from './PrimaryButton';\nimport { InformationFourLabels, TipContent } from './styled';\nimport { RegisterFields } from './types';\n\ninterface RegisteredAccountProps {\n  handleNext: (email: string) => void;\n}\n\nexport default function RegisteredAccount({ handleNext }: RegisteredAccountProps) {\n  const { state, dispatch } = useContext(RegisteredContext);\n  const IframeDocument = useAppSelector(themeFrameSelector);\n\n  const {\n    state: {\n      accountLoginRegistration,\n      portalStyle: { backgroundColor = '#FEF9F5' },\n    },\n  } = useContext(CustomStyleContext);\n\n  const customColor = getContrastColor(backgroundColor);\n\n  const b3Lang = useB3Lang();\n\n  const [errorTips, setErrorTips] = useState<string>('');\n\n  const {\n    contactInformation,\n    accountType,\n    additionalInformation,\n    bcContactInformation,\n    bcAdditionalInformation,\n  } = state;\n\n  const {\n    control,\n    handleSubmit,\n    getValues,\n    formState: { errors },\n    setError,\n    setValue,\n  } = useForm({\n    mode: 'onSubmit',\n  });\n\n  const additionName = accountType === '1' ? 'additionalInformation' : 'bcAdditionalInformation';\n  const additionalInfo: any =\n    accountType === '1' ? additionalInformation || [] : bcAdditionalInformation || [];\n\n  const newContactInformation = contactInformation?.map((contactInfo: CustomFieldItems) => {\n    const info = contactInfo;\n    if (contactInfo.fieldId === 'field_email' && accountType === '1') {\n      info.isTip = true;\n      info.tipText = 'This email will be used to sign in to your account';\n    }\n\n    return contactInfo;\n  });\n\n  const contactInfo: any = accountType === '1' ? newContactInformation : bcContactInformation || [];\n  const contactName = accountType === '1' ? 'contactInformation' : 'bcContactInformationFields';\n\n  const contactInformationLabel = contactInfo.length ? contactInfo[0]?.groupName : '';\n\n  const additionalInformationLabel = additionalInfo.length ? additionalInfo[0]?.groupName : '';\n\n  const showLoading = (isShow = false) => {\n    dispatch({\n      type: 'loading',\n      payload: {\n        isLoading: isShow,\n      },\n    });\n  };\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    dispatch({\n      type: 'accountType',\n      payload: {\n        accountType: event.target.value,\n      },\n    });\n  };\n\n  const emailName =\n    contactInformation?.find((item: CustomFieldItems) => item.fieldId === 'field_email')?.name ||\n    'email';\n\n  const validateEmailValue = async (email: string) => {\n    const isRegisterAsB2BUser = accountType === '1';\n    try {\n      showLoading(true);\n      const {\n        isValid,\n        userType,\n        userInfo: { companyName = '' } = {},\n      } = isRegisterAsB2BUser\n        ? await checkUserEmail({ email, channelId })\n        : await checkUserBCEmail({ email, channelId });\n\n      if (!isValid) {\n        setErrorTips(\n          b3Lang(emailError[userType], {\n            companyName: companyName || '',\n            email,\n          }),\n        );\n        setError(emailName, {\n          type: 'custom',\n          message: '',\n        });\n\n        IframeDocument?.body.scrollIntoView(true);\n      } else {\n        setErrorTips('');\n      }\n\n      return isValid;\n    } catch (error) {\n      return false;\n    } finally {\n      showLoading(false);\n    }\n  };\n\n  const handleAccountToDetail = async (event: MouseEvent) => {\n    handleSubmit(async (data: CustomFieldItems) => {\n      if (!(await validateEmailValue(data[emailName]))) {\n        return;\n      }\n\n      const newContactInfo = contactInfo.map((item: RegisterFields) => {\n        const newContactItem = item;\n        newContactItem.default = data[item.name] || item.default;\n        if (item.fieldId === 'field_email_marketing_newsletter' && item.fieldType === 'checkbox') {\n          newContactItem.isChecked = data[item.name].length > 0;\n        }\n        return item;\n      });\n\n      try {\n        showLoading(true);\n        if (accountType === '1') {\n          const extraCompanyUserInformation = newContactInfo.filter(\n            (item: RegisterFields) => !!item.custom,\n          );\n          const extraFields = extraCompanyUserInformation.map((field: RegisterFields) => ({\n            fieldName: Base64.decode(field.name),\n            fieldValue: data[field.name] || field.default,\n          }));\n          if (extraFields.length > 0) {\n            const res = await validateBCCompanyUserExtraFields({\n              extraFields,\n            });\n\n            if (res.code !== 200) {\n              const message = res.data?.errMsg || res.message || '';\n\n              const messageArr = message.split(':');\n\n              if (messageArr.length >= 2) {\n                const field = extraCompanyUserInformation.find(\n                  (field: RegisterFields) => Base64.decode(field.name) === messageArr[0],\n                );\n                if (field) {\n                  setError(field.name, {\n                    type: 'manual',\n                    message: messageArr[1],\n                  });\n                  showLoading(false);\n                  return;\n                }\n              }\n              setErrorTips(message);\n              showLoading(false);\n              return;\n            }\n          }\n          setErrorTips('');\n        }\n      } catch (error) {\n        b2bLogger.error(error);\n      } finally {\n        showLoading(false);\n      }\n\n      let newAdditionalInformation: Array<RegisterFields> = [];\n      if (additionalInfo) {\n        newAdditionalInformation = (additionalInfo as Array<RegisterFields>).map(\n          (item: RegisterFields) => {\n            const additionalInfoItem = item;\n            additionalInfoItem.default = data[item.name] || item.default;\n            return item;\n          },\n        );\n      }\n\n      dispatch({\n        type: 'all',\n        payload: {\n          [additionName]: [...newAdditionalInformation],\n          [contactName]: [...newContactInfo],\n        },\n      });\n      handleNext(data[emailName]);\n    })(event);\n  };\n\n  return (\n    <Box\n      sx={{\n        pl: 1,\n        pr: 1,\n        mt: 2,\n        width: '100%',\n      }}\n    >\n      {errorTips && (\n        <Alert severity=\"error\">\n          <TipContent>{errorTips}</TipContent>\n        </Alert>\n      )}\n      <FormControl\n        sx={{\n          '& h4': {\n            color: customColor,\n          },\n        }}\n      >\n        <InformationFourLabels>\n          {b3Lang('register.registeredAccount.accountType')}\n        </InformationFourLabels>\n        <RadioGroup\n          aria-labelledby=\"demo-row-radio-buttons-group-label\"\n          name=\"row-radio-buttons-group\"\n          value={accountType}\n          onChange={handleChange}\n          sx={{\n            '& .MuiTypography-root.MuiTypography-body1.MuiFormControlLabel-label': {\n              color: b3HexToRgb(customColor, 0.87),\n            },\n            '& .MuiButtonBase-root.MuiRadio-root.MuiRadio-colorPrimary:not(.Mui-checked)': {\n              color: b3HexToRgb(customColor, 0.6),\n            },\n          }}\n        >\n          {accountLoginRegistration.b2b && (\n            <FormControlLabel\n              value=\"1\"\n              control={<Radio />}\n              label={b3Lang('register.registeredAccount.businessAccount')}\n            />\n          )}\n          {accountLoginRegistration.b2c && (\n            <FormControlLabel\n              value=\"2\"\n              control={<Radio />}\n              label={b3Lang('register.registeredAccount.personalAccount')}\n            />\n          )}\n        </RadioGroup>\n      </FormControl>\n      <Box\n        sx={{\n          '& h4': {\n            color: customColor,\n          },\n          '& input, & .MuiFormControl-root .MuiTextField-root, & .MuiTextField-root .MuiInputBase-multiline':\n            {\n              borderRadius: '4px',\n              borderBottomLeftRadius: '0',\n              borderBottomRightRadius: '0',\n            },\n          '& .MuiButtonBase-root.MuiCheckbox-root.MuiCheckbox-colorPrimary:not(.Mui-checked)': {\n            color: b3HexToRgb(customColor, 0.6),\n          },\n          '& .MuiTypography-root.MuiTypography-body1.MuiFormControlLabel-label': {\n            color: b3HexToRgb(customColor, 0.87),\n          },\n        }}\n      >\n        <InformationFourLabels>{contactInformationLabel}</InformationFourLabels>\n        <B3CustomForm\n          formFields={contactInfo}\n          errors={errors}\n          control={control}\n          getValues={getValues}\n          setValue={setValue}\n        />\n      </Box>\n      <Box />\n      {additionalInfo && additionalInfo.length ? (\n        <Box\n          sx={{\n            '& h4': {\n              color: customColor,\n            },\n            '& .MuiFormControlLabel-label, & .MuiFormControl-root .MuiFormLabel-root:not(.Mui-focused)':\n              {\n                color: b3HexToRgb(customColor, 0.87),\n              },\n            '& .MuiRadio-root:not(.Mui-checked)': {\n              color: b3HexToRgb(customColor, 0.6),\n            },\n          }}\n        >\n          <InformationFourLabels>{additionalInformationLabel}</InformationFourLabels>\n          <B3CustomForm\n            formFields={additionalInfo}\n            errors={errors}\n            control={control}\n            getValues={getValues}\n            setValue={setValue}\n          />\n        </Box>\n      ) : (\n        ''\n      )}\n\n      <Box\n        sx={{\n          display: 'flex',\n          justifyContent: 'flex-end',\n          pt: 2,\n        }}\n      >\n        <PrimaryButton onClick={handleAccountToDetail}>\n          {b3Lang('global.button.next')}\n        </PrimaryButton>\n      </Box>\n    </Box>\n  );\n}\n","import { MouseEvent, useCallback, useContext, useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Alert, Box } from '@mui/material';\nimport isEmpty from 'lodash-es/isEmpty';\n\nimport { B3CustomForm } from '@/components';\nimport { getContrastColor } from '@/components/outSideComponents/utils/b3CustomStyles';\nimport { useB3Lang } from '@/lib/lang';\nimport { CustomStyleContext } from '@/shared/customStyleButton';\n\nimport { RegisteredContext } from './context/RegisteredContext';\nimport { Country, State, validateExtraFields } from './config';\nimport { PrimaryButton } from './PrimaryButton';\nimport { InformationFourLabels, TipContent } from './styled';\nimport { RegisterFields } from './types';\n\ninterface RegisteredDetailProps {\n  handleBack: () => void;\n  handleNext: () => void;\n}\n\nexport default function RegisteredDetail({ handleBack, handleNext }: RegisteredDetailProps) {\n  const b3Lang = useB3Lang();\n\n  const { state, dispatch } = useContext(RegisteredContext);\n\n  const {\n    state: {\n      portalStyle: { backgroundColor = '#FEF9F5' },\n    },\n  } = useContext(CustomStyleContext);\n\n  const customColor = getContrastColor(backgroundColor);\n\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const {\n    accountType = '1',\n    companyInformation = [],\n    companyAttachment = [],\n    addressBasicFields = [],\n    bcAddressBasicFields = [],\n    countryList = [],\n  } = state;\n\n  const {\n    control,\n    handleSubmit,\n    getValues,\n    formState: { errors },\n    setValue,\n    watch,\n    setError,\n  } = useForm({\n    mode: 'all',\n  });\n  const businessDetailsName = accountType === '1' ? companyInformation[0]?.groupName : '';\n\n  const addressBasicName = accountType === '1' ? 'addressBasicFields' : 'bcAddressBasicFields';\n  const addressBasicList = accountType === '1' ? addressBasicFields : bcAddressBasicFields;\n\n  const addressName = addressBasicList[0]?.groupName || '';\n\n  const handleCountryChange = useCallback(\n    (countryCode: string, stateCode = '') => {\n      const stateList =\n        countryList.find(\n          (country: Country) =>\n            country.countryCode === countryCode || country.countryName === countryCode,\n        )?.states || [];\n      const stateFields = addressBasicList.find(\n        (formFields: RegisterFields) => formFields.name === 'state',\n      );\n\n      if (stateFields) {\n        if (stateList.length > 0) {\n          stateFields.fieldType = 'dropdown';\n          stateFields.options = stateList;\n          stateFields.required = true;\n        } else {\n          stateFields.fieldType = 'text';\n          stateFields.options = [];\n          stateFields.required = false;\n        }\n      }\n\n      setValue(\n        'state',\n        stateCode &&\n          countryCode &&\n          (stateList.find((state: State) => state.stateName === stateCode) ||\n            stateList.length === 0)\n          ? stateCode\n          : '',\n      );\n\n      dispatch({\n        type: 'stateList',\n        payload: {\n          stateList,\n          addressBasicFields,\n          bcAddressBasicFields,\n          [addressBasicName]: [...addressBasicList],\n        },\n      });\n    },\n    // disabling as we don't need dispatchers here\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [addressBasicFields, addressBasicList, addressBasicName, bcAddressBasicFields, countryList],\n  );\n\n  useEffect(() => {\n    const countryValue = getValues('country');\n    const stateValue = getValues('state');\n    handleCountryChange(countryValue, stateValue);\n    // disabling as we only need to run this once and values at starting render are good enough\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const subscription = watch((value, { name, type }) => {\n      const { country, state } = value;\n\n      if (name === 'country' && type === 'change') {\n        handleCountryChange(country, state);\n      }\n    });\n    return () => subscription.unsubscribe();\n    // disabling as we don't need watch in the dependency array\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [countryList, handleCountryChange]);\n\n  const showLoading = (isShow = false) => {\n    dispatch({\n      type: 'loading',\n      payload: {\n        isLoading: isShow,\n      },\n    });\n  };\n\n  const setRegisterFieldsValue = (formFields: Array<RegisterFields>, formData: CustomFieldItems) =>\n    formFields.map((field) => {\n      const item = field;\n      item.default = formData[field.name] || field.default;\n      return field;\n    });\n\n  interface DetailsFormValues {\n    [K: string]: string | number | boolean;\n  }\n\n  const saveDetailsData = () => {\n    const data = [...companyInformation, ...companyAttachment, ...addressBasicList].reduce(\n      (formValues: DetailsFormValues, field: RegisterFields) => {\n        const values = formValues;\n        values[field.name] = getValues(field.name) || field.default;\n\n        return formValues;\n      },\n      {},\n    );\n\n    const newCompanyInformation = setRegisterFieldsValue(companyInformation, data);\n    const newCompanyAttachment = setRegisterFieldsValue(companyAttachment, data);\n    const newAddressBasicFields = setRegisterFieldsValue(addressBasicList, data);\n\n    dispatch({\n      type: 'all',\n      payload: {\n        companyInformation: [...newCompanyInformation],\n        companyAttachment: [...newCompanyAttachment],\n        [addressBasicName]: [...newAddressBasicFields],\n      },\n    });\n  };\n\n  const handleValidateAttachmentFiles = () => {\n    if (accountType === '1') {\n      const formData = getValues();\n      const attachmentsFilesFiled = companyInformation.find(\n        (info) => info.fieldId === 'field_attachments',\n      );\n      if (\n        !isEmpty(attachmentsFilesFiled) &&\n        attachmentsFilesFiled.required &&\n        formData[attachmentsFilesFiled.name].length === 0\n      ) {\n        setError(attachmentsFilesFiled.name, {\n          type: 'required',\n          message: b3Lang('global.validate.required', {\n            label: attachmentsFilesFiled.label ?? '',\n          }),\n        });\n\n        showLoading(false);\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  const handleAccountToFinish = (event: MouseEvent) => {\n    const hasAttachmentsFilesError = handleValidateAttachmentFiles();\n\n    handleSubmit(async (data: CustomFieldItems) => {\n      if (hasAttachmentsFilesError) return;\n      showLoading(true);\n      try {\n        if (accountType === '1') {\n          await Promise.all([\n            validateExtraFields({\n              fields: companyInformation,\n              data,\n              type: 'company',\n              setError,\n            }),\n            validateExtraFields({\n              fields: addressBasicFields,\n              data,\n              type: 'address',\n              setError,\n            }),\n          ]);\n\n          setErrorMessage('');\n        }\n\n        saveDetailsData();\n\n        showLoading(false);\n        handleNext();\n      } catch (error) {\n        if (typeof error === 'string') {\n          setErrorMessage(error);\n        }\n        showLoading(false);\n      }\n    })(event);\n  };\n\n  const handleBackAccount = () => {\n    saveDetailsData();\n\n    handleBack();\n  };\n\n  return (\n    <Box\n      sx={{\n        pl: 1,\n        pr: 1,\n        mt: 2,\n        width: '100%',\n        '& h4': {\n          color: customColor,\n        },\n        '& input, & .MuiFormControl-root .MuiTextField-root, & .MuiDropzoneArea-textContainer, & .MuiSelect-select.MuiSelect-filled, & .MuiTextField-root .MuiInputBase-multiline':\n          {\n            borderRadius: '4px',\n            borderBottomLeftRadius: '0',\n            borderBottomRightRadius: '0',\n          },\n      }}\n    >\n      {errorMessage && (\n        <Alert severity=\"error\">\n          <TipContent>{errorMessage}</TipContent>\n        </Alert>\n      )}\n      {accountType === '1' ? (\n        <Box>\n          <InformationFourLabels>{businessDetailsName}</InformationFourLabels>\n          <B3CustomForm\n            formFields={[...companyInformation]}\n            errors={errors}\n            control={control}\n            getValues={getValues}\n            setValue={setValue}\n            setError={setError}\n          />\n        </Box>\n      ) : null}\n\n      <Box>\n        <InformationFourLabels>{addressName}</InformationFourLabels>\n\n        <B3CustomForm\n          formFields={addressBasicList}\n          errors={errors}\n          control={control}\n          getValues={getValues}\n          setValue={setValue}\n        />\n      </Box>\n\n      <Box\n        sx={{\n          display: 'flex',\n          justifyContent: 'flex-end',\n          pt: 2,\n          gap: 1,\n        }}\n      >\n        <PrimaryButton onClick={handleBackAccount}>{b3Lang('global.button.back')}</PrimaryButton>\n        <PrimaryButton onClick={handleAccountToFinish}>\n          {b3Lang('global.button.next')}\n        </PrimaryButton>\n      </Box>\n    </Box>\n  );\n}\n","import { useContext, useEffect, useState } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { Box, ImageListItem } from '@mui/material';\n\nimport b2bLogo from '@/assets/b2bLogo.png';\nimport { B3Card } from '@/components';\nimport B3Spin from '@/components/spin/B3Spin';\nimport { LOGIN_LANDING_LOCATIONS } from '@/constants';\nimport { useMobile, useScrollBar } from '@/hooks';\nimport { useB3Lang } from '@/lib/lang';\nimport { CustomStyleContext } from '@/shared/customStyleButton';\nimport { GlobalContext } from '@/shared/global';\nimport { getB2BAccountFormFields, getB2BCountries } from '@/shared/service/b2b';\nimport { bcLogin } from '@/shared/service/bc';\nimport { themeFrameSelector, useAppSelector } from '@/store';\nimport { B3SStorage, loginJump, platform } from '@/utils';\nimport b2bLogger from '@/utils/b3Logger';\nimport { getAssetUrl } from '@/utils/getAssetUrl';\nimport { getCurrentCustomerInfo } from '@/utils/loginInfo';\nimport { getTemPlateConfig } from '@/utils/storefrontConfig';\n\nimport { loginCheckout, LoginConfig } from '../Login/config';\nimport { type PageProps } from '../PageProps';\n\nimport { RegisteredContext } from './context/RegisteredContext';\nimport {\n  AccountFormFieldsItems,\n  b2bAddressRequiredFields,\n  companyAttachmentsFields,\n  getAccountFormFields,\n  RegisterFieldsItems,\n} from './config';\nimport RegisterContent from './RegisterContent';\nimport RegisteredStep from './RegisteredStep';\nimport { RegisteredContainer, RegisteredImage } from './styled';\n// 1 bc 2 b2b\nconst formType: Array<number> = [1, 2];\n\nfunction Registered(props: PageProps) {\n  const { setOpenPage } = props;\n\n  const [activeStep, setActiveStep] = useState(0);\n\n  const b3Lang = useB3Lang();\n  const [isMobile] = useMobile();\n\n  const navigate = useNavigate();\n\n  const IframeDocument = useAppSelector(themeFrameSelector);\n  const loginLandingLocation = useAppSelector(({ global }) => global.loginLandingLocation);\n  const [params] = useSearchParams();\n\n  const {\n    state: { isCheckout, isCloseGotoBCHome, logo, registerEnabled },\n    dispatch: globalDispatch,\n  } = useContext(GlobalContext);\n\n  const {\n    state: { isLoading },\n    dispatch,\n  } = useContext(RegisteredContext);\n\n  const {\n    state: {\n      accountLoginRegistration,\n      portalStyle: { backgroundColor = '#FEF9F5' },\n    },\n    dispatch: styleDispatch,\n  } = useContext(CustomStyleContext);\n\n  useEffect(() => {\n    if (!registerEnabled) {\n      navigate('/login');\n    }\n  }, [navigate, registerEnabled]);\n\n  useEffect(() => {\n    const getBCAdditionalFields = async () => {\n      try {\n        if (dispatch) {\n          dispatch({\n            type: 'loading',\n            payload: {\n              isLoading: true,\n            },\n          });\n          dispatch({\n            type: 'finishInfo',\n            payload: {\n              submitSuccess: false,\n            },\n          });\n        }\n\n        // update the storefront config in the context\n        getTemPlateConfig(styleDispatch, globalDispatch);\n\n        const accountFormAllFields = formType.map((item: number) => getB2BAccountFormFields(item));\n\n        const accountFormFields = await Promise.all(accountFormAllFields);\n\n        const newB2bAccountFormFields: AccountFormFieldsItems[] = (\n          accountFormFields[1]?.accountFormFields || []\n        ).map((fields: AccountFormFieldsItems) => {\n          const formFields = fields;\n          if (b2bAddressRequiredFields.includes(fields?.fieldId || '') && fields.groupId === 4) {\n            formFields.isRequired = true;\n            formFields.visible = true;\n          }\n\n          return fields;\n        });\n\n        const bcAccountFormFields = getAccountFormFields(\n          accountFormFields[0]?.accountFormFields || [],\n        );\n        const b2bAccountFormFields = getAccountFormFields(newB2bAccountFormFields || []);\n\n        const { countries } = await getB2BCountries();\n\n        const newAddressInformationFields =\n          b2bAccountFormFields.address?.map(\n            (addressFields: Partial<RegisterFieldsItems>): Partial<RegisterFieldsItems> => {\n              const fields = addressFields;\n              if (addressFields.name === 'country') {\n                fields.options = countries;\n                fields.replaceOptions = {\n                  label: 'countryName',\n                  value: 'countryName',\n                };\n              }\n              return addressFields;\n            },\n          ) || [];\n\n        const newBCAddressInformationFields =\n          bcAccountFormFields.address?.map(\n            (addressFields: Partial<RegisterFieldsItems>): Partial<RegisterFieldsItems> => {\n              const addressFormFields = addressFields;\n              if (addressFields.name === 'country') {\n                addressFormFields.options = countries;\n                const countryDefaultValue = countries.find(\n                  (country: CustomFieldItems) => country.countryName === addressFields.default,\n                );\n                addressFormFields.default =\n                  countryDefaultValue?.countryCode || addressFields.default;\n              }\n              return addressFields;\n            },\n          ) || [];\n        // accountLoginRegistration\n        const { b2b, b2c } = accountLoginRegistration;\n        const accountB2cEnabledInfo = b2c && !b2b;\n        if (dispatch) {\n          dispatch({\n            type: 'all',\n            payload: {\n              accountType: accountB2cEnabledInfo ? '2' : '1',\n              isLoading: false,\n              // account\n              contactInformation: [...(b2bAccountFormFields.contactInformation || [])],\n              bcContactInformation: [...(bcAccountFormFields.contactInformation || [])],\n              additionalInformation: [...(b2bAccountFormFields.additionalInformation || [])],\n              bcAdditionalInformation: [...(bcAccountFormFields.additionalInformation || [])],\n              // detail\n              companyExtraFields: [],\n              companyInformation: [...(b2bAccountFormFields?.businessDetails || [])],\n              companyAttachment: [...companyAttachmentsFields(b3Lang)],\n              addressBasicFields: [...newAddressInformationFields],\n              bcAddressBasicFields: [...newBCAddressInformationFields],\n              countryList: [...countries],\n              // password\n              passwordInformation: [...(b2bAccountFormFields.password || [])],\n              bcPasswordInformation: [...(bcAccountFormFields.password || [])],\n            },\n          });\n        }\n      } catch (e) {\n        b2bLogger.error(e);\n      }\n    };\n\n    getBCAdditionalFields();\n    // disabling as we only need to run this once and values at starting render are good enough\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleNext = async () => {\n    setActiveStep((prevActiveStep: number) => prevActiveStep + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep: number) => prevActiveStep - 1);\n  };\n\n  const clearRegisterInfo = () => {\n    if (dispatch) {\n      dispatch({\n        type: 'all',\n        payload: {\n          accountType: '',\n          isLoading: false,\n          submitSuccess: false,\n          contactInformation: [],\n          additionalInformation: [],\n          companyExtraFields: [],\n          companyInformation: [],\n          companyAttachment: [],\n          addressBasicFields: [],\n          addressExtraFields: [],\n          countryList: [],\n          passwordInformation: [],\n        },\n      });\n    }\n  };\n\n  const handleFinish = async ({ email, password }: LoginConfig) => {\n    dispatch({\n      type: 'loading',\n      payload: {\n        isLoading: true,\n      },\n    });\n\n    if (isCheckout) {\n      try {\n        await loginCheckout({ email, password });\n        window.location.reload();\n      } catch (error) {\n        b2bLogger.error(error);\n      }\n    } else {\n      try {\n        const customer = await bcLogin({ email, password }).then(\n          (res) => res?.data?.login?.customer,\n        );\n\n        if (customer) {\n          B3SStorage.set('loginCustomer', {\n            emailAddress: customer.email,\n            phoneNumber: customer.phone,\n            ...customer,\n          });\n        }\n\n        await getCurrentCustomerInfo();\n\n        clearRegisterInfo();\n\n        if (platform === 'catalyst') {\n          const landingLoginLocation =\n            params.get('redirectTo') === 'check-out'\n              ? LOGIN_LANDING_LOCATIONS.CHECKOUT\n              : loginLandingLocation;\n\n          window.b2b.callbacks.dispatchEvent('on-registered', {\n            email,\n            password,\n            landingLoginLocation,\n          });\n\n          window.location.hash = '';\n\n          return;\n        }\n\n        const isLoginLandLocation = loginJump(navigate);\n\n        if (!isLoginLandLocation) return;\n\n        if (isCloseGotoBCHome) {\n          window.location.href = '/';\n        } else {\n          navigate('/orders');\n        }\n      } catch (error) {\n        b2bLogger.error(error);\n      }\n    }\n\n    dispatch({\n      type: 'loading',\n      payload: {\n        isLoading: false,\n      },\n    });\n  };\n\n  useEffect(() => {\n    IframeDocument?.body.scrollIntoView(true);\n    // disabling as we only need to run this when activeStep changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [activeStep]);\n\n  useScrollBar(false);\n\n  return (\n    <B3Card setOpenPage={setOpenPage}>\n      <RegisteredContainer isMobile={isMobile}>\n        <B3Spin isSpinning={isLoading} tip={b3Lang('global.tips.loading')} transparency=\"0\">\n          <Box\n            sx={{\n              display: 'flex',\n              flexDirection: 'column',\n              width: '100%',\n              alignItems: 'center',\n            }}\n          >\n            <RegisteredImage>\n              <ImageListItem\n                sx={{\n                  maxWidth: '250px',\n                }}\n                onClick={() => {\n                  window.location.href = '/';\n                }}\n              >\n                <img\n                  src={logo || getAssetUrl(b2bLogo)}\n                  alt={b3Lang('global.tips.registerLogo')}\n                  loading=\"lazy\"\n                />\n              </ImageListItem>\n            </RegisteredImage>\n            <RegisteredStep activeStep={activeStep} backgroundColor={backgroundColor}>\n              <RegisterContent\n                activeStep={activeStep}\n                handleBack={handleBack}\n                handleNext={handleNext}\n                handleFinish={handleFinish}\n              />\n            </RegisteredStep>\n          </Box>\n        </B3Spin>\n      </RegisteredContainer>\n    </B3Card>\n  );\n}\n\nexport default Registered;\n","import { ReactNode, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled from '@emotion/styled';\nimport { Box } from '@mui/material';\n\nimport { LoginConfig } from '../Login/config';\n\nimport RegisterComplete from './RegisterComplete';\nimport RegisteredAccount from './RegisteredAccount';\nimport RegisteredDetail from './RegisteredDetail';\nimport RegisteredFinish from './RegisteredFinish';\n\nconst StyledRegisterContent = styled(Box)({\n  '& #b3-customForm-id-name': {\n    '& label[data-shrink=\"true\"]': {\n      whiteSpace: 'break-spaces',\n      minWidth: 'calc(133% - 24px)',\n      transition: 'unset',\n    },\n\n    '& label[data-shrink=\"false\"]': {\n      whiteSpace: 'break-spaces',\n    },\n  },\n});\n\ninterface RegisterContentProps {\n  activeStep: number;\n  handleBack: () => void;\n  handleNext: () => void;\n  handleFinish: ({ email, password }: LoginConfig) => void;\n}\n\nexport default function RegisterContent({\n  activeStep,\n  handleBack,\n  handleNext,\n  handleFinish,\n}: RegisterContentProps) {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const navigate = useNavigate();\n\n  const handleFinishClick = (shouldAutoLogin: boolean) => {\n    if (shouldAutoLogin) {\n      handleFinish({ email, password });\n    } else {\n      navigate('/login');\n    }\n  };\n\n  const renderStep = (step: number): ReactNode => {\n    switch (step) {\n      case 0:\n        return (\n          <RegisteredAccount\n            handleNext={(email) => {\n              setEmail(email);\n              handleNext();\n            }}\n          />\n        );\n\n      case 1:\n        return <RegisteredDetail handleBack={handleBack} handleNext={handleNext} />;\n\n      case 2:\n        return (\n          <RegisterComplete\n            handleBack={handleBack}\n            handleNext={(password) => {\n              setPassword(password);\n              handleNext();\n            }}\n          />\n        );\n\n      case 3:\n        return <RegisteredFinish handleFinish={handleFinishClick} />;\n\n      default:\n        return null;\n    }\n  };\n\n  return <StyledRegisterContent component=\"div\">{renderStep(activeStep)}</StyledRegisterContent>;\n}\n","import { ReactNode, useContext, useMemo } from 'react';\nimport { Box, Step, StepLabel, Stepper, useTheme } from '@mui/material';\n\nimport { getContrastColor } from '@/components/outSideComponents/utils/b3CustomStyles';\nimport { useMobile } from '@/hooks';\nimport { useB3Lang } from '@/lib/lang';\n\nimport { RegisteredContext } from './context/RegisteredContext';\nimport { steps } from './config';\n\ninterface RegisteredStepProps {\n  children: ReactNode;\n  activeStep: number;\n  backgroundColor: string;\n}\n\nexport default function RegisteredStep(props: RegisteredStepProps) {\n  const { children, activeStep, backgroundColor } = props;\n\n  const b3Lang = useB3Lang();\n  const [isMobile] = useMobile();\n  const theme = useTheme();\n\n  const {\n    state: { accountType, submitSuccess },\n  } = useContext(RegisteredContext);\n\n  const pageTitle = useMemo(() => {\n    return submitSuccess\n      ? b3Lang(\n          accountType === '1' ? 'register.title.registerComplete' : 'register.title.accountCreated',\n        )\n      : b3Lang('register.title.accountRegister');\n  }, [submitSuccess, accountType, b3Lang]);\n\n  const customColor = getContrastColor(backgroundColor);\n  return (\n    <Box\n      component=\"div\"\n      sx={{\n        width: isMobile ? '100%' : '537px',\n        boxShadow:\n          '0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px rgba(0, 0, 0, 0.14), 0px 1px 3px rgba(0, 0, 0, 0.12)',\n        borderRadius: '4px',\n        marginTop: '1rem',\n        background: '#FFFFFF',\n        padding: '0 0.8rem 1rem 0.8rem',\n      }}\n    >\n      <Box\n        component=\"h3\"\n        sx={{\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'center',\n          pt: 2,\n          fontSize: '24px',\n          fontWeight: '400',\n          margin: '0.5rem 0',\n          color: customColor,\n        }}\n      >\n        {pageTitle}\n      </Box>\n      {!submitSuccess && (\n        <Stepper\n          activeStep={activeStep}\n          sx={{\n            '& .MuiSvgIcon-root:not(.Mui-active) .MuiStepIcon-text': {\n              fill: getContrastColor(customColor),\n            },\n            '& .MuiSvgIcon-root.Mui-active .MuiStepIcon-text': {\n              fill: getContrastColor(theme.palette.primary.main),\n            },\n          }}\n        >\n          {steps.map((label) => (\n            <Step key={label}>\n              <StepLabel>{b3Lang(label)}</StepLabel>\n            </Step>\n          ))}\n        </Stepper>\n      )}\n      {children}\n    </Box>\n  );\n}\n"],"names":["RegisterComplete","props","b3Lang","useB3Lang","handleBack","handleNext","personalInfo","setPersonalInfo","useState","errorMessage","setErrorMessage","enterEmail","setEnterEmail","captchaKey","setCaptchaKey","isEnabledOnStorefront","setIsEnabledOnStorefront","storefrontSiteKey","setStorefrontSiteKey","isCaptchaMissing","setIsCaptchaMissing","useEffect","async","response","getStorefrontToken","siteKey","e","b2bLogger","error","getIsEnabledOnStorefront","control","handleSubmit","setError","formState","errors","useForm","mode","state","dispatch","useContext","RegisteredContext","blockPendingAccountOrderCreation","GlobalContext","portalStyle","backgroundColor","CustomStyleContext","customColor","getContrastColor","contactInformation","bcContactInformation","passwordInformation","bcPasswordInformation","accountType","additionalInformation","bcAdditionalInformation","addressBasicFields","bcAddressBasicFields","companyInformation","emailMarketingNewsletter","list","passwordInfo","passwordName","groupName","additionalInfo","addressBasicList","length","emailFields","find","item","name","default","getBCFieldsValue","data","bcFields","authentication","force_password_reset","new_password","password","accepts_product_review_abandoned_cart_emails","forEach","deCodeField","custom","form_fields","field","push","bcLabel","value","addresses","origin_channel_id","channelId","channel_ids","getBCAddressField","filter","getBCExtraAddressField","country_code","state_or_province","postal_code","first_name","last_name","trigger_account_created_notification","userItem","storeHash","createBCCompanyUser","jsxs","Box","sx","pl","pr","mt","width","color","borderRadius","borderBottomLeftRadius","borderBottomRightRadius","children","Alert","severity","jsx","TipContent","InformationFourLabels","Fragment","fontSize","fontWeight","marginBottom","marginTop","wordWrap","B3CustomForm","formFields","Typography","variant","display","alignSelf","marginLeft","justifyContent","Captcha","size","handleGetKey","key","pt","gap","PrimaryButton","onClick","event","confirmPassword","type","message","payload","isLoading","isAuto","attachmentsList","fieldType","fileList","attachments","Promise","all","map","file","uploadB2BFile","reduce","res","code","errMsg","newData","fileSize","getFileUrl","customerCreate","customer","accountInfo","_","customerId","b2bFields","companyUserExtraFieldsList","companyUserExtraFields","itemExtraField","fieldName","fieldValue","userExtraFields","companyInfo","companyExtraInfo","toHump","extraFields","addressBasicInfo","addressExtraBasicInfo","addressLine1","addressLine2","addressExtraFields","createB2BCompanyUser","getB2BFieldsValue","id","Number","companyCreate","company","companyStatus","submitSuccess","isAutoApproval","newPasswordInformation","newBcPasswordInformation","saveRegisterPassword","emailMe","fieldId","firstName","lastName","isChecked","sendSubscribersState","email","channel_id","err","handleSendSubscribersState","RegisteredAccount","IframeDocument","useAppSelector","themeFrameSelector","accountLoginRegistration","errorTips","setErrorTips","getValues","setValue","additionName","newContactInformation","contactInfo","info","isTip","tipText","contactName","contactInformationLabel","additionalInformationLabel","showLoading","isShow","emailName","FormControl","RadioGroup","onChange","target","b3HexToRgb","b2b","FormControlLabel","Radio","label","b2c","isRegisterAsB2BUser","isValid","userType","userInfo","companyName","checkUserEmail","checkUserBCEmail","emailError","body","scrollIntoView","validateEmailValue","newContactInfo","newContactItem","extraCompanyUserInformation","Base64","decode","validateBCCompanyUserExtraFields","messageArr","split","newAdditionalInformation","RegisteredDetail","companyAttachment","countryList","watch","businessDetailsName","addressBasicName","addressName","handleCountryChange","useCallback","countryCode","stateCode","stateList","country","countryName","states","stateFields","options","required","stateName","countryValue","stateValue","subscription","unsubscribe","setRegisterFieldsValue","formData","saveDetailsData","formValues","newCompanyInformation","newCompanyAttachment","newAddressBasicFields","handleBackAccount","hasAttachmentsFilesError","handleValidateAttachmentFiles","attachmentsFilesFiled","isEmpty","validateExtraFields","fields","setOpenPage","activeStep","setActiveStep","isMobile","useMobile","navigate","useNavigate","loginLandingLocation","global","params","useSearchParams","isCheckout","isCloseGotoBCHome","logo","registerEnabled","globalDispatch","styleDispatch","getTemPlateConfig","accountFormAllFields","formType","getB2BAccountFormFields","accountFormFields","newB2bAccountFormFields","b2bAddressRequiredFields","includes","groupId","isRequired","visible","bcAccountFormFields","getAccountFormFields","b2bAccountFormFields","countries","getB2BCountries","newAddressInformationFields","address","addressFields","replaceOptions","newBCAddressInformationFields","addressFormFields","countryDefaultValue","companyExtraFields","businessDetails","companyAttachmentsFields","getBCAdditionalFields","clearRegisterInfo","useScrollBar","B3Card","RegisteredContainer","B3Spin","isSpinning","tip","transparency","flexDirection","alignItems","RegisteredImage","ImageListItem","maxWidth","window","location","href","src","getAssetUrl","b2bLogo","alt","loading","RegisteredStep","RegisterContent","prevActiveStep","handleFinish","loginCheckout","reload","bcLogin","then","login","B3SStorage","set","emailAddress","phoneNumber","phone","getCurrentCustomerInfo","platform","landingLoginLocation","get","LOGIN_LANDING_LOCATIONS","CHECKOUT","callbacks","dispatchEvent","hash","loginJump","StyledRegisterContent","styled","whiteSpace","minWidth","transition","setEmail","setPassword","handleFinishClick","shouldAutoLogin","component","step","RegisteredFinish","renderStep","theme","useTheme","pageTitle","useMemo","boxShadow","background","padding","margin","Stepper","fill","palette","primary","main","steps","Step","StepLabel"],"mappings":"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"}