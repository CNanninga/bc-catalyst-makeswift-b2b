{"version":3,"file":"index-BlizwSKm.js","sources":["../../src/pages/AddressList/components/AddressForm.tsx","../../src/pages/AddressList/components/AddressItemCard.tsx","../../src/pages/AddressList/components/DeleteAddressDialog.tsx","../../src/pages/AddressList/components/SetDefaultDialog.tsx","../../src/pages/AddressList/shared/getAddressFields.ts","../../src/pages/AddressList/index.tsx"],"sourcesContent":["import { forwardRef, Ref, useCallback, useEffect, useImperativeHandle, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Checkbox, FormControlLabel, styled } from '@mui/material';\nimport cloneDeep from 'lodash-es/cloneDeep';\n\nimport { B3CustomForm } from '@/components';\nimport B3Dialog from '@/components/B3Dialog';\nimport { useB3Lang } from '@/lib/lang';\nimport {\n  createB2BAddress,\n  createBcAddress,\n  updateB2BAddress,\n  updateBcAddress,\n  validateAddressExtraFields,\n} from '@/shared/service/b2b';\nimport { snackbar } from '@/utils';\n\nimport { AddressItemType } from '../../../types/address';\nimport { deCodeField } from '../../Registered/config';\nimport { b2bShippingBilling, B2bShippingBillingProps } from '../shared/config';\nimport { CountryProps, StateProps } from '../shared/getAddressFields';\n\ninterface AddressFormProps {\n  addressFields: CustomFieldItems[];\n  updateAddressList: (isFirst?: boolean) => void;\n  companyId: string | number;\n  isBCPermission: boolean;\n  countries: CountryProps[];\n}\n\ninterface ShippingBillingProps {\n  isShipping: boolean;\n  isBilling: boolean;\n  isDefaultShipping: boolean;\n  isDefaultBilling: boolean;\n  [key: string]: boolean;\n}\n\nconst StyledCheckbox = styled('div')(() => ({\n  display: 'flex',\n\n  '& div::first-of-type': {\n    marginRight: '2rem',\n  },\n\n  '& div': {\n    minWidth: '45%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n}));\n\nfunction AddressForm(\n  { addressFields, updateAddressList, companyId, isBCPermission, countries }: AddressFormProps,\n  ref: Ref<unknown> | undefined,\n) {\n  const b3Lang = useB3Lang();\n  const [open, setOpen] = useState<boolean>(false);\n  const [type, setType] = useState<string>('');\n  const [isInitialized, setIsInitialized] = useState<boolean>(false);\n  const [addUpdateLoading, setAddUpdateLoading] = useState<boolean>(false);\n  const [allAddressFields, setAllAddressFields] = useState<CustomFieldItems[]>(addressFields);\n  const [addressExtraFields, setAddressExtraFields] = useState<CustomFieldItems>([]);\n  const [originAddressFields, setOriginAddressFields] = useState<CustomFieldItems>([]);\n  const [addressData, setAddressData] = useState<AddressItemType | null>(null);\n  const [shippingBilling, setShippingBilling] = useState<ShippingBillingProps>({\n    isShipping: false,\n    isBilling: false,\n    isDefaultShipping: false,\n    isDefaultBilling: false,\n  });\n\n  const isB2BUser = !isBCPermission;\n\n  const {\n    control,\n    handleSubmit,\n    getValues,\n    formState: { errors },\n    watch,\n    setError,\n    setValue,\n    reset,\n  } = useForm({\n    mode: 'all',\n  });\n\n  const validateCompanyExtraFieldsUnique = async (data: CustomFieldItems) => {\n    try {\n      const extraFields = addressExtraFields.map((field: CustomFieldItems) => ({\n        fieldName: deCodeField(field.name),\n        fieldValue: data[field.name] || field.default,\n      }));\n\n      const res = await validateAddressExtraFields({\n        extraFields,\n      });\n\n      if (res.code !== 200) {\n        const message = res.data?.errMsg || res.message || '';\n\n        const messageArr = message.split(':');\n\n        if (messageArr.length >= 2) {\n          const field = addressExtraFields.find(\n            (field: CustomFieldItems) => deCodeField(field.name) === messageArr[0],\n          );\n          if (field) {\n            setError(field.name, {\n              type: 'manual',\n              message: messageArr[1],\n            });\n            setAddUpdateLoading(false);\n            return false;\n          }\n        }\n        throw message;\n      }\n\n      return true;\n    } catch (error: any) {\n      snackbar.error(error);\n      throw error;\n    }\n  };\n\n  const handleCancelClick = () => {\n    reset();\n    setShippingBilling({\n      isShipping: false,\n      isBilling: false,\n      isDefaultShipping: false,\n      isDefaultBilling: false,\n    });\n    setOpen(false);\n    setType('');\n  };\n\n  const handleSaveB2BAddress = () => {\n    handleSubmit(async (data) => {\n      setAddUpdateLoading(true);\n\n      try {\n        const isValidate = await validateCompanyExtraFieldsUnique(data);\n        if (!isValidate) {\n          return;\n        }\n\n        const extraFields = addressExtraFields.map((field: CustomFieldItems) => ({\n          fieldName: deCodeField(field.name),\n          fieldValue: data[field.name] || field.default,\n        }));\n        const { country: currentCountryCode, state: stateCode } = data;\n\n        let currentCountryName = '';\n        let currentStateName = '';\n        let currentStateCode = stateCode;\n\n        countries.forEach((country: CountryProps) => {\n          const { countryName, countryCode, states } = country;\n          if (countryCode === currentCountryCode) {\n            currentCountryName = countryName;\n\n            if (states.length > 0) {\n              const state = states.find(\n                (item: StateProps) =>\n                  item.stateCode === currentStateCode || item.stateName === currentStateCode,\n              );\n\n              currentStateName = state?.stateName || currentStateName;\n              currentStateCode = state?.stateCode || currentStateCode;\n            } else {\n              currentStateCode = '';\n              currentStateName = stateCode;\n            }\n          }\n        });\n\n        const params = {\n          ...data,\n          companyId: Number(companyId),\n          extraFields,\n          isShipping: shippingBilling.isShipping ? 1 : 0,\n          isBilling: shippingBilling.isBilling ? 1 : 0,\n          isDefaultShipping: shippingBilling.isDefaultShipping ? 1 : 0,\n          isDefaultBilling: shippingBilling.isDefaultBilling ? 1 : 0,\n          country: currentCountryName,\n          countryCode: currentCountryCode,\n          state: currentStateName,\n          stateCode: currentStateCode,\n        };\n\n        if (type === 'add') {\n          await createB2BAddress(params);\n          snackbar.success(b3Lang('addresses.addressForm.newAddressAdded'));\n        } else if (type === 'edit' && addressData) {\n          const { id } = addressData;\n\n          await updateB2BAddress({\n            ...params,\n            id: Number(id),\n          });\n\n          snackbar.success(b3Lang('addresses.addressForm.addressUpdated'));\n        }\n        setShippingBilling({\n          isShipping: false,\n          isBilling: false,\n          isDefaultShipping: false,\n          isDefaultBilling: false,\n        });\n        setOpen(false);\n\n        await updateAddressList(true);\n      } catch (err: any) {\n        snackbar.error(err);\n      } finally {\n        setAddUpdateLoading(false);\n      }\n    })();\n  };\n\n  const handleSaveBcAddress = () => {\n    handleSubmit(async (data) => {\n      setAddUpdateLoading(true);\n\n      try {\n        const extraFields = addressExtraFields.map((field: CustomFieldItems) => ({\n          name: field.bcLabel,\n          value: data[field.name] || field.default,\n        }));\n\n        const { country: currentCountryCode, state: stateCode } = data;\n\n        let currentCountryName = '';\n        let currentStateName = '';\n        let currentStateCode = stateCode;\n\n        countries.forEach((country: CountryProps) => {\n          const { countryName, countryCode, states } = country;\n          if (countryCode === currentCountryCode) {\n            currentCountryName = countryName;\n\n            if (states.length > 0) {\n              const state = states.find(\n                (item: StateProps) =>\n                  item.stateCode === currentStateCode || item.stateName === currentStateCode,\n              );\n\n              currentStateName = state?.stateName || currentStateName;\n              currentStateCode = state?.stateCode || currentStateCode;\n            } else {\n              currentStateCode = '';\n              currentStateName = stateCode;\n            }\n          }\n        });\n\n        const params = {\n          ...data,\n          formFields: extraFields,\n          country: currentCountryName,\n          countryCode: currentCountryCode,\n          state: currentStateName,\n          stateCode: currentStateCode,\n          addressType: '',\n        };\n\n        if (type === 'add') {\n          await createBcAddress(params);\n          snackbar.success(b3Lang('addresses.addressForm.newAddressAdded'));\n        } else if (type === 'edit' && addressData) {\n          const { bcAddressId } = addressData;\n\n          if (bcAddressId) {\n            await updateBcAddress({\n              ...params,\n              id: Number(bcAddressId),\n            });\n          }\n          snackbar.success(b3Lang('addresses.addressForm.addressUpdated'));\n        }\n        setOpen(false);\n\n        await updateAddressList(true);\n      } catch (err: any) {\n        snackbar.error(err);\n      } finally {\n        setAddUpdateLoading(false);\n      }\n    })();\n  };\n\n  const handleSaveAddress = () => {\n    if (isB2BUser) {\n      handleSaveB2BAddress();\n    } else {\n      handleSaveBcAddress();\n    }\n  };\n\n  const handleOpenAddEditAddressClick = (type: string, data: AddressItemType) => {\n    if (type === 'add' && originAddressFields.length > 0) {\n      allAddressFields.forEach((field: CustomFieldItems) => {\n        const addressField = field;\n        if (field.custom) {\n          if (isB2BUser) {\n            const originFields = originAddressFields.filter(\n              (item: CustomFieldItems) => item.name === field.name,\n            )[0];\n            addressField.default = originFields.default || '';\n          } else {\n            const originFields = originAddressFields.filter(\n              (item: CustomFieldItems) =>\n                item.name === field.name || item.bcLabel === field.bcLabel,\n            )[0];\n            addressField.default = originFields.default || '';\n          }\n        }\n      });\n    }\n\n    reset();\n    setAddressData(data);\n    setType(type);\n    setOpen(true);\n    setIsInitialized(false);\n  };\n\n  useImperativeHandle(ref, () => ({\n    handleOpenAddEditAddressClick,\n  }));\n\n  const handleChangeAddressType = (check: boolean, name: string) => {\n    if (name === 'isShipping') {\n      setShippingBilling({\n        ...shippingBilling,\n        [name]: check,\n        isDefaultShipping: false,\n      });\n    } else {\n      setShippingBilling({\n        ...shippingBilling,\n        [name]: check,\n        isDefaultBilling: false,\n      });\n    }\n  };\n\n  useEffect(() => {\n    const translatedAddressFields = addressFields.map((element) => {\n      return {\n        ...element,\n        label: b3Lang(element.idLang) || element.label,\n        default: !isB2BUser && element.fieldId === 'field_21' ? '' : element.default,\n      };\n    });\n\n    setAllAddressFields(translatedAddressFields);\n    const extraFields = addressFields.filter((field: CustomFieldItems) => field.custom);\n\n    setAddressExtraFields(extraFields);\n\n    if (originAddressFields.length === 0) {\n      const fields = cloneDeep(addressFields);\n      setOriginAddressFields(fields);\n    }\n    // disabling due to errors withing b3Lang\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [addressFields, originAddressFields.length, isB2BUser]);\n\n  const handleBackFillData = useCallback(() => {\n    if (addressData) {\n      const {\n        isShipping,\n        isBilling,\n        isDefaultShipping,\n        isDefaultBilling,\n        state,\n        stateCode,\n        countryCode,\n        extraFields,\n      } = addressData;\n\n      const currentCountry = countries.filter(\n        (country: CountryProps) => country.countryCode === countryCode,\n      );\n\n      setShippingBilling({\n        isShipping: isShipping === 1,\n        isBilling: isBilling === 1,\n        isDefaultShipping: isDefaultShipping === 1,\n        isDefaultBilling: isDefaultBilling === 1,\n      });\n\n      allAddressFields.forEach((currentField: CustomFieldItems) => {\n        const field = currentField;\n        if (field.custom && extraFields.length > 0) {\n          if (isB2BUser) {\n            const name = deCodeField(field.name);\n            const currentExtraField = extraFields.find(\n              (item: CustomFieldItems) => item.fieldName === name,\n            );\n\n            const originFields = originAddressFields.find(\n              (item: CustomFieldItems) => item.name === name,\n            );\n\n            if (currentExtraField) {\n              setValue(field.name, currentExtraField.fieldValue || '');\n\n              field.default = currentExtraField.fieldValue || '';\n            } else {\n              setValue(field.name, '');\n              field.default = originFields.default;\n            }\n          } else {\n            const currentExtraField = extraFields.find(\n              (item: CustomFieldItems) =>\n                item.fieldName === field.name || item.fieldName === field.bcLabel,\n            );\n\n            const originFields = originAddressFields.filter(\n              (item: CustomFieldItems) =>\n                item.name === field.name || item.bcLabel === field.bcLabel,\n            )[0];\n\n            if (currentExtraField) {\n              setValue(field.name, currentExtraField.fieldValue || '');\n\n              field.default = currentExtraField.fieldValue || originFields.default;\n            } else {\n              setValue(field.name, '');\n              field.default = originFields.default;\n            }\n          }\n        } else if (field.name === 'country') {\n          setValue(field.name, countryCode);\n        } else if (field.name === 'state') {\n          setValue(field.name, stateCode || state);\n          if (currentCountry[0]) {\n            const { states } = currentCountry[0];\n\n            if (states.length > 0) {\n              field.options = states;\n              field.fieldType = 'dropdown';\n              field.required = true;\n            } else {\n              field.options = [];\n              field.fieldType = 'text';\n              field.required = false;\n            }\n          }\n        } else {\n          setValue(\n            field.name,\n            addressData[field.name] === 'undefined' ? '' : addressData[field.name],\n          );\n        }\n      });\n    }\n  }, [addressData, countries, isB2BUser, originAddressFields, setValue, allAddressFields]);\n\n  useEffect(() => {\n    if (open && type === 'edit' && addressData && !isInitialized) {\n      handleBackFillData();\n      setIsInitialized(true);\n    }\n  }, [open, type, addressData, isInitialized, handleBackFillData]);\n\n  useEffect(() => {\n    const handleCountryChange = (countryCode: string) => {\n      const stateList =\n        countries.find((country: CountryProps) => country.countryCode === countryCode)?.states ||\n        [];\n      const stateFields = allAddressFields.find(\n        (formFields: CustomFieldItems) => formFields.name === 'state',\n      );\n\n      if (stateFields) {\n        if (stateList.length > 0) {\n          stateFields.fieldType = 'dropdown';\n          stateFields.options = stateList;\n          stateFields.required = true;\n        } else {\n          stateFields.fieldType = 'text';\n          stateFields.options = [];\n          stateFields.required = false;\n        }\n      }\n\n      setValue('state', '');\n\n      setAllAddressFields([...allAddressFields]);\n    };\n\n    const subscription = watch((value, { name, type }) => {\n      const { country } = value;\n\n      if (name === 'country' && type === 'change') {\n        handleCountryChange(country);\n      }\n    });\n    return () => subscription.unsubscribe();\n    // disabling the next eslint rule\n    // setValue -> not needed as is a dispatcher\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [allAddressFields, countries, watch]);\n\n  return (\n    <B3Dialog\n      isOpen={open}\n      title={\n        type === 'add'\n          ? b3Lang('addresses.addressForm.addNewAddress')\n          : b3Lang('addresses.addressForm.editAddress')\n      }\n      leftSizeBtn={b3Lang('addresses.addressForm.cancel')}\n      rightSizeBtn={b3Lang('addresses.addressForm.saveAddress')}\n      handleLeftClick={handleCancelClick}\n      handRightClick={handleSaveAddress}\n      loading={addUpdateLoading}\n      isShowBordered\n    >\n      {isB2BUser && (\n        <>\n          <p>{b3Lang('addresses.addressForm.selectAddressType')}</p>\n\n          <StyledCheckbox>\n            {b2bShippingBilling.map((item: B2bShippingBillingProps) => {\n              const { child, name, idLang } = item;\n\n              return (\n                <div key={name}>\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        checked={shippingBilling[name]}\n                        onChange={(e) => {\n                          handleChangeAddressType(e.target.checked, name);\n                        }}\n                      />\n                    }\n                    label={b3Lang(idLang)}\n                  />\n                  {child && (\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={shippingBilling[child.name]}\n                          onChange={() => {\n                            setShippingBilling({\n                              ...shippingBilling,\n                              [child.name]: !shippingBilling[child.name],\n                            });\n                          }}\n                        />\n                      }\n                      label={b3Lang(child.idLang)}\n                      sx={{\n                        display: shippingBilling[name] ? '' : 'none',\n                      }}\n                    />\n                  )}\n                </div>\n              );\n            })}\n          </StyledCheckbox>\n        </>\n      )}\n      <B3CustomForm\n        formFields={allAddressFields}\n        errors={errors}\n        control={control}\n        getValues={getValues}\n        setValue={setValue}\n      />\n    </B3Dialog>\n  );\n}\n\nconst B3AddressForm = forwardRef(AddressForm);\n\nexport default B3AddressForm;\n","import { PropsWithChildren } from 'react';\nimport styled from '@emotion/styled';\nimport { Delete as DeleteIcon, Edit as EditIcon } from '@mui/icons-material';\nimport { Theme, useTheme } from '@mui/material';\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\n\nimport { B3Tag } from '@/components';\nimport CustomButton from '@/components/button/CustomButton';\nimport { useB3Lang } from '@/lib/lang';\n\nimport { AddressItemType } from '../../../types/address';\n\ninterface OrderItemCardProps {\n  item: AddressItemType;\n  onEdit?: () => void;\n  onDelete?: () => void;\n  onSetDefault?: () => void;\n}\n\ninterface TagBoxProps {\n  marginBottom: number | string;\n}\n\nconst TagBox = styled('div')(({ marginBottom }: TagBoxProps) => ({\n  marginBottom,\n  '& > span:not(:last-child)': {\n    marginRight: '4px',\n  },\n}));\n\ninterface FlexProps {\n  theme?: Theme;\n}\n\nconst Flex = styled('div')(({ theme }: FlexProps) => ({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n  marginTop: theme!.spacing(3),\n}));\n\nfunction Tag({ children }: PropsWithChildren) {\n  return (\n    <B3Tag color=\"#C4DD6C\" textColor=\"rgba(0, 0, 0, 0.87)\">\n      {children}\n    </B3Tag>\n  );\n}\n\nfunction Text({ children }: PropsWithChildren) {\n  return <Typography variant=\"body1\">{children}</Typography>;\n}\n\nexport function AddressItemCard({\n  item: addressInfo,\n  onEdit,\n  onDelete,\n  onSetDefault,\n}: OrderItemCardProps) {\n  const theme = useTheme();\n  const b3Lang = useB3Lang();\n  const hasPermission = Boolean(onEdit || onDelete || onSetDefault);\n\n  const isDefaultShipping = addressInfo.isDefaultShipping === 1;\n  const isDefaultBilling = addressInfo.isDefaultBilling === 1;\n\n  return (\n    <Card key={addressInfo.id}>\n      <CardContent\n        sx={{\n          color: '#313440',\n          wordBreak: 'break-word',\n        }}\n      >\n        {addressInfo.label && (\n          <Typography\n            variant=\"h5\"\n            sx={{\n              marginBottom:\n                isDefaultShipping || isDefaultBilling ? theme.spacing(1) : theme.spacing(3),\n              color: 'rgba(0, 0, 0, 0.87)',\n            }}\n          >\n            {addressInfo.label}\n          </Typography>\n        )}\n\n        <TagBox marginBottom={isDefaultShipping || isDefaultBilling ? theme.spacing(3) : 0}>\n          {isDefaultShipping && <Tag>{b3Lang('addresses.addressItemCard.defaultShipping')}</Tag>}\n          {isDefaultBilling && <Tag>{b3Lang('addresses.addressItemCard.defaultBilling')}</Tag>}\n        </TagBox>\n\n        <Text>\n          {addressInfo.firstName} {addressInfo.lastName}\n        </Text>\n        <Text>{addressInfo.company || ''}</Text>\n        <Text>{addressInfo.addressLine1}</Text>\n        <Text>{addressInfo.addressLine2 === 'undefined' ? '' : addressInfo.addressLine2}</Text>\n        <Text>\n          {addressInfo.city}, {addressInfo.state} {addressInfo.zipCode}, {addressInfo.country}\n        </Text>\n        <Text>{addressInfo.phoneNumber}</Text>\n\n        {hasPermission && (\n          <Flex>\n            {onSetDefault && (\n              <CustomButton\n                variant=\"text\"\n                sx={{\n                  ml: '-8px',\n                }}\n                onClick={onSetDefault}\n              >\n                {b3Lang('addresses.addressItemCard.setAsDefault')}\n              </CustomButton>\n            )}\n            <Box\n              sx={{\n                flex: 1,\n                display: 'flex',\n                justifyContent: 'flex-end',\n                gap: '8px',\n              }}\n            >\n              {onEdit && (\n                <IconButton aria-label=\"edit\" size=\"small\" onClick={onEdit}>\n                  <EditIcon fontSize=\"inherit\" />\n                </IconButton>\n              )}\n\n              {onDelete && (\n                <IconButton aria-label=\"delete\" size=\"small\" onClick={onDelete}>\n                  <DeleteIcon fontSize=\"inherit\" />\n                </IconButton>\n              )}\n            </Box>\n          </Flex>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","import { Dispatch, SetStateAction } from 'react';\nimport { Box } from '@mui/material';\n\nimport B3Dialog from '@/components/B3Dialog';\nimport { useMobile } from '@/hooks';\nimport { useB3Lang } from '@/lib/lang';\nimport { deleteB2BAddress, deleteBCCustomerAddress } from '@/shared/service/b2b';\nimport { snackbar } from '@/utils';\n\nimport { AddressItemType } from '../../../types/address';\n\ninterface DeleteAddressDialogProps {\n  isOpen: boolean;\n  closeDialog: () => void;\n  setIsLoading: Dispatch<SetStateAction<boolean>>;\n  addressData?: AddressItemType;\n  updateAddressList: (isFirst?: boolean) => void;\n  companyId: string | number;\n  isBCPermission: boolean;\n}\n\nexport default function DeleteAddressDialog(props: DeleteAddressDialogProps) {\n  const {\n    isOpen,\n    closeDialog,\n    addressData,\n    updateAddressList,\n    setIsLoading,\n    companyId,\n    isBCPermission,\n  } = props;\n\n  const [isMobile] = useMobile();\n  const b3Lang = useB3Lang();\n\n  const handleDelete = async () => {\n    if (!addressData) {\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      closeDialog();\n\n      const { id = '', bcAddressId = '' } = addressData;\n\n      if (!isBCPermission) {\n        await deleteB2BAddress({\n          addressId: id,\n          companyId,\n        });\n      } else {\n        await deleteBCCustomerAddress({\n          bcAddressId,\n        });\n      }\n\n      snackbar.success(b3Lang('addresses.deleteAddressDialog.successfullyDeleted'));\n\n      updateAddressList();\n    } catch (e) {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <B3Dialog\n      isOpen={isOpen}\n      title={b3Lang('addresses.deleteAddressDialog.deleteAddress')}\n      leftSizeBtn={b3Lang('addresses.deleteAddressDialog.cancel')}\n      rightSizeBtn={b3Lang('addresses.deleteAddressDialog.delete')}\n      handleLeftClick={closeDialog}\n      handRightClick={handleDelete}\n      rightStyleBtn={{\n        color: '#D32F2F',\n      }}\n      isShowBordered={false}\n    >\n      <Box\n        sx={{\n          display: 'flex',\n          alignItems: isMobile ? 'start' : 'center',\n          justifyContent: isMobile ? 'center' : 'start',\n          width: isMobile ? '100%' : '450px',\n          height: '100%',\n        }}\n      >\n        {b3Lang('addresses.deleteAddressDialog.confirmDelete')}\n      </Box>\n    </B3Dialog>\n  );\n}\n","import { ChangeEvent, Dispatch, SetStateAction, useEffect, useState } from 'react';\nimport { Box, Checkbox, FormControlLabel, FormGroup } from '@mui/material';\n\nimport B3Dialog from '@/components/B3Dialog';\nimport { useMobile } from '@/hooks';\nimport { useB3Lang } from '@/lib/lang';\nimport { updateB2BAddress } from '@/shared/service/b2b';\nimport { snackbar } from '@/utils';\n\nimport { AddressItemType } from '../../../types/address';\n\ninterface SetDefaultDialogProps {\n  isOpen: boolean;\n  closeDialog: () => void;\n  setIsLoading: Dispatch<SetStateAction<boolean>>;\n  addressData?: AddressItemType;\n  updateAddressList: (isFirst?: boolean) => void;\n  companyId: string | number;\n}\n\nexport default function SetDefaultDialog(props: SetDefaultDialogProps) {\n  const { isOpen, closeDialog, setIsLoading, addressData, updateAddressList, companyId } = props;\n\n  const [isMobile] = useMobile();\n\n  const b3Lang = useB3Lang();\n\n  const [address, setAddress] = useState<AddressItemType>();\n\n  useEffect(() => {\n    setAddress(addressData);\n  }, [addressData]);\n\n  const handleChange =\n    (key: 'isDefaultShipping' | 'isDefaultBilling') => (e: ChangeEvent<HTMLInputElement>) => {\n      const { checked } = e.target;\n\n      if (address) {\n        const newAddress = {\n          ...address,\n        };\n        if (key === 'isDefaultShipping') {\n          newAddress.isDefaultShipping = checked ? 1 : 0;\n          newAddress.isShipping = checked ? 1 : newAddress.isShipping;\n        }\n        if (key === 'isDefaultBilling') {\n          newAddress.isDefaultBilling = checked ? 1 : 0;\n          newAddress.isBilling = checked ? 1 : newAddress.isShipping;\n        }\n        setAddress(newAddress);\n      }\n    };\n\n  const handleSetDefault = async () => {\n    try {\n      setIsLoading(true);\n      closeDialog();\n\n      await updateB2BAddress({\n        ...address,\n        companyId,\n      });\n\n      snackbar.success(b3Lang('addresses.setDefaultDialog.successfullySet'));\n\n      updateAddressList();\n    } catch (e) {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <B3Dialog\n      isOpen={isOpen}\n      title={b3Lang('addresses.setDefaultDialog.setDefaultAddress')}\n      leftSizeBtn={b3Lang('addresses.setDefaultDialog.cancel')}\n      rightSizeBtn=\"set\"\n      handleLeftClick={closeDialog}\n      handRightClick={handleSetDefault}\n    >\n      <Box\n        sx={{\n          display: 'flex',\n          alignItems: isMobile ? 'start' : 'center',\n          width: isMobile ? '100%' : '450px',\n          height: '100%',\n        }}\n      >\n        {address && (\n          <Box\n            sx={{\n              padding: isMobile ? '0' : '10px 0',\n            }}\n          >\n            <FormGroup>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={address.isDefaultShipping === 1}\n                    onChange={handleChange('isDefaultShipping')}\n                  />\n                }\n                label={b3Lang('addresses.setDefaultDialog.setDefaultShippingAddress')}\n              />\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={address.isDefaultBilling === 1}\n                    onChange={handleChange('isDefaultBilling')}\n                  />\n                }\n                label={b3Lang('addresses.setDefaultDialog.setDefaultBillingAddress')}\n              />\n            </FormGroup>\n          </Box>\n        )}\n      </Box>\n    </B3Dialog>\n  );\n}\n","import { getB2BAccountFormFields, getB2BAddressExtraFields } from '@/shared/service/b2b';\nimport b2bLogger from '@/utils/b3Logger';\n\nimport {\n  AccountFormFieldsItems,\n  getAccountFormFields,\n  RegisterFieldsItems,\n} from '../../Registered/config';\n\nimport { b2bAddressFields } from './config';\n\nexport interface StateProps {\n  stateCode: string;\n  stateName: string;\n}\n\nexport interface CountryProps {\n  countryCode: string;\n  countryName: string;\n  id: string | number;\n  states: StateProps[];\n}\ninterface B2bExtraFieldsProps {\n  defaultValue: string;\n  fieldName: string;\n  fieldType: string | number;\n  isRequired: boolean;\n  labelName: string;\n  listOfValue: null | Array<string>;\n  maximumLength: string | number | null;\n  maximumValue: string | number | null;\n  numberOfRows: string | number | null;\n  visibleToEnduser: boolean;\n}\n\ninterface ExtraFieldsProp extends RegisterFieldsItems {\n  type: string;\n  variant: string;\n  visible: boolean;\n  xs: number;\n}\n\nconst convertExtraFields = (extraFields: B2bExtraFieldsProps[]): [] | ExtraFieldsProp[] => {\n  if (extraFields.length === 0) return [];\n  const visibleFields =\n    extraFields.filter((field: B2bExtraFieldsProps) => field.visibleToEnduser) || [];\n\n  if (visibleFields?.length === 0) return [];\n\n  const b2bExtraFields = visibleFields.map((field: B2bExtraFieldsProps) => {\n    const fields = {\n      ...field,\n      groupId: 4,\n      visible: field.visibleToEnduser,\n    };\n\n    return fields;\n  });\n\n  const convertB2BExtraFields = getAccountFormFields(b2bExtraFields).address;\n\n  convertB2BExtraFields.map((extraField: ExtraFieldsProp) => {\n    const field = extraField;\n    field.custom = true;\n\n    return extraField;\n  });\n\n  return convertB2BExtraFields;\n};\n\nconst getBcAddressFields = async () => {\n  try {\n    const { accountFormFields } = await getB2BAccountFormFields(1);\n\n    const addressFields = accountFormFields.filter(\n      (field: AccountFormFieldsItems) => field.groupId === 4,\n    );\n\n    const bcAddressFields = getAccountFormFields(addressFields).address;\n\n    return bcAddressFields;\n  } catch (e) {\n    b2bLogger.error(e);\n  }\n  return undefined;\n};\n\nconst getB2BAddressFields = async () => {\n  try {\n    const res = await getB2BAddressExtraFields();\n    const b2bExtraFields = convertExtraFields(res.addressExtraFields);\n    const addressFields = [...b2bAddressFields, ...b2bExtraFields];\n    return addressFields;\n  } catch (e) {\n    b2bLogger.error(e);\n  }\n  return [];\n};\n\nexport const getAddressFields = async (isB2BUser: boolean, countries: CountryProps) => {\n  let allAddressFields: CustomFieldItems[] = [];\n\n  try {\n    if (isB2BUser) {\n      const addressFields = await getB2BAddressFields();\n\n      if (addressFields) allAddressFields = addressFields;\n    } else {\n      const bcAddressFields = await getBcAddressFields();\n      allAddressFields = bcAddressFields;\n    }\n\n    allAddressFields.map((addressField: CustomFieldItems) => {\n      const field = addressField;\n      if (addressField.name === 'country') {\n        field.options = countries;\n        field.required = true;\n      }\n\n      if (addressField.name === 'state') {\n        field.fieldType = 'text';\n        field.required = false;\n      }\n\n      return addressField;\n    });\n\n    return allAddressFields;\n  } catch (e) {\n    b2bLogger.error(e);\n  }\n  return [];\n};\n","import { useContext, useEffect, useRef, useState } from 'react';\nimport { Box } from '@mui/material';\n\nimport B3Filter from '@/components/filter/B3Filter';\nimport B3Spin from '@/components/spin/B3Spin';\nimport { B3PaginationTable, GetRequestList } from '@/components/table/B3PaginationTable';\nimport { useCardListColumn, useTableRef, useVerifyCreatePermission } from '@/hooks';\nimport { useB3Lang } from '@/lib/lang';\nimport { GlobalContext } from '@/shared/global';\nimport {\n  getB2BAddress,\n  getB2BAddressConfig,\n  getB2BCountries,\n  getBCCustomerAddress,\n} from '@/shared/service/b2b';\nimport { isB2BUserSelector, useAppSelector } from '@/store';\nimport { CustomerRole } from '@/types';\nimport { b2bPermissionsMap, snackbar } from '@/utils';\nimport b2bLogger from '@/utils/b3Logger';\n\nimport { AddressItemType, BCAddressItemType } from '../../types/address';\n\nimport B3AddressForm from './components/AddressForm';\nimport { AddressItemCard } from './components/AddressItemCard';\nimport DeleteAddressDialog from './components/DeleteAddressDialog';\nimport SetDefaultDialog from './components/SetDefaultDialog';\nimport { convertBCToB2BAddress, filterFormConfig } from './shared/config';\nimport { CountryProps, getAddressFields } from './shared/getAddressFields';\n\nconst permissionKeys = [\n  b2bPermissionsMap.addressesCreateActionsPermission,\n  b2bPermissionsMap.addressesUpdateActionsPermission,\n  b2bPermissionsMap.addressesDeleteActionsPermission,\n];\ninterface RefCurrentProps extends HTMLInputElement {\n  handleOpenAddEditAddressClick(type: 'add'): void;\n  handleOpenAddEditAddressClick(type: 'edit', data: AddressItemType): void;\n}\n\ntype BCAddress = {\n  node: BCAddressItemType;\n};\n\ninterface FilterSearchProps {\n  country?: string;\n  state?: string;\n  city?: string;\n  search?: string;\n}\n\ntype Dialog = 'delete' | 'setDefault';\n\ninterface Config {\n  key: string;\n  isEnabled: string;\n}\nconst isConfigEnabled = (configs: Config[] | undefined, key: string) => {\n  return (configs ?? []).find((config) => config.key === key)?.isEnabled === '1';\n};\n\nfunction Address() {\n  const isB2BUser = useAppSelector(isB2BUserSelector);\n  const companyInfoId = useAppSelector(({ company }) => company.companyInfo.id);\n  const role = useAppSelector(({ company }) => company.customer.role);\n  const salesRepCompanyId = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.id);\n  const isAgenting = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.isAgenting);\n  const {\n    state: { addressConfig },\n    dispatch,\n  } = useContext(GlobalContext);\n\n  const { selectCompanyHierarchyId } = useAppSelector(\n    ({ company }) => company.companyHierarchyInfo,\n  );\n\n  const b3Lang = useB3Lang();\n  const isExtraLarge = useCardListColumn();\n  const [paginationTableRef] = useTableRef();\n\n  const addEditAddressRef = useRef<RefCurrentProps | null>(null);\n\n  const [isRequestLoading, setIsRequestLoading] = useState(false);\n  const [addressFields, setAddressFields] = useState<CustomFieldItems[]>([]);\n  const [countries, setCountries] = useState<CountryProps[]>([]);\n  const [filterData, setFilterData] = useState<Partial<FilterSearchProps>>({\n    search: '',\n  });\n\n  const companyId =\n    role === CustomerRole.SUPER_ADMIN && isAgenting ? salesRepCompanyId : companyInfoId;\n\n  const isBCPermission = !isB2BUser || (role === CustomerRole.SUPER_ADMIN && !isAgenting);\n\n  useEffect(() => {\n    const handleGetAddressFields = async () => {\n      const { countries } = await getB2BCountries();\n\n      setCountries(countries);\n      setIsRequestLoading(true);\n      try {\n        const addressFields = await getAddressFields(!isBCPermission, countries);\n        setAddressFields(addressFields || []);\n      } catch (err) {\n        b2bLogger.error(err);\n      } finally {\n        setIsRequestLoading(false);\n      }\n    };\n\n    handleGetAddressFields();\n  }, [isBCPermission]);\n\n  const getAddressList: GetRequestList<FilterSearchProps, AddressItemType> = async (\n    params = {},\n  ) => {\n    if (!isBCPermission) {\n      const { edges = [], totalCount } = await getB2BAddress({ companyId, ...params });\n\n      return {\n        edges,\n        totalCount,\n      };\n    }\n\n    const { edges = [], totalCount } = await getBCCustomerAddress({ ...params });\n\n    return {\n      edges: edges.map((address: BCAddress) => ({\n        node: convertBCToB2BAddress(address.node),\n      })),\n      totalCount,\n    };\n  };\n\n  const handleChange = (key: string, value: string) => {\n    if (key === 'search') {\n      setFilterData({\n        ...filterData,\n        search: value,\n      });\n    }\n  };\n\n  const handleFilterChange = (values: FilterSearchProps) => {\n    setFilterData({\n      ...filterData,\n      country: values.country || '',\n      state: values.state || '',\n      city: values.city || '',\n    });\n  };\n\n  const updateAddressList = () => {\n    paginationTableRef.current?.refresh();\n  };\n\n  const [editPermission, setEditPermission] = useState(false);\n\n  const [openDialog, setOpenDialog] = useState<Dialog>();\n  const closeDialog = () => setOpenDialog(undefined);\n\n  const [currentAddress, setCurrentAddress] = useState<AddressItemType>();\n\n  const [isCreatePermission, updateActionsPermission, deleteActionsPermission] =\n    useVerifyCreatePermission(permissionKeys);\n\n  useEffect(() => {\n    const getEditPermission = async () => {\n      if (isBCPermission) {\n        setEditPermission(true);\n        return;\n      }\n\n      if (updateActionsPermission) {\n        try {\n          let configList = addressConfig;\n          if (!configList) {\n            const { addressConfig: newConfig } = await getB2BAddressConfig();\n            configList = newConfig;\n\n            dispatch({\n              type: 'common',\n              payload: {\n                addressConfig: configList,\n              },\n            });\n          }\n\n          const editPermission =\n            isConfigEnabled(configList, 'address_book') &&\n            isConfigEnabled(configList, role === 3 ? 'address_sales_rep' : 'address_admin');\n\n          setEditPermission(editPermission);\n        } catch (error) {\n          b2bLogger.error(error);\n        }\n      }\n    };\n    getEditPermission();\n  }, [addressConfig, dispatch, isBCPermission, role, updateActionsPermission]);\n\n  const handleCreate = () => {\n    if (!editPermission) {\n      snackbar.error(b3Lang('addresses.noPermissionToAdd'));\n      return;\n    }\n\n    addEditAddressRef.current?.handleOpenAddEditAddressClick('add');\n  };\n\n  const handleEdit = (row: AddressItemType) => {\n    if (!editPermission) {\n      snackbar.error(b3Lang('addresses.noPermissionToEdit'));\n      return;\n    }\n\n    addEditAddressRef.current?.handleOpenAddEditAddressClick('edit', row);\n  };\n\n  const handleDelete = (address: AddressItemType) => {\n    if (!editPermission) {\n      snackbar.error(b3Lang('addresses.noPermissionToEdit'));\n      return;\n    }\n\n    setCurrentAddress({ ...address });\n    setOpenDialog('delete');\n  };\n\n  const handleSetDefault = (address: AddressItemType) => {\n    setCurrentAddress({ ...address });\n    setOpenDialog('setDefault');\n  };\n\n  const addButtonConfig = {\n    isEnabled: isBCPermission || (editPermission && isCreatePermission),\n    customLabel: b3Lang('addresses.addNewAddress'),\n  };\n\n  const translatedFilterFormConfig = filterFormConfig.map(({ idLang, ...element }) => ({\n    ...element,\n    label: b3Lang(idLang),\n  }));\n\n  const currentUseCompanyHierarchyId = Number(selectCompanyHierarchyId) || Number(companyId);\n\n  const canEdit = updateActionsPermission || isBCPermission;\n  const canDelete = deleteActionsPermission || isBCPermission;\n  const canSetDefault = !isBCPermission && updateActionsPermission;\n\n  return (\n    <B3Spin isSpinning={isRequestLoading}>\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n        }}\n      >\n        <B3Filter\n          filterMoreInfo={translatedFilterFormConfig}\n          handleChange={handleChange}\n          handleFilterChange={handleFilterChange}\n          customButtonConfig={addButtonConfig}\n          handleFilterCustomButtonClick={handleCreate}\n        />\n        <B3PaginationTable\n          ref={paginationTableRef}\n          columnItems={[]}\n          rowsPerPageOptions={[12, 24, 36]}\n          getRequestList={getAddressList}\n          searchParams={filterData}\n          isCustomRender\n          itemXs={isExtraLarge ? 3 : 4}\n          requestLoading={setIsRequestLoading}\n          tableKey=\"id\"\n          renderItem={(row) => (\n            <AddressItemCard\n              key={row.id}\n              item={row}\n              onEdit={canEdit ? () => handleEdit(row) : undefined}\n              onDelete={canDelete ? () => handleDelete(row) : undefined}\n              onSetDefault={canSetDefault ? () => handleSetDefault(row) : undefined}\n            />\n          )}\n        />\n\n        <B3AddressForm\n          updateAddressList={updateAddressList}\n          addressFields={addressFields}\n          ref={addEditAddressRef}\n          companyId={currentUseCompanyHierarchyId}\n          isBCPermission={isBCPermission}\n          countries={countries}\n        />\n\n        {editPermission && !isBCPermission && (\n          <SetDefaultDialog\n            isOpen={openDialog === 'setDefault'}\n            closeDialog={closeDialog}\n            setIsLoading={setIsRequestLoading}\n            addressData={currentAddress}\n            updateAddressList={updateAddressList}\n            companyId={currentUseCompanyHierarchyId}\n          />\n        )}\n\n        {editPermission && (\n          <DeleteAddressDialog\n            isOpen={openDialog === 'delete'}\n            closeDialog={closeDialog}\n            setIsLoading={setIsRequestLoading}\n            addressData={currentAddress}\n            updateAddressList={updateAddressList}\n            companyId={currentUseCompanyHierarchyId}\n            isBCPermission={isBCPermission}\n          />\n        )}\n      </Box>\n    </B3Spin>\n  );\n}\n\nexport default Address;\n"],"names":["StyledCheckbox","styled","AddressForm","addressFields","updateAddressList","companyId","isBCPermission","countries","ref","b3Lang","useB3Lang","open","setOpen","useState","type","setType","isInitialized","setIsInitialized","addUpdateLoading","setAddUpdateLoading","allAddressFields","setAllAddressFields","addressExtraFields","setAddressExtraFields","originAddressFields","setOriginAddressFields","addressData","setAddressData","shippingBilling","setShippingBilling","isB2BUser","control","handleSubmit","getValues","errors","watch","setError","setValue","reset","useForm","validateCompanyExtraFieldsUnique","data","extraFields","field","deCodeField","res","validateAddressExtraFields","message","_a","messageArr","error","snackbar","handleCancelClick","handleSaveB2BAddress","currentCountryCode","stateCode","currentCountryName","currentStateName","currentStateCode","country","countryName","countryCode","states","state","item","params","createB2BAddress","id","updateB2BAddress","err","handleSaveBcAddress","createBcAddress","bcAddressId","updateBcAddress","handleSaveAddress","handleOpenAddEditAddressClick","addressField","originFields","useImperativeHandle","handleChangeAddressType","check","name","useEffect","translatedAddressFields","element","fields","cloneDeep","handleBackFillData","useCallback","isShipping","isBilling","isDefaultShipping","isDefaultBilling","currentCountry","currentField","currentExtraField","handleCountryChange","stateList","stateFields","formFields","subscription","value","jsxs","B3Dialog","Fragment","jsx","b2bShippingBilling","child","idLang","FormControlLabel","Checkbox","B3CustomForm","B3AddressForm","forwardRef","TagBox","marginBottom","Flex","theme","Tag","children","B3Tag","Text","Typography","AddressItemCard","addressInfo","onEdit","onDelete","onSetDefault","useTheme","hasPermission","Card","CardContent","CustomButton","Box","IconButton","EditIcon","DeleteIcon","DeleteAddressDialog","props","isOpen","closeDialog","setIsLoading","isMobile","useMobile","handleDelete","deleteBCCustomerAddress","deleteB2BAddress","e","SetDefaultDialog","address","setAddress","handleChange","key","checked","newAddress","handleSetDefault","FormGroup","convertExtraFields","visibleFields","b2bExtraFields","convertB2BExtraFields","getAccountFormFields","extraField","getBcAddressFields","accountFormFields","getB2BAccountFormFields","b2bLogger","getB2BAddressFields","getB2BAddressExtraFields","b2bAddressFields","getAddressFields","permissionKeys","b2bPermissionsMap","isConfigEnabled","configs","config","Address","useAppSelector","isB2BUserSelector","companyInfoId","company","role","salesRepCompanyId","b2bFeatures","isAgenting","addressConfig","dispatch","useContext","GlobalContext","selectCompanyHierarchyId","isExtraLarge","useCardListColumn","paginationTableRef","useTableRef","addEditAddressRef","useRef","isRequestLoading","setIsRequestLoading","setAddressFields","setCountries","filterData","setFilterData","CustomerRole","getB2BCountries","getAddressList","edges","totalCount","getB2BAddress","getBCCustomerAddress","convertBCToB2BAddress","handleFilterChange","values","editPermission","setEditPermission","openDialog","setOpenDialog","currentAddress","setCurrentAddress","isCreatePermission","updateActionsPermission","deleteActionsPermission","useVerifyCreatePermission","configList","newConfig","getB2BAddressConfig","handleCreate","handleEdit","row","addButtonConfig","translatedFilterFormConfig","filterFormConfig","currentUseCompanyHierarchyId","canEdit","canDelete","canSetDefault","B3Spin","B3Filter","B3PaginationTable"],"mappings":"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"}