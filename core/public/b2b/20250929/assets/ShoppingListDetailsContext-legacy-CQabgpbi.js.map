{"version":3,"file":"ShoppingListDetailsContext-legacy-CQabgpbi.js","sources":["../../src/pages/ShoppingListDetails/context/ShoppingListDetailsContext.tsx","../../src/utils/validateProducts.ts"],"sourcesContent":["import { createContext, Dispatch, ReactNode, useMemo, useReducer } from 'react';\n\ninterface ShoppingListDetailsState {\n  id?: number;\n  isLoading?: boolean;\n}\ninterface ShoppingListDetailsAction {\n  type: string;\n  payload: ShoppingListDetailsState;\n}\ninterface ShoppingListDetailsContextType {\n  state: ShoppingListDetailsState;\n  dispatch: Dispatch<ShoppingListDetailsAction>;\n}\n\ninterface ShoppingListDetailsProviderProps {\n  children: ReactNode;\n}\n\nconst initState = {\n  id: 0,\n  isLoading: false,\n};\n\nexport const ShoppingListDetailsContext = createContext<ShoppingListDetailsContextType>({\n  state: initState,\n  dispatch: () => {},\n});\n\nconst reducer = (state: ShoppingListDetailsState, action: ShoppingListDetailsAction) => {\n  switch (action.type) {\n    case 'all':\n      return {\n        ...state,\n        ...action.payload,\n      };\n    case 'init':\n      return {\n        ...state,\n        id: action.payload.id,\n      };\n    case 'loading':\n      return {\n        ...state,\n        isLoading: action.payload.isLoading,\n      };\n    default:\n      return state;\n  }\n};\n\nexport function ShoppingListDetailsProvider(props: ShoppingListDetailsProviderProps) {\n  const [state, dispatch] = useReducer(reducer, initState);\n\n  const { children } = props;\n\n  const ShoppingListDetailsValue = useMemo(\n    () => ({\n      state,\n      dispatch,\n    }),\n    [state],\n  );\n\n  return (\n    <ShoppingListDetailsContext.Provider value={ShoppingListDetailsValue}>\n      {children}\n    </ShoppingListDetailsContext.Provider>\n  );\n}\n","import { LangFormatFunction } from '@/lib/lang';\nimport { validateProduct } from '@/shared/service/b2b/graphql/product';\n\nimport { snackbar } from './b3Tip';\n\ninterface Option {\n  optionId: number | `attribute[${number}]`;\n  optionValue: string;\n}\n\nexport const validateProducts = async (\n  products: CustomFieldItems[],\n  b3Lang: LangFormatFunction,\n) => {\n  const validationPromises = products.map(({ node: product }) => {\n    const { productId, quantity, productsSearch } = product;\n    const { variantId, newSelectOptionList } = productsSearch;\n\n    const productOptions = newSelectOptionList.map((option: Option) => {\n      if (typeof option.optionId === 'string' && option.optionId.includes('attribute')) {\n        // The passed in optionIds are formatted like \"attribute[123]\"\n        // This extracts the number from the optionId\n        return {\n          optionId: Number(option.optionId.split('[')[1].split(']')[0]),\n          optionValue: option.optionValue,\n        };\n      }\n\n      return {\n        optionId: Number(option.optionId),\n        optionValue: option.optionValue,\n      };\n    });\n\n    return validateProduct({\n      productId: Number(productId),\n      variantId: Number(variantId),\n      quantity: Number(quantity),\n      productOptions,\n    });\n  });\n\n  const settledResults = await Promise.allSettled(validationPromises);\n\n  settledResults.forEach((result, index) => {\n    // Network or unexpected error\n    if (result.status === 'rejected') {\n      const { productName } = products[index].node;\n\n      snackbar.error(b3Lang('quotes.productValidationFailed', { productName }));\n\n      return;\n    }\n\n    const { responseType, message } = result.value;\n\n    if (responseType === 'ERROR') {\n      snackbar.error(message);\n    }\n  });\n\n  const validProducts = products.filter((_, index) => {\n    const res = settledResults[index];\n\n    return res.status === 'fulfilled' && res.value.responseType !== 'ERROR';\n  });\n\n  return validProducts;\n};\n"],"names":["props","state","dispatch","useReducer","reducer","initState","children","ShoppingListDetailsValue","useMemo","ShoppingListDetailsContext","Provider","value","exports","async","products","b3Lang","validationPromises","map","node","product","productId","quantity","productsSearch","variantId","newSelectOptionList","productOptions","option","optionId","includes","Number","split","optionValue","validateProduct","settledResults","Promise","allSettled","forEach","result","index","status","productName","snackbar","error","responseType","message","filter","_","res","id","isLoading","createContext","action","type","payload"],"mappings":"sOAmDO,SAAqCA,GAC1C,MAAOC,EAAOC,GAAYC,EAAAA,WAAWC,EAASC,IAExCC,SAAEA,GAAaN,EAEfO,EAA2BC,EAAAA,QAC/B,MACEP,QACAC,aAEF,CAACD,IAGH,aACGQ,EAA2BC,SAA3B,CAAoCC,MAAOJ,EACzCD,YAGP,GC3DaM,EAAA,IAAmBC,MAC9BC,EACAC,KAEA,MAAMC,EAAqBF,EAASG,IAAI,EAAGC,KAAMC,MAC/C,MAAMC,UAAEA,EAAAC,SAAWA,EAAAC,eAAUA,GAAmBH,GAC1CI,UAAEA,EAAAC,oBAAWA,GAAwBF,EAErCG,EAAiBD,EAAoBP,IAAKS,GACf,iBAApBA,EAAOC,UAAyBD,EAAOC,SAASC,SAAS,aAG3D,CACLD,SAAUE,OAAOH,EAAOC,SAASG,MAAM,KAAK,GAAGA,MAAM,KAAK,IAC1DC,YAAaL,EAAOK,aAIjB,CACLJ,SAAUE,OAAOH,EAAOC,UACxBI,YAAaL,EAAOK,cAIxB,OAAOC,EAAgB,CACrBZ,UAAWS,OAAOT,GAClBG,UAAWM,OAAON,GAClBF,SAAUQ,OAAOR,GACjBI,qBAIEQ,QAAuBC,QAAQC,WAAWnB,GAyBhD,OAvBAiB,EAAeG,QAAQ,CAACC,EAAQC,KAE9B,GAAsB,aAAlBD,EAAOE,OAAuB,CAChC,MAAMC,YAAEA,GAAgB1B,EAASwB,GAAOpB,KAIxC,YAFAuB,EAASC,MAAM3B,EAAO,iCAAkC,CAAEyB,gBAG5D,CAEA,MAAMG,aAAEA,EAAAC,QAAcA,GAAYP,EAAO1B,MAEpB,UAAjBgC,GACFF,EAASC,MAAME,KAIG9B,EAAS+B,OAAO,CAACC,EAAGR,KACxC,MAAMS,EAAMd,EAAeK,GAE3B,MAAsB,cAAfS,EAAIR,QAAqD,UAA3BQ,EAAIpC,MAAMgC,iBAtD5C,MDSDtC,EAAY,CAChB2C,GAAI,EACJC,WAAW,GAGAxC,QAA6ByC,EAAAA,cAA8C,CACtFjD,MAAOI,EACPH,SAAUA,UAGNE,EAAUA,CAACH,EAAiCkD,KAChD,OAAQA,EAAOC,MACb,IAAK,MACH,MAAO,IACFnD,KACAkD,EAAOE,SAEd,IAAK,OACH,MAAO,IACFpD,EACH+C,GAAIG,EAAOE,QAAQL,IAEvB,IAAK,UACH,MAAO,IACF/C,EACHgD,UAAWE,EAAOE,QAAQJ,WAE9B,QACE,OAAOhD"}