{"version":3,"file":"index-legacy-CozKD0Ab.js","sources":["../../src/pages/UserManagement/index.tsx","../../src/utils/isKeyOf.ts","../../src/pages/UserManagement/table/B3NoData.tsx","../../src/pages/UserManagement/table/B3Table.tsx","../../src/pages/UserManagement/table/B3PaginationTable.tsx","../../src/pages/UserManagement/addUser.ts","../../src/pages/UserManagement/checkUserEmail.ts","../../src/pages/UserManagement/config.ts","../../src/pages/UserManagement/getUserExtraFields.ts","../../src/pages/UserManagement/getUsersExtraFieldsInfo.ts","../../src/pages/UserManagement/updateUser.ts","../../src/pages/UserManagement/AddEditUser.tsx","../../src/pages/UserManagement/getUser.ts","../../src/pages/UserManagement/deleteUser.ts","../../src/pages/UserManagement/getUsers.ts","../../src/pages/UserManagement/UserItemCard.tsx"],"sourcesContent":["import { useEffect, useMemo, useRef, useState } from 'react';\nimport { Box } from '@mui/material';\n\nimport B3Dialog from '@/components/B3Dialog';\nimport B3Filter from '@/components/filter/B3Filter';\nimport B3Spin from '@/components/spin/B3Spin';\nimport { useCardListColumn, useMobile, useTableRef } from '@/hooks';\nimport { useB3Lang } from '@/lib/lang';\nimport { rolePermissionSelector, useAppSelector } from '@/store';\nimport { CustomerRole } from '@/types';\nimport { snackbar } from '@/utils';\nimport { verifyCreatePermission } from '@/utils/b3CheckPermissions';\nimport { b2bPermissionsMap } from '@/utils/b3CheckPermissions/config';\n\nimport { B3PaginationTable, GetRequestList } from './table/B3PaginationTable';\nimport B3AddEditUser, { HandleOpenAddEditUserClick } from './AddEditUser';\nimport { getFilterMoreList } from './config';\nimport { deleteUser } from './deleteUser';\nimport { getUsers, GetUsersVariables } from './getUsers';\nimport { Delete, Edit, UserItemCard } from './UserItemCard';\n\ninterface RefCurrentProps extends HTMLInputElement {\n  handleOpenAddEditUserClick: HandleOpenAddEditUserClick;\n}\n\ninterface RoleProps {\n  role: string;\n  companyRoleId: string | number;\n}\n\ninterface User {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  companyRoleName: string;\n  companyInfo: { companyId: string };\n}\n\nfunction UserManagement() {\n  const [isRequestLoading, setIsRequestLoading] = useState<boolean>(false);\n\n  const [deleteOpen, setDeleteOpen] = useState<boolean>(false);\n\n  const [userId, setUserId] = useState<string>();\n  const b3Lang = useB3Lang();\n\n  const [isMobile] = useMobile();\n\n  const isExtraLarge = useCardListColumn();\n\n  const salesRepCompanyId = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.id);\n  const role = useAppSelector(({ company }) => company.customer.role);\n  const companyInfo = useAppSelector(({ company }) => company.companyInfo);\n\n  const companyId = Number(role) === CustomerRole.SUPER_ADMIN ? salesRepCompanyId : companyInfo?.id;\n\n  const b2bPermissions = useAppSelector(rolePermissionSelector);\n  const { selectCompanyHierarchyId } = useAppSelector(\n    ({ company }) => company.companyHierarchyInfo,\n  );\n\n  const isEnableBtnPermissions = b2bPermissions.userCreateActionsPermission;\n\n  const customItem = useMemo(() => {\n    const { userCreateActionsPermission } = b2bPermissionsMap;\n\n    const isCreatePermission = verifyCreatePermission(\n      userCreateActionsPermission,\n      Number(selectCompanyHierarchyId),\n    );\n    return {\n      isEnabled: isEnableBtnPermissions && isCreatePermission,\n      customLabel: b3Lang('userManagement.addUser'),\n    };\n\n    // ignore b3Lang due it's function that doesn't not depend on any reactive value\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isEnableBtnPermissions, selectCompanyHierarchyId]);\n\n  const addEditUserRef = useRef<RefCurrentProps | null>(null);\n  const [paginationTableRef] = useTableRef();\n\n  const initSearch = {\n    first: 12,\n    offset: 0,\n    search: '',\n    companyRoleId: '',\n    companyId,\n    q: '',\n  };\n  const filterMoreInfo = getFilterMoreList(b3Lang);\n\n  const [filterSearch, setFilterSearch] = useState<GetUsersVariables>(initSearch);\n\n  const [translatedFilterInfo, setTranslatedFilterInfo] =\n    useState<CustomFieldItems[]>(filterMoreInfo);\n  const [valueName, setValueName] = useState<string>('');\n\n  const fetchList: GetRequestList<GetUsersVariables, User> = async (params) => {\n    const data = await getUsers(params);\n\n    const {\n      users: { edges, totalCount },\n    } = data;\n\n    return {\n      edges,\n      totalCount,\n    };\n  };\n\n  const initSearchList = () => {\n    paginationTableRef.current?.refresh();\n  };\n\n  const handleGetTranslatedFilterInfo = () => {\n    const translatedFilterInfo = filterMoreInfo.map((element: CustomFieldItems) => {\n      const translatedItem = element;\n      const translatedOptions = element.options?.map((option: CustomFieldItems) => {\n        const elementOption = option;\n        elementOption.label = b3Lang(option.idLang);\n        return option;\n      });\n\n      translatedItem.options = translatedOptions;\n      translatedItem.setValueName = setValueName;\n      translatedItem.default = filterSearch.companyRoleId;\n      translatedItem.defaultName = filterSearch.companyRoleId ? valueName : '';\n\n      return element;\n    });\n\n    setTranslatedFilterInfo(translatedFilterInfo);\n\n    return translatedFilterInfo;\n  };\n\n  const handleChange = (_: string, value: string) => {\n    const search = {\n      ...filterSearch,\n      q: value,\n    };\n    setFilterSearch(search);\n  };\n\n  const handleFilterChange = (value: RoleProps) => {\n    const search = {\n      ...filterSearch,\n      companyRoleId: value.companyRoleId,\n      offset: 0,\n    };\n    setFilterSearch(search);\n  };\n\n  const handleAddUserClick = () => {\n    addEditUserRef.current?.handleOpenAddEditUserClick({ type: 'add' });\n  };\n\n  const handleEdit: Edit = (userId) => {\n    addEditUserRef.current?.handleOpenAddEditUserClick({ type: 'edit', userId });\n  };\n\n  const handleDelete: Delete = (id) => {\n    setUserId(id);\n    setDeleteOpen(true);\n  };\n\n  const handleCancelClick = () => {\n    setDeleteOpen(false);\n  };\n\n  const handleDeleteUserClick = async (userId?: string) => {\n    if (!userId) {\n      return;\n    }\n\n    try {\n      setIsRequestLoading(true);\n      handleCancelClick();\n      await deleteUser({\n        userId,\n        companyId: selectCompanyHierarchyId || companyId,\n      });\n      snackbar.success(b3Lang('userManagement.deleteUserSuccessfully'));\n    } finally {\n      setIsRequestLoading(false);\n      initSearchList();\n    }\n  };\n\n  useEffect(() => {\n    handleGetTranslatedFilterInfo();\n\n    // disabling because we don't want to run this effect on every render\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [filterSearch, filterSearch.companyRoleId]);\n\n  return (\n    <B3Spin isSpinning={isRequestLoading}>\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n        }}\n      >\n        <B3Filter\n          filterMoreInfo={translatedFilterInfo}\n          handleChange={handleChange}\n          handleFilterChange={handleFilterChange}\n          customButtonConfig={customItem}\n          handleFilterCustomButtonClick={handleAddUserClick}\n        />\n        <B3PaginationTable\n          ref={paginationTableRef}\n          getRequestList={fetchList}\n          searchParams={filterSearch || {}}\n          itemXs={isExtraLarge ? 3 : 4}\n          requestLoading={setIsRequestLoading}\n          renderItem={(row) => (\n            <UserItemCard key={row.id} item={row} onEdit={handleEdit} onDelete={handleDelete} />\n          )}\n        />\n        <B3AddEditUser\n          companyId={`${selectCompanyHierarchyId || companyId}`}\n          renderList={initSearchList}\n          ref={addEditUserRef}\n        />\n        <B3Dialog\n          isOpen={deleteOpen}\n          title={b3Lang('userManagement.deleteUser')}\n          leftSizeBtn={b3Lang('userManagement.cancel')}\n          rightSizeBtn={b3Lang('userManagement.delete')}\n          handleLeftClick={handleCancelClick}\n          handRightClick={handleDeleteUserClick}\n          row={userId}\n          rightStyleBtn={{\n            color: '#D32F2F',\n          }}\n          isShowBordered={false}\n        >\n          <Box\n            sx={{\n              display: 'flex',\n              width: isMobile ? '100%' : '450px',\n              height: '100%',\n            }}\n          >\n            {b3Lang('userManagement.confirmDelete')}\n          </Box>\n        </B3Dialog>\n      </Box>\n    </B3Spin>\n  );\n}\n\nexport default UserManagement;\n","export const isKeyOf = <T extends object>(obj: T, key: string | number | symbol): key is keyof T =>\n  key in obj;\n","import styled from '@emotion/styled';\nimport { DataUsageRounded } from '@mui/icons-material';\n\nimport { useB3Lang } from '@/lib/lang';\n\ninterface B3NoDataProps {\n  isLoading: boolean;\n}\n\nconst NoDataContainer = styled('div')(() => ({\n  height: '100%',\n  minHeight: '400px',\n  backgroundColor: '#fff',\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  color: '#aaa',\n  fontSize: '18px',\n}));\n\nconst NoDataText = styled('span')(() => ({\n  marginLeft: '10px',\n}));\n\nexport default function B3NoData({ isLoading }: B3NoDataProps) {\n  const b3Lang = useB3Lang();\n  return (\n    <NoDataContainer>\n      {!isLoading && <DataUsageRounded fontSize=\"large\" />}\n      <NoDataText>{isLoading ? '' : b3Lang('global.table.noData')}</NoDataText>\n    </NoDataContainer>\n  );\n}\n","import { ChangeEvent, MouseEvent, ReactElement, useContext } from 'react';\nimport { Grid, TablePagination } from '@mui/material';\n\nimport { b3HexToRgb, getContrastColor } from '@/components/outSideComponents/utils/b3CustomStyles';\nimport { useMobile } from '@/hooks';\nimport { useB3Lang } from '@/lib/lang';\nimport { CustomStyleContext } from '@/shared/customStyleButton';\n\nimport B3NoData from './B3NoData';\n\ninterface NodeWrapper<T extends object> {\n  node: T;\n}\n\nexport type PossibleNodeWrapper<T extends object> = T | NodeWrapper<T>;\n\nexport const isNodeWrapper = <T extends object>(\n  item: PossibleNodeWrapper<T>,\n): item is NodeWrapper<T> => 'node' in item;\n\nexport type WithRowControls<T> = T & {\n  id?: string | number;\n  isCollapse?: boolean;\n  disableCurrentCheckbox?: boolean;\n};\n\ninterface Pagination {\n  offset: number;\n  first: number;\n  count: number;\n}\n\ninterface TableProps<Row> {\n  listItems: PossibleNodeWrapper<WithRowControls<Row>>[];\n  itemXs: number;\n  onPaginationChange: (pagination: Pagination) => void;\n  pagination: Pagination;\n  rowsPerPageOptions: number[];\n  renderItem: (row: Row) => ReactElement;\n  isInfiniteScroll: boolean;\n  isLoading: boolean;\n  showRowsPerPageOptions: boolean;\n}\n\nexport function B3Table<Row>({\n  listItems,\n  pagination,\n  onPaginationChange,\n  rowsPerPageOptions,\n  renderItem,\n  isInfiniteScroll,\n  isLoading,\n  itemXs,\n  showRowsPerPageOptions,\n}: TableProps<Row>) {\n  const {\n    state: {\n      portalStyle: { backgroundColor = '#FEF9F5' },\n    },\n  } = useContext(CustomStyleContext);\n\n  const customColor = getContrastColor(backgroundColor);\n\n  const [isMobile] = useMobile();\n\n  const b3Lang = useB3Lang();\n\n  const { offset, count, first } = pagination;\n\n  const handlePaginationChange = (pagination: Pagination) => {\n    if (!isLoading) {\n      onPaginationChange(pagination);\n    }\n  };\n\n  const handleChangePage = (_: MouseEvent<HTMLButtonElement> | null, page: number) => {\n    handlePaginationChange({\n      ...pagination,\n      offset: page * first,\n    });\n  };\n\n  const handleChangeRowsPerPage = (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    handlePaginationChange({\n      ...pagination,\n      offset: 0,\n      first: parseInt(event.target.value, 10) || first,\n    });\n  };\n\n  return listItems.length > 0 ? (\n    <>\n      {isInfiniteScroll && (\n        <>\n          <Grid container spacing={2}>\n            {listItems.map((row, index) => {\n              const node = isNodeWrapper(row) ? row.node : row;\n\n              return (\n                // @ts-expect-error typed previously as an any\n                <Grid item xs={12} key={`${node.id + index}`}>\n                  {node && renderItem(node)}\n                </Grid>\n              );\n            })}\n          </Grid>\n\n          <TablePagination\n            labelDisplayedRows={({ from, to, count }) =>\n              b3Lang('global.pagination.pageXOfY', { from, to, count })\n            }\n            rowsPerPageOptions={showRowsPerPageOptions ? rowsPerPageOptions : []}\n            labelRowsPerPage={b3Lang('global.pagination.perPage')}\n            component=\"div\"\n            sx={{\n              color: isMobile ? b3HexToRgb(customColor, 0.87) : 'rgba(0, 0, 0, 0.87)',\n              marginTop: '1.5rem',\n              '::-webkit-scrollbar': {\n                display: 'none',\n              },\n              '& svg': {\n                color: isMobile ? b3HexToRgb(customColor, 0.87) : 'rgba(0, 0, 0, 0.87)',\n              },\n            }}\n            count={count}\n            rowsPerPage={first}\n            page={first === 0 ? 0 : offset / first}\n            onPageChange={handleChangePage}\n            onRowsPerPageChange={handleChangeRowsPerPage}\n          />\n        </>\n      )}\n      {!isInfiniteScroll && (\n        <>\n          <Grid container spacing={2}>\n            {listItems.map((row, index) => {\n              const node = isNodeWrapper(row) ? row.node : row;\n\n              return (\n                // @ts-expect-error typed previously as an any\n                <Grid item xs={itemXs} key={`${node.id + index}`}>\n                  {node && renderItem && renderItem(node)}\n                </Grid>\n              );\n            })}\n          </Grid>\n\n          <TablePagination\n            labelDisplayedRows={({ from, to, count }) =>\n              b3Lang('global.pagination.pageXOfY', { from, to, count })\n            }\n            rowsPerPageOptions={showRowsPerPageOptions ? rowsPerPageOptions : []}\n            labelRowsPerPage={b3Lang('global.pagination.cardsPerPage')}\n            component=\"div\"\n            sx={{\n              color: customColor,\n              marginTop: '1.5rem',\n              '::-webkit-scrollbar': {\n                display: 'none',\n              },\n              '& svg': {\n                color: customColor,\n              },\n            }}\n            count={count}\n            rowsPerPage={first}\n            page={first === 0 ? 0 : offset / first}\n            onPageChange={handleChangePage}\n            onRowsPerPageChange={handleChangeRowsPerPage}\n          />\n        </>\n      )}\n    </>\n  ) : (\n    <B3NoData isLoading={isLoading} />\n  );\n}\n","import {\n  ReactElement,\n  Ref,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from 'react';\nimport isEmpty from 'lodash-es/isEmpty';\nimport isEqual from 'lodash-es/isEqual';\n\nimport { useMobile } from '@/hooks';\nimport { useAppSelector } from '@/store';\nimport { forwardRefWithGenerics, memoWithGenerics } from '@/utils';\n\nimport { B3Table, isNodeWrapper, PossibleNodeWrapper, WithRowControls } from './B3Table';\n\ninterface TablePagination {\n  offset: number;\n  first: number;\n}\n\ninterface GetRequestListResult<T extends object> {\n  edges: PossibleNodeWrapper<T>[];\n  totalCount: number;\n}\n\ntype GetRequestListSync<Params, Item extends object> = (\n  params: Params,\n) => GetRequestListResult<Item>;\ntype GetRequestListAsync<Params, Item extends object> = (\n  params: Params,\n) => Promise<GetRequestListResult<Item>>;\n\nexport type GetRequestList<Params, Item extends object> =\n  | GetRequestListSync<Params, Item>\n  | GetRequestListAsync<Params, Item>;\n\ninterface B3PaginationTableProps<GetRequestListParams, Row extends object> {\n  itemXs: number;\n  renderItem: (row: Row, index?: number, checkBox?: () => ReactElement) => ReactElement;\n  getRequestList: GetRequestList<GetRequestListParams, WithRowControls<Row>>;\n  searchParams: GetRequestListParams & { createdBy?: string };\n  requestLoading?: (bool: boolean) => void;\n  showRowsPerPageOptions?: boolean;\n}\n\nfunction PaginationTable<GetRequestListParams, Row extends object>(\n  {\n    renderItem,\n    itemXs,\n    getRequestList,\n    searchParams,\n    requestLoading,\n    showRowsPerPageOptions = true,\n  }: B3PaginationTableProps<GetRequestListParams, Row>,\n  ref?: Ref<unknown>,\n) {\n  const rowsPerPageOptions = [12, 24, 36];\n  const initPagination = {\n    offset: 0,\n    first: rowsPerPageOptions[0],\n  };\n\n  const { selectCompanyHierarchyId } = useAppSelector(\n    ({ company }) => company.companyHierarchyInfo,\n  );\n  const selectCompanyHierarchyIdCache = useRef(selectCompanyHierarchyId);\n\n  const cache = useRef<GetRequestListParams | null>(null);\n\n  const [loading, setLoading] = useState(false);\n\n  const [pagination, setPagination] = useState<TablePagination>(initPagination);\n\n  const [count, setAllCount] = useState<number>(0);\n\n  const [cacheAllList, setCacheAllList] = useState<PossibleNodeWrapper<WithRowControls<Row>>[]>([]);\n\n  const [list, setList] = useState<PossibleNodeWrapper<WithRowControls<Row>>[]>([]);\n\n  const [isMobile] = useMobile();\n\n  const cacheList = useCallback(\n    (edges: PossibleNodeWrapper<WithRowControls<Row>>[]) => {\n      if (!cacheAllList.length) setCacheAllList(edges);\n\n      const copyCacheAllList = [...cacheAllList];\n\n      edges.forEach((item) => {\n        const option = isNodeWrapper(item) ? item.node : item;\n        const isExist = cacheAllList.some((cache) => {\n          const cacheOption = isNodeWrapper(cache) ? cache.node : cache;\n          return cacheOption.id === option.id;\n        });\n\n        if (!isExist) {\n          copyCacheAllList.push(item);\n        }\n      });\n\n      setCacheAllList(copyCacheAllList);\n    },\n    [cacheAllList],\n  );\n\n  const fetchList = useCallback(\n    async (b3Pagination?: TablePagination, isRefresh?: boolean) => {\n      try {\n        if (cache?.current && isEqual(cache.current, searchParams) && !isRefresh && !b3Pagination) {\n          return;\n        }\n        cache.current = searchParams;\n\n        setLoading(true);\n        if (requestLoading) requestLoading(true);\n        const { createdBy = '' } = searchParams;\n\n        const getEmailReg = /\\((.+)\\)/g;\n        const getCreatedByReg = /^[^(]+/;\n        const emailRegArr = getEmailReg.exec(createdBy);\n        const createdByUserRegArr = getCreatedByReg.exec(createdBy);\n        const createdByUser = createdByUserRegArr?.length ? createdByUserRegArr[0].trim() : '';\n        const newSearchParams = {\n          ...searchParams,\n          createdBy: createdByUser,\n          email: emailRegArr?.length ? emailRegArr[1] : '',\n        };\n        const params = {\n          ...newSearchParams,\n          first: b3Pagination?.first || pagination.first,\n          offset: b3Pagination?.offset || 0,\n        };\n        const requestList = await getRequestList(params);\n        const { edges, totalCount } = requestList;\n\n        setList(edges);\n\n        cacheList(edges);\n\n        if (!b3Pagination) {\n          setPagination({\n            first: pagination.first,\n            offset: 0,\n          });\n        }\n\n        setAllCount(totalCount);\n        setLoading(false);\n        if (requestLoading) requestLoading(false);\n      } catch (e) {\n        setLoading(false);\n        if (requestLoading) requestLoading(false);\n      }\n    },\n    [cacheList, getRequestList, pagination.first, requestLoading, searchParams],\n  );\n\n  const refresh = useCallback(() => {\n    fetchList(pagination, true);\n  }, [fetchList, pagination]);\n\n  useEffect(() => {\n    const isChangeCompany =\n      Number(selectCompanyHierarchyIdCache.current) !== Number(selectCompanyHierarchyId);\n    if (!isEmpty(searchParams)) {\n      if (isChangeCompany) {\n        fetchList(pagination, true);\n        selectCompanyHierarchyIdCache.current = selectCompanyHierarchyId;\n      } else {\n        fetchList();\n      }\n    }\n    // ignore pageType because is not a reactive value\n  }, [fetchList, searchParams, selectCompanyHierarchyId, pagination]);\n\n  const handlePaginationChange = async (pagination: TablePagination) => {\n    await fetchList(pagination);\n    setPagination(pagination);\n  };\n\n  const tablePagination = {\n    ...pagination,\n    count,\n  };\n\n  const getList = useCallback(() => list, [list]);\n\n  const getCacheList = useCallback(() => cacheAllList, [cacheAllList]);\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      setList,\n      setCacheAllList,\n      getList,\n      getCacheList,\n      refresh,\n    }),\n    [getList, getCacheList, refresh],\n  );\n\n  return (\n    <B3Table\n      listItems={list}\n      pagination={tablePagination}\n      rowsPerPageOptions={rowsPerPageOptions}\n      onPaginationChange={handlePaginationChange}\n      isInfiniteScroll={isMobile}\n      isLoading={loading}\n      renderItem={renderItem}\n      itemXs={itemXs}\n      showRowsPerPageOptions={showRowsPerPageOptions}\n    />\n  );\n}\n\nconst B3PaginationTable = memoWithGenerics(forwardRefWithGenerics(PaginationTable));\n\nexport { B3PaginationTable };\n","import B3Request from '@/shared/service/request/b3Fetch';\n\nconst toNumberSafely = (value?: number | string): number | undefined =>\n  value !== undefined && value !== '' ? Number(value) : undefined;\n\nconst addUserQl = `\n  mutation CreateUser ($userData: UserInputType!) {\n    userCreate ( userData: $userData ){\n      user {\n        id\n      }\n    }\n  }\n`;\n\ninterface AddUserResponse {\n  data: { userCreate: { user: { id: number } } };\n}\n\ninterface AddUserVariables {\n  companyId: number | string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  phone?: string;\n  companyRoleId?: number | string;\n  addChannel?: boolean;\n  companyRoleName?: string;\n  extraFields?: { fieldName: string; fieldValue: string }[];\n}\n\nexport const addUser = (data: AddUserVariables) => {\n  const userData = {\n    companyId: toNumberSafely(data.companyId),\n    companyRoleId: toNumberSafely(data.companyRoleId),\n    // not simply spreading data as the form is also including extraFields duplicated inline\n    email: data.email,\n    firstName: data.firstName,\n    lastName: data.lastName,\n    phone: data.phone,\n    addChannel: data.addChannel,\n    companyRoleName: data.companyRoleName,\n    extraFields: data.extraFields,\n  };\n\n  return B3Request.graphqlB2B<AddUserResponse>({ query: addUserQl, variables: { userData } });\n};\n","import B3Request from '@/shared/service/request/b3Fetch';\nimport { UserTypes } from '@/types';\nimport { storeHash } from '@/utils';\n\nconst toNumberSafely = (value?: number | string): number | undefined =>\n  value !== undefined && value !== '' ? Number(value) : undefined;\n\nconst checkUserB2BEmail = `\n  query UserEmailCheck ($email: String!, $companyId: Int, $storeHash: String!, $channelId: Int) {\n    userEmailCheck ( email: $email, companyId: $companyId, storeHash: $storeHash, channelId: $channelId ){\n      userType,\n      userInfo {\n        companyName\n      }\n    }\n  }\n`;\n\ninterface UserEmailCheckResponse {\n  data: {\n    userEmailCheck: {\n      userType: UserTypes;\n      userInfo: {\n        companyName: string | null;\n      };\n    };\n  };\n}\n\ninterface CheckUserEmailVariables {\n  email: string;\n  companyId?: number | string;\n  channelId?: number | string;\n}\n\nexport const checkUserEmail = (variables: CheckUserEmailVariables) =>\n  B3Request.graphqlB2B<UserEmailCheckResponse>({\n    query: checkUserB2BEmail,\n    variables: {\n      email: variables.email,\n      companyId: toNumberSafely(variables.companyId),\n      channelId: toNumberSafely(variables.channelId),\n      storeHash,\n    },\n  }).then((res) => ({\n    ...res.userEmailCheck,\n    isValid: res.userEmailCheck.userType === UserTypes.DOES_NOT_EXIST,\n  }));\n","import { LangFormatFunction } from '@/lib/lang';\n\ninterface ExtraFieldsProps {\n  fieldName: string;\n  fieldValue: string | number;\n}\n\ninterface FilterProps {\n  first: number;\n  offset: number;\n  search: string;\n  role: number | string;\n  companyId: number | string;\n  addChannel: boolean;\n  [key: string]: string | null | number | boolean | ExtraFieldsProps[];\n}\n\ninterface UsersFilesProps {\n  [key: string]: string | boolean | number | Array<any> | boolean | undefined;\n  name: string;\n}\n\ninterface UserRoleProps {\n  label: string;\n  value: number;\n  idLang: string;\n  name: string;\n}\n\nconst getUserRole = () => {\n  const userRole: Array<UserRoleProps> = [\n    {\n      label: 'Admin',\n      name: 'Admin',\n      value: 0,\n      idLang: 'userManagement.userRole.admin',\n    },\n    {\n      label: 'Senior buyer',\n      name: 'Senior Buyer',\n      value: 1,\n      idLang: 'userManagement.userRole.seniorBuyer',\n    },\n    {\n      label: 'Junior buyer',\n      name: 'Junior Buyer',\n      value: 2,\n      idLang: 'userManagement.userRole.juniorBuyer',\n    },\n  ];\n\n  return userRole;\n};\n\nconst getFilterMoreList = (b3Lang: LangFormatFunction) => {\n  return [\n    {\n      name: 'companyRoleId',\n      label: b3Lang('userManagement.config.userRole'),\n      required: false,\n      default: '',\n      defaultName: '',\n      fieldType: 'roleAutocomplete',\n      xs: 12,\n      disabled: false,\n      variant: 'filled',\n      size: 'small',\n    },\n  ] satisfies [unknown];\n};\n\nconst getUsersFiles = (type: string, b3Lang: LangFormatFunction, disabledUserRole = false) => {\n  const roleArr = getFilterMoreList(b3Lang);\n  roleArr[0].required = true;\n  roleArr[0].disabled = disabledUserRole;\n\n  const usersFiles = [\n    ...roleArr,\n    {\n      name: 'email',\n      label: b3Lang('userManagement.config.email'),\n      required: true,\n      fieldType: 'text',\n      xs: 12,\n      disabled: type === 'edit',\n      default: '',\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'firstName',\n      label: b3Lang('userManagement.config.firstName'),\n      required: true,\n      default: '',\n      fieldType: 'text',\n      xs: 6,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'lastName',\n      label: b3Lang('userManagement.config.lastName'),\n      required: true,\n      fieldType: 'text',\n      xs: 6,\n      default: '',\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'phone',\n      label: b3Lang('userManagement.config.phoneNumber'),\n      required: false,\n      fieldType: 'text',\n      xs: 12,\n      default: '',\n      variant: 'filled',\n      size: 'small',\n    },\n  ];\n\n  return usersFiles;\n};\n\ntype EmailError = {\n  [k: number]: string;\n};\n\nconst emailError: EmailError = {\n  3: 'global.emailValidate.multipleCustomer',\n  4: 'global.emailValidate.companyUsed',\n  5: 'global.emailValidate.alreadyExits',\n  6: 'global.emailValidate.usedSuperAdmin',\n};\n\nexport { emailError, getFilterMoreList, getUserRole, getUsersFiles };\n\nexport type { FilterProps, UsersFilesProps, ExtraFieldsProps };\n","import b2bLogger from '@/utils/b3Logger';\n\nimport { getUsersExtraFieldsInfo, UserExtraFieldsInfoResponse } from './getUsersExtraFieldsInfo';\n\ninterface FieldsOptionProps {\n  label: string;\n  value: string | number;\n}\n\ninterface FormattedItemsProps {\n  [key: string]: string | boolean | number | Array<any> | boolean | undefined;\n  name: string;\n}\n\nconst FIELD_TYPE = {\n  0: 'text',\n  1: 'multiline',\n  2: 'number',\n  3: 'dropdown',\n} as const;\n\ntype UserExtraFields = UserExtraFieldsInfoResponse['data']['userExtraFields'];\n\nconst handleConversionExtraItemFormat = (userExtraFields: UserExtraFields) => {\n  const formattedUserExtraFields: FormattedItemsProps[] = userExtraFields.map((item) => {\n    const { listOfValue } = item;\n    const type = FIELD_TYPE[item.fieldType];\n\n    const currentItems: FormattedItemsProps = {\n      isExtraFields: true,\n      name: item.fieldName,\n      label: item.labelName,\n      required: item.isRequired,\n      default: item.defaultValue || '',\n      fieldType: type,\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    };\n\n    switch (type) {\n      case 'dropdown':\n        if (listOfValue) {\n          const options: FieldsOptionProps[] = listOfValue?.map((option: string) => ({\n            label: option,\n            value: option,\n          }));\n\n          if (options.length > 0) {\n            currentItems.options = options;\n          }\n        }\n\n        break;\n      case 'number':\n        currentItems.max = item.maximumValue || '';\n        break;\n      case 'multiline':\n        currentItems.rows = item.numberOfRows || '';\n        break;\n      default:\n        currentItems.maxLength = item.maximumLength || '';\n        break;\n    }\n\n    return currentItems;\n  });\n\n  return formattedUserExtraFields;\n};\n\nconst getB2BUserExtraFields = async () => {\n  let userExtraFieldsList: FormattedItemsProps[] = [];\n  try {\n    const { userExtraFields } = await getUsersExtraFieldsInfo();\n    const visibleFields = userExtraFields.filter((item) => item.visibleToEnduser);\n\n    const formattedUserExtraFields = handleConversionExtraItemFormat(visibleFields);\n\n    userExtraFieldsList = formattedUserExtraFields;\n  } catch (err) {\n    b2bLogger.error(err);\n  }\n\n  return userExtraFieldsList;\n};\n\nexport default getB2BUserExtraFields;\n","import B3Request from '@/shared/service/request/b3Fetch';\n\nconst getUserExtraFields = `\n  query GetUserExtraFields {\n    userExtraFields {\n      fieldName\n      fieldType\n      isRequired\n      defaultValue\n      maximumLength\n      numberOfRows\n      maximumValue\n      listOfValue\n      visibleToEnduser\n      labelName\n    }\n  }\n`;\n\nexport interface UserExtraFieldsInfoResponse {\n  data: {\n    userExtraFields: Array<{\n      fieldName: string;\n      fieldType: 0 | 1 | 2 | 3;\n      isRequired: boolean;\n      defaultValue: string | null;\n      maximumLength: string | null;\n      numberOfRows: number | null;\n      maximumValue: string | null;\n      listOfValue: string[] | null;\n      visibleToEnduser: boolean;\n      labelName: string;\n    }>;\n  };\n}\n\nexport const getUsersExtraFieldsInfo = () =>\n  B3Request.graphqlB2B<UserExtraFieldsInfoResponse>({ query: getUserExtraFields });\n","import B3Request from '@/shared/service/request/b3Fetch';\n\nconst toNumberSafely = (value?: number | string): number | undefined =>\n  value !== undefined && value !== '' ? Number(value) : undefined;\n\nconst updateUserQl = `\n  mutation UpdateUser ($userData: UserUpdateInputType!) {\n    userUpdate ( userData: $userData ) {\n      user {\n        id\n      }\n    }\n  }\n`;\n\ninterface UpdateUserResponse {\n  data: { userUpdate: { user: { id: number } } };\n}\n\ninterface UpdateUserVariables {\n  userId: number | string;\n  companyId: number | string;\n  email?: string;\n  firstName?: string;\n  lastName?: string;\n  phone?: string;\n  companyRoleId?: number | string;\n  addChannel?: boolean;\n  companyRoleName?: string;\n  extraFields?: { fieldName: string; fieldValue: string }[];\n}\n\nexport const updateUser = (data: UpdateUserVariables) => {\n  const userData = {\n    userId: toNumberSafely(data.userId),\n    companyId: toNumberSafely(data.companyId),\n    companyRoleId: toNumberSafely(data.companyRoleId),\n    // not simply spreading data as the form is also including extraFields duplicated inline\n    email: data.email,\n    firstName: data.firstName,\n    lastName: data.lastName,\n    phone: data.phone,\n    addChannel: data.addChannel,\n    companyRoleName: data.companyRoleName,\n    extraFields: data.extraFields,\n  };\n\n  return B3Request.graphqlB2B<UpdateUserResponse>({ query: updateUserQl, variables: { userData } });\n};\n","import { forwardRef, Ref, useEffect, useImperativeHandle, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport concat from 'lodash-es/concat';\n\nimport { B3CustomForm } from '@/components';\nimport B3Dialog from '@/components/B3Dialog';\nimport { useB3Lang } from '@/lib/lang';\nimport { useAppSelector } from '@/store';\nimport { UserTypes } from '@/types';\nimport { channelId, isKeyOf, snackbar } from '@/utils';\n\nimport { addUser } from './addUser';\nimport { checkUserEmail } from './checkUserEmail';\nimport {\n  emailError,\n  ExtraFieldsProps,\n  FilterProps,\n  getUsersFiles,\n  UsersFilesProps,\n} from './config';\nimport { getUser } from './getUser';\nimport getB2BUserExtraFields from './getUserExtraFields';\nimport { updateUser } from './updateUser';\n\nexport type HandleOpenAddEditUserClick = (\n  options: { type: 'add' } | { type: 'edit'; userId: string },\n) => Promise<void>;\n\ninterface AddEditUserProps {\n  companyId: string;\n  renderList: () => void;\n}\n\ninterface SelectedDataProps {\n  [key: string]: string | number;\n}\n\ninterface User {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  companyRoleId: number;\n  companyRoleName?: string;\n  extraFields: { fieldName: string; fieldValue: string }[];\n}\n\nfunction AddEditUser({ companyId, renderList }: AddEditUserProps, ref: Ref<unknown> | undefined) {\n  const b2bId = useAppSelector(({ company }) => company.customer.b2bId);\n\n  const [open, setOpen] = useState<boolean>(false);\n  const [type, setType] = useState<string>('');\n\n  const [editData, setEditData] = useState<User>();\n\n  const [addUpdateLoading, setAddUpdateLoading] = useState<boolean>(false);\n\n  const [usersFiles, setUsersFiles] = useState<Array<UsersFilesProps>>([]);\n  const [userExtrafields, setUserExtrafields] = useState<UsersFilesProps[] | []>([]);\n\n  const b3Lang = useB3Lang();\n\n  const {\n    control,\n    handleSubmit,\n    getValues,\n    formState: { errors },\n    clearErrors,\n    setValue,\n    setError,\n  } = useForm({\n    mode: 'onSubmit',\n  });\n\n  const handleGetUsersFiles = async () => {\n    const userExtrafields = await getB2BUserExtraFields();\n    setUserExtrafields(userExtrafields);\n  };\n\n  useEffect(() => {\n    if (userExtrafields.length === 0) {\n      handleGetUsersFiles();\n    }\n  }, [userExtrafields.length]);\n\n  const handleGetExtrafieldsInfo = (selectedData: SelectedDataProps) => {\n    const keyValue = Object.keys(selectedData);\n\n    const extrafields: ExtraFieldsProps[] = [];\n    userExtrafields.forEach((item: UsersFilesProps) => {\n      if (keyValue.includes(item.name)) {\n        const extraField = {\n          fieldName: item.name || '',\n          fieldValue: selectedData[item.name] || '',\n        };\n\n        extrafields.push(extraField);\n      }\n    });\n\n    return extrafields;\n  };\n\n  useEffect(() => {\n    if (open) {\n      const newUsersFiles = usersFiles.map((item: UsersFilesProps) => {\n        const newItem = item;\n\n        if (type === 'edit' && editData) {\n          setValue(item.name, isKeyOf(editData, item.name) ? editData[item.name] : undefined);\n        }\n\n        return newItem;\n      });\n\n      setUsersFiles(newUsersFiles);\n    }\n    // disabling because we don't want to run this effect on every render\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [editData, open, type]);\n\n  const handleCancelClick = () => {\n    usersFiles.forEach((item: UsersFilesProps) => {\n      setValue(item.name, '');\n      if (item.isExtraFields) {\n        setValue(item.name, item.default || '');\n      }\n    });\n    clearErrors();\n    setOpen(false);\n  };\n\n  const validateEmailValue = async (emailValue: string) => {\n    const {\n      userType,\n      userInfo: { companyName },\n    } = await checkUserEmail({\n      email: emailValue,\n      companyId,\n      channelId,\n    });\n\n    const isValid = [\n      UserTypes.DOES_NOT_EXIST,\n      UserTypes.B2C,\n      UserTypes.CURRENT_B2B_COMPANY_DIFFERENT_CHANNEL,\n    ].includes(userType);\n\n    if (!isValid) {\n      setError('email', {\n        type: 'custom',\n        message: b3Lang(emailError[userType], {\n          companyName: companyName ? `(${companyName})` : '',\n          email: emailValue,\n        }),\n      });\n    }\n\n    return {\n      isValid,\n      userType,\n    };\n  };\n\n  const handleAddUserClick = () => {\n    handleSubmit(async (data) => {\n      setAddUpdateLoading(true);\n      const extraFieldsInfo = handleGetExtrafieldsInfo(data);\n      let message = b3Lang('userManagement.addUserSuccessfully');\n\n      try {\n        const params: Partial<FilterProps> = {\n          companyId,\n          companyRoleId: Number(data.companyRoleId),\n          ...data,\n          extraFields: extraFieldsInfo,\n        };\n\n        if (type !== 'edit') {\n          const { isValid, userType } = await validateEmailValue(data.email);\n\n          if (!isValid) {\n            setAddUpdateLoading(false);\n            return;\n          }\n\n          if (userType === UserTypes.CURRENT_B2B_COMPANY_DIFFERENT_CHANNEL) {\n            params.addChannel = true;\n            message = b3Lang('userManagement.userDetected', {\n              email: data.email,\n            });\n          }\n\n          // @ts-expect-error params is currently too un-type-safe, needs fixing\n          await addUser(params);\n        }\n\n        if (type === 'edit') {\n          params.userId = editData?.id || '';\n          message = b3Lang('userManagement.updateUserSuccessfully');\n          delete params.email;\n\n          // @ts-expect-error params is currently too un-type-safe, needs fixing\n          await updateUser(params);\n        }\n\n        handleCancelClick();\n\n        snackbar.success(message);\n\n        renderList();\n      } finally {\n        setAddUpdateLoading(false);\n      }\n    })();\n  };\n\n  const handleOpenAddEditUserClick: HandleOpenAddEditUserClick = async (options) => {\n    const { type } = options;\n    const usersFiles = getUsersFiles(\n      type,\n      b3Lang,\n      type === 'edit' ? b2bId === Number(options.userId) : false,\n    );\n\n    if (type === 'edit') {\n      const { userId } = options;\n      const data = await getUser({ userId, companyId });\n      const extrafieldsInfo: ExtraFieldsProps[] = data.extraFields || [];\n      let newData = data;\n      if (extrafieldsInfo && extrafieldsInfo.length > 0) {\n        const extrafieldsData: CustomFieldItems = {};\n\n        extrafieldsInfo.forEach((item) => {\n          extrafieldsData[item.fieldName] = item.fieldValue;\n        });\n\n        newData = {\n          ...data,\n          ...extrafieldsData,\n        };\n      }\n\n      setEditData({ id: userId, ...newData });\n\n      const companyRoleItem: UsersFilesProps | null =\n        usersFiles.find((item) => item.name === 'companyRoleId') || null;\n      if (companyRoleItem) {\n        companyRoleItem.defaultName = data?.companyRoleName || '';\n        companyRoleItem.default = data?.companyRoleId || '';\n      }\n    }\n    const allUsersFiles = concat(usersFiles, userExtrafields);\n    setUsersFiles(allUsersFiles);\n\n    setType(type);\n    setOpen(true);\n  };\n\n  useImperativeHandle(ref, () => ({\n    handleOpenAddEditUserClick,\n  }));\n\n  return (\n    <B3Dialog\n      isOpen={open}\n      title={\n        type === 'edit' ? b3Lang('userManagement.editUser') : b3Lang('userManagement.addNewUser')\n      }\n      leftSizeBtn={b3Lang('userManagement.cancel')}\n      rightSizeBtn={b3Lang('userManagement.saveUser')}\n      handleLeftClick={handleCancelClick}\n      handRightClick={handleAddUserClick}\n      loading={addUpdateLoading}\n      isShowBordered\n    >\n      <B3CustomForm\n        formFields={usersFiles}\n        errors={errors}\n        control={control}\n        getValues={getValues}\n        setValue={setValue}\n      />\n    </B3Dialog>\n  );\n}\n\nconst B3AddEditUser = forwardRef(AddEditUser);\n\nexport default B3AddEditUser;\n","import B3Request from '@/shared/service/request/b3Fetch';\n\nconst getUserQl = `\n  query GetUser($userId: Int!, $companyId: Int!) {\n    user ( userId: $userId companyId: $companyId ) { \n        firstName,\n        lastName,\n        email,\n        phone,\n        companyRoleId,\n        companyRoleName,\n        extraFields {\n          fieldName\n          fieldValue\n        }\n      }\n    }\n`;\n\nexport interface UserResponse {\n  data: {\n    user: {\n      firstName: string;\n      lastName: string;\n      email: string;\n      phone: string;\n      companyRoleId: number;\n      companyRoleName?: string;\n      extraFields: { fieldName: string; fieldValue: string }[];\n    };\n  };\n}\n\ninterface GetUserVariables {\n  userId: string;\n  companyId: string;\n}\n\nexport const getUser = ({ userId, companyId }: GetUserVariables) =>\n  B3Request.graphqlB2B<UserResponse>({\n    query: getUserQl,\n    variables: { userId: Number(userId), companyId: Number(companyId) },\n  }).then(({ user }) => user);\n","import B3Request from '@/shared/service/request/b3Fetch';\n\nconst toNumberSafely = (value?: number | string): number | undefined =>\n  value !== undefined && value !== '' ? Number(value) : undefined;\n\nconst deleteUserQl = `\n  mutation DeleteUser ($companyId: Int!, $userId: Int!) { \n    userDelete ( companyId: $companyId, userId: $userId ) {\n      message\n    }\n  }\n`;\n\ninterface DeleteUserResponse {\n  data: { userDelete: { message: string } };\n}\n\ninterface DeleteUserVariables {\n  companyId: number | string;\n  userId: number | string;\n}\n\nexport const deleteUser = (variables: DeleteUserVariables) =>\n  B3Request.graphqlB2B<DeleteUserResponse>({\n    query: deleteUserQl,\n    variables: {\n      companyId: toNumberSafely(variables.companyId),\n      userId: toNumberSafely(variables.userId),\n    },\n  });\n","import B3Request from '@/shared/service/request/b3Fetch';\n\nconst getUsersQl = `\n  query GetUsers($first: Int!, $offset: Int!, $q: String, $companyId: Int!, $companyRoleId: Decimal) {\n    users (\n      first: $first\n      search: $q\n      offset: $offset\n      companyId: $companyId\n      companyRoleId: $companyRoleId\n    ){\n      totalCount,\n      edges{\n        node{\n          id,\n          firstName,\n          lastName,\n          email,\n          companyRoleName,\n          companyInfo {\n            companyId,\n          },\n        }\n      }\n    }\n  }\n`;\n\nexport interface UsersResponse {\n  data: {\n    users: {\n      totalCount: number;\n      edges: Array<{\n        node: {\n          id: string;\n          firstName: string;\n          lastName: string;\n          email: string;\n          companyRoleName: string;\n          companyInfo: {\n            companyId: string;\n          };\n        };\n      }>;\n    };\n  };\n}\n\nexport interface GetUsersVariables {\n  first: number;\n  offset: number;\n  q?: string;\n  companyId: number | string;\n  companyRoleId?: number | string;\n}\n\nexport const getUsers = (data: GetUsersVariables) =>\n  B3Request.graphqlB2B<UsersResponse>({\n    query: getUsersQl,\n    variables: {\n      ...data,\n      q: data.q || '',\n      companyId: Number(data.companyId),\n      companyRoleId:\n        data.companyRoleId !== undefined && data.companyRoleId !== ''\n          ? Number(data.companyRoleId)\n          : undefined,\n    },\n  });\n","import styled from '@emotion/styled';\nimport { Delete as DeleteIcon, Edit as EditIcon } from '@mui/icons-material';\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\n\nimport { B3Tag } from '@/components';\nimport { verifyLevelPermission } from '@/utils';\nimport { b2bPermissionsMap } from '@/utils/b3CheckPermissions/config';\n\nimport { getUserRole } from './config';\n\ninterface RoleListProps {\n  label: string;\n  value: string | number;\n  color: string;\n  textColor: string;\n  idLang: string;\n  name: string;\n}\n\ninterface User {\n  id: string;\n  companyRoleName: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  companyInfo: {\n    companyId: string;\n  };\n}\n\nexport type Edit = (userId: string) => void;\nexport type Delete = (userId: string) => void;\n\ninterface OrderItemCardProps {\n  item: User;\n  onEdit: Edit;\n  onDelete: Delete;\n}\n\nconst Flex = styled('div')(() => ({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n}));\n\nexport function UserItemCard(props: OrderItemCardProps) {\n  const { item: userInfo, onEdit, onDelete } = props;\n  const { companyInfo, id, companyRoleName, firstName, lastName, email } = userInfo;\n\n  const { userUpdateActionsPermission, userDeleteActionsPermission } = b2bPermissionsMap;\n\n  const updateActionsPermission = verifyLevelPermission({\n    code: userUpdateActionsPermission,\n    companyId: Number(companyInfo?.companyId || 0),\n    userId: Number(id),\n  });\n  const deleteActionsPermission = verifyLevelPermission({\n    code: userDeleteActionsPermission,\n    companyId: Number(companyInfo?.companyId || 0),\n    userId: Number(id),\n  });\n\n  const getNewRoleList = () => {\n    const userRole = getUserRole();\n    const newRoleList: Array<RoleListProps> = userRole.map((item) => {\n      if (Number(item.value) === 2) {\n        if (companyRoleName !== 'Junior Buyer') {\n          return {\n            color: '#ce93d8',\n            textColor: 'black',\n            ...item,\n            label: companyRoleName,\n            name: companyRoleName,\n          };\n        }\n        return {\n          color: '#D9DCE9',\n          textColor: 'black',\n          ...item,\n        };\n      }\n      if (Number(item.value) === 1) {\n        return {\n          color: 'rgba(237, 108, 2, 0.3)',\n          textColor: 'black',\n          ...item,\n        };\n      }\n      return {\n        color: '#C4DD6C',\n        textColor: 'black',\n        ...item,\n      };\n    });\n\n    return newRoleList;\n  };\n\n  const statusRender = (name: string) => {\n    const newRoleList = getNewRoleList();\n    const roleItem = newRoleList.find((item: RoleListProps) => item.name === name);\n\n    if (!roleItem) return null;\n    return (\n      <B3Tag color={roleItem.color} textColor={roleItem.textColor}>\n        {roleItem.label}\n      </B3Tag>\n    );\n  };\n\n  return (\n    <Card key={id}>\n      <CardContent\n        sx={{\n          color: '#313440',\n        }}\n      >\n        <Typography\n          variant=\"h5\"\n          sx={{\n            color: 'rgba(0, 0, 0, 0.87)',\n          }}\n        >\n          {firstName} {lastName}\n        </Typography>\n\n        <Typography\n          sx={{\n            p: '15px 0',\n          }}\n          variant=\"body1\"\n        >\n          {email}\n        </Typography>\n        <Flex>\n          {statusRender(companyRoleName)}\n          <Box>\n            {updateActionsPermission && (\n              <IconButton\n                aria-label=\"edit\"\n                size=\"small\"\n                sx={{\n                  marginRight: '8px',\n                }}\n                onClick={() => onEdit(userInfo.id)}\n              >\n                <EditIcon fontSize=\"inherit\" />\n              </IconButton>\n            )}\n            {deleteActionsPermission && (\n              <IconButton aria-label=\"delete\" size=\"small\" onClick={() => onDelete(userInfo.id)}>\n                <DeleteIcon fontSize=\"inherit\" />\n              </IconButton>\n            )}\n          </Box>\n        </Flex>\n      </CardContent>\n    </Card>\n  );\n}\n"],"names":["isRequestLoading","setIsRequestLoading","useState","deleteOpen","setDeleteOpen","userId","setUserId","b3Lang","useB3Lang","isMobile","useMobile","isExtraLarge","useCardListColumn","salesRepCompanyId","useAppSelector","b2bFeatures","masqueradeCompany","id","role","company","customer","companyInfo","companyId","Number","CustomerRole","SUPER_ADMIN","b2bPermissions","rolePermissionSelector","selectCompanyHierarchyId","companyHierarchyInfo","isEnableBtnPermissions","userCreateActionsPermission","customItem","useMemo","b2bPermissionsMap","isCreatePermission","verifyCreatePermission","isEnabled","customLabel","addEditUserRef","useRef","paginationTableRef","useTableRef","initSearch","first","offset","search","companyRoleId","q","filterMoreInfo","getFilterMoreList","filterSearch","setFilterSearch","translatedFilterInfo","setTranslatedFilterInfo","valueName","setValueName","initSearchList","current","refresh","handleEdit","handleOpenAddEditUserClick","type","handleDelete","handleCancelClick","useEffect","handleGetTranslatedFilterInfo","map","element","translatedItem","translatedOptions","options","option","label","idLang","default","defaultName","jsx","B3Spin","isSpinning","children","jsxs","Box","sx","display","flexDirection","flex","B3Filter","handleChange","_","value","handleFilterChange","customButtonConfig","handleFilterCustomButtonClick","handleAddUserClick","B3PaginationTable","ref","getRequestList","async","data","getUsers","params","users","edges","totalCount","searchParams","itemXs","requestLoading","renderItem","row","UserItemCard","item","onEdit","onDelete","B3AddEditUser","renderList","B3Dialog","isOpen","title","leftSizeBtn","rightSizeBtn","handleLeftClick","handRightClick","deleteUser","snackbar","success","rightStyleBtn","color","isShowBordered","width","height","NoDataContainer","styled","minHeight","backgroundColor","justifyContent","alignItems","fontSize","NoDataText","marginLeft","B3NoData","isLoading","DataUsageRounded","isNodeWrapper","B3Table","listItems","pagination","onPaginationChange","rowsPerPageOptions","isInfiniteScroll","showRowsPerPageOptions","state","portalStyle","useContext","CustomStyleContext","customColor","getContrastColor","count","handlePaginationChange","handleChangePage","page","handleChangeRowsPerPage","event","parseInt","target","length","Fragment","Grid","container","spacing","index","node","xs","TablePagination","labelDisplayedRows","from","to","labelRowsPerPage","component","b3HexToRgb","marginTop","rowsPerPage","onPageChange","onRowsPerPageChange","memoWithGenerics","forwardRefWithGenerics","initPagination","selectCompanyHierarchyIdCache","cache","loading","setLoading","setPagination","setAllCount","cacheAllList","setCacheAllList","list","setList","cacheList","useCallback","copyCacheAllList","forEach","some","push","fetchList","b3Pagination","isRefresh","isEqual","createdBy","getCreatedByReg","emailRegArr","exec","createdByUserRegArr","createdByUser","trim","email","requestList","e","isChangeCompany","isEmpty","tablePagination","getList","getCacheList","useImperativeHandle","toNumberSafely","getUserRole","name","required","fieldType","disabled","variant","size","emailError","FIELD_TYPE","getB2BUserExtraFields","userExtraFieldsList","userExtraFields","B3Request","graphqlB2B","query","listOfValue","currentItems","isExtraFields","fieldName","labelName","isRequired","defaultValue","max","maximumValue","rows","numberOfRows","maxLength","maximumLength","handleConversionExtraItemFormat","filter","visibleToEnduser","err","b2bLogger","error","forwardRef","b2bId","open","setOpen","setType","editData","setEditData","addUpdateLoading","setAddUpdateLoading","usersFiles","setUsersFiles","userExtrafields","setUserExtrafields","control","handleSubmit","getValues","formState","errors","clearErrors","setValue","setError","useForm","mode","handleGetUsersFiles","newUsersFiles","newItem","isKeyOf","obj","validateEmailValue","userType","userInfo","companyName","variables","emailValue","channelId","storeHash","then","res","userEmailCheck","isValid","UserTypes","DOES_NOT_EXIST","B2C","CURRENT_B2B_COMPANY_DIFFERENT_CHANNEL","includes","message","getUsersFiles","disabledUserRole","roleArr","getUser","user","extrafieldsInfo","extraFields","newData","extrafieldsData","fieldValue","companyRoleItem","find","companyRoleName","allUsersFiles","concat","extraFieldsInfo","selectedData","keyValue","Object","keys","extrafields","extraField","handleGetExtrafieldsInfo","addChannel","userData","firstName","lastName","phone","addUser","updateUser","B3CustomForm","formFields","Flex","props","userUpdateActionsPermission","userDeleteActionsPermission","updateActionsPermission","verifyLevelPermission","code","deleteActionsPermission","Card","CardContent","Typography","p","roleItem","textColor","B3Tag","statusRender","IconButton","marginRight","onClick","EditIcon","DeleteIcon"],"mappings":"2uCAuCA,WACE,MAAOA,EAAkBC,GAAuBC,EAAAA,UAAkB,IAE3DC,EAAYC,GAAiBF,EAAAA,UAAkB,IAE/CG,EAAQC,GAAaJ,aACtBK,EAASC,KAERC,GAAYC,IAEbC,EAAeC,IAEfC,EAAoBC,EAAe,EAAGC,iBAAkBA,EAAYC,kBAAkBC,IACtFC,EAAOJ,EAAe,EAAGK,aAAcA,EAAQC,SAASF,MACxDG,EAAcP,EAAe,EAAGK,aAAcA,EAAQE,aAEtDC,EAAYC,OAAOL,KAAUM,EAAaC,YAAcZ,EAAoBQ,GAAaJ,GAEzFS,EAAiBZ,EAAea,IAChCC,yBAAEA,GAA6Bd,EACnC,EAAGK,aAAcA,EAAQU,sBAGrBC,EAAyBJ,EAAeK,4BAExCC,EAAaC,EAAAA,QAAQ,KACzB,MAAMF,4BAAEA,GAAgCG,EAElCC,EAAqBC,EACzBL,EACAR,OAAOK,IAET,MAAO,CACLS,UAAWP,GAA0BK,EACrCG,YAAa/B,EAAO,4BAKrB,CAACuB,EAAwBF,IAEtBW,EAAiBC,EAAAA,OAA+B,OAC/CC,GAAsBC,IAEvBC,EAAa,CACjBC,MAAO,GACPC,OAAQ,EACRC,OAAQ,GACRC,cAAe,GACfzB,YACA0B,EAAG,IAECC,EAAiBC,EAAkB3C,IAElC4C,EAAcC,GAAmBlD,EAAAA,SAA4ByC,IAE7DU,EAAsBC,GAC3BpD,EAAAA,SAA6B+C,IACxBM,EAAWC,GAAgBtD,EAAAA,SAAiB,IAe7CuD,EAAiBA,KACrBhB,EAAmBiB,SAASC,WA8CxBC,EAAoBvD,IACxBkC,EAAemB,SAASG,2BAA2B,CAAEC,KAAM,OAAQzD,OAAAA,KAG/D0D,EAAwB9C,IAC5BX,EAAUW,GACVb,GAAc,IAGV4D,EAAoBA,KACxB5D,GAAc,IA6BhB,OAPA6D,EAAAA,UAAU,KA3E4BC,MACpC,MAAMb,EAAuBJ,EAAekB,IAAKC,IAC/C,MAAMC,EAAiBD,EACjBE,EAAoBF,EAAQG,SAASJ,IAAKK,IACxBA,EACRC,MAAQlE,EAAOiE,EAAOE,QAC7BF,IAQT,OALAH,EAAeE,QAAUD,EACzBD,EAAeb,aAAeA,EAC9Ba,EAAeM,QAAUxB,EAAaJ,cACtCsB,EAAeO,YAAczB,EAAaJ,cAAgBQ,EAAY,GAE/Da,IAGTd,EAAwBD,IA2DxBa,IAIC,CAACf,EAAcA,EAAaJ,gBAG7B8B,EAAAA,IAACC,EAAA,CAAOC,WAAY/E,EAClBgF,SAAAC,EAAAA,KAACC,EAAA,CACCC,GAAI,CACFC,QAAS,OACTC,cAAe,SACfC,KAAM,GAGRN,SAAA,CAAAH,EAAAA,IAACU,EAAA,CACCtC,eAAgBI,EAChBmC,aAvEaA,CAACC,EAAWC,KAC/B,MAAM5C,EAAS,IACVK,EACHH,EAAG0C,GAELtC,EAAgBN,IAmEV6C,mBAhEoBD,IAC1B,MAAM5C,EAAS,IACVK,EACHJ,cAAe2C,EAAM3C,cACrBF,OAAQ,GAEVO,EAAgBN,IA2DV8C,mBAAoB5D,EACpB6D,8BAzDmBC,KACzBvD,EAAemB,SAASG,2BAA2B,CAAEC,KAAM,WA0DvDe,EAAAA,IAACkB,EAAA,CACCC,IAAKvD,EACLwD,eArHmDC,UACzD,MAAMC,QAAaC,GAASC,IAG1BC,OAAOC,MAAEA,EAAAC,WAAOA,IACdL,EAEJ,MAAO,CACLI,QACAC,eA6GIC,aAActD,GAAgB,CAAA,EAC9BuD,OAAQ/F,EAAe,EAAI,EAC3BgG,eAAgB1G,EAChB2G,WAAaC,GACXhC,MAACiC,GAAA,CAA0BC,KAAMF,EAAKG,OAAQpD,EAAYqD,SAAUlD,GAAjD8C,EAAI5F,MAG3B4D,EAAAA,IAACqC,GAAA,CACC5F,UAAW,GAAGM,GAA4BN,IAC1C6F,WAAY1D,EACZuC,IAAKzD,IAEPsC,EAAAA,IAACuC,EAAA,CACCC,OAAQlH,EACRmH,MAAO/G,EAAO,6BACdgH,YAAahH,EAAO,yBACpBiH,aAAcjH,EAAO,yBACrBkH,gBAAiBzD,EACjB0D,eA/DsBxB,UAC5B,GAAK7F,EAIL,IACEJ,GAAoB,GACpB+D,UACM2D,GAAW,CACftH,OAAAA,EACAiB,UAAWM,GAA4BN,IAEzCsG,EAASC,QAAQtH,EAAO,yCAC1B,CAAA,QACEN,GAAoB,GACpBwD,GACF,GAgDMoD,IAAKxG,EACLyH,cAAe,CACbC,MAAO,WAETC,gBAAgB,EAEhBhD,SAAAH,EAAAA,IAACK,EAAA,CACCC,GAAI,CACFC,QAAS,OACT6C,MAAOxH,EAAW,OAAS,QAC3ByH,OAAQ,QAGTlD,WAAO,wCAMpB,GC/PO,MCSDmD,EAAkBC,EAAO,MAAPA,CAAc,KAAA,CACpCF,OAAQ,OACRG,UAAW,QACXC,gBAAiB,OACjBlD,QAAS,OACTmD,eAAgB,SAChBC,WAAY,SACZT,MAAO,OACPU,SAAU,UAGNC,EAAaN,EAAO,OAAPA,CAAe,KAAA,CAChCO,WAAY,UAGd,SAAwBC,GAASC,UAAEA,IACjC,MAAMtI,EAASC,IACf,cACG2H,EAAA,CACEnD,SAAA,EAAC6D,GAAahE,EAAAA,IAACiE,EAAA,CAAiBL,SAAS,gBACzCC,EAAA,CAAY1D,SAAA6D,EAAY,GAAKtI,EAAO,2BAG3C,CChBO,MAAMwI,EACXhC,GAC2B,SAAUA,EA0BhC,SAASiC,GAAaC,UAC3BA,EAAAC,WACAA,EAAAC,mBACAA,EAAAC,mBACAA,EAAAxC,WACAA,EAAAyC,iBACAA,EAAAR,UACAA,EAAAnC,OACAA,EAAA4C,uBACAA,IAEA,MACEC,OACEC,aAAalB,gBAAEA,EAAkB,aAEjCmB,EAAAA,WAAWC,GAETC,EAAcC,EAAiBtB,IAE9B7H,GAAYC,IAEbH,EAASC,KAETqC,OAAEA,EAAAgH,MAAQA,EAAAjH,MAAOA,GAAUsG,EAE3BY,EAA0BZ,IACzBL,GACHM,EAAmBD,IAIjBa,EAAmBA,CAACtE,EAAyCuE,KACjEF,EAAuB,IAClBZ,EACHrG,OAAQmH,EAAOpH,KAIbqH,EAA2BC,IAC/BJ,EAAuB,IAClBZ,EACHrG,OAAQ,EACRD,MAAOuH,SAASD,EAAME,OAAO1E,MAAO,KAAO9C,KAI/C,OAAOqG,EAAUoB,OAAS,EACxBpF,EAAAA,KAAAqF,EAAAA,SAAA,CACGtF,SAAA,CAAAqE,GACCpE,EAAAA,KAAAqF,WAAA,CACEtF,SAAA,CAAAH,EAAAA,IAAC0F,EAAA,CAAKC,WAAS,EAACC,QAAS,EACtBzF,SAAAiE,EAAU9E,IAAI,CAAC0C,EAAK6D,KACnB,MAAMC,EAAO5B,EAAclC,GAAOA,EAAI8D,KAAO9D,EAE7C,OAEEhC,EAAAA,IAAC0F,EAAA,CAAKxD,MAAI,EAAC6D,GAAI,GACZ5F,SAAA2F,GAAQ/D,EAAW+D,IADE,GAAGA,EAAK1J,GAAKyJ,SAO3C7F,EAAAA,IAACgG,EAAA,CACCC,mBAAoBA,EAAGC,OAAMC,KAAInB,MAAAA,KAC/BtJ,EAAO,6BAA8B,CAAEwK,OAAMC,KAAInB,MAAAA,IAEnDT,mBAAoBE,EAAyBF,EAAqB,GAClE6B,iBAAkB1K,EAAO,6BACzB2K,UAAU,MACV/F,GAAI,CACF4C,MAAOtH,EAAW0K,EAAWxB,EAAa,KAAQ,sBAClDyB,UAAW,SACX,sBAAuB,CACrBhG,QAAS,QAEX,QAAS,CACP2C,MAAOtH,EAAW0K,EAAWxB,EAAa,KAAQ,wBAGtDE,QACAwB,YAAazI,EACboH,KAAgB,IAAVpH,EAAc,EAAIC,EAASD,EACjC0I,aAAcvB,EACdwB,oBAAqBtB,QAIzBZ,GACApE,EAAAA,KAAAqF,EAAAA,SAAA,CACEtF,SAAA,CAAAH,EAAAA,IAAC0F,EAAA,CAAKC,WAAS,EAACC,QAAS,EACtBzF,SAAAiE,EAAU9E,IAAI,CAAC0C,EAAK6D,KACnB,MAAMC,EAAO5B,EAAclC,GAAOA,EAAI8D,KAAO9D,EAE7C,OAEEhC,EAAAA,IAAC0F,EAAA,CAAKxD,MAAI,EAAC6D,GAAIlE,EACZ1B,SAAA2F,GAAQ/D,GAAcA,EAAW+D,IADR,GAAGA,EAAK1J,GAAKyJ,SAO/C7F,EAAAA,IAACgG,EAAA,CACCC,mBAAoBA,EAAGC,OAAMC,KAAInB,MAAAA,KAC/BtJ,EAAO,6BAA8B,CAAEwK,OAAMC,KAAInB,MAAAA,IAEnDT,mBAAoBE,EAAyBF,EAAqB,GAClE6B,iBAAkB1K,EAAO,kCACzB2K,UAAU,MACV/F,GAAI,CACF4C,MAAO4B,EACPyB,UAAW,SACX,sBAAuB,CACrBhG,QAAS,QAEX,QAAS,CACP2C,MAAO4B,IAGXE,QACAwB,YAAazI,EACboH,KAAgB,IAAVpH,EAAc,EAAIC,EAASD,EACjC0I,aAAcvB,EACdwB,oBAAqBtB,UAM7BpF,EAAAA,IAAC+D,EAAA,CAASC,aAEd,CC0CA,MAAM9C,EAAoByF,EAAiBC,EA1K3C,UACE7E,WACEA,EAAAF,OACAA,EAAAT,eACAA,EAAAQ,aACAA,EAAAE,eACAA,EAAA2C,uBACAA,GAAyB,GAE3BtD,GAEA,MAAMoD,EAAqB,CAAC,GAAI,GAAI,IAC9BsC,EAAiB,CACrB7I,OAAQ,EACRD,MAAOwG,EAAmB,KAGtBxH,yBAAEA,GAA6Bd,EACnC,EAAGK,aAAcA,EAAQU,sBAErB8J,EAAgCnJ,EAAAA,OAAOZ,GAEvCgK,EAAQpJ,EAAAA,OAAoC,OAE3CqJ,EAASC,GAAc5L,EAAAA,UAAS,IAEhCgJ,EAAY6C,GAAiB7L,EAAAA,SAA0BwL,IAEvD7B,EAAOmC,GAAe9L,EAAAA,SAAiB,IAEvC+L,EAAcC,GAAmBhM,EAAAA,SAAsD,KAEvFiM,EAAMC,GAAWlM,EAAAA,SAAsD,KAEvEO,GAAYC,IAEb2L,EAAYC,EAAAA,YACf/F,IACM0F,EAAa5B,QAAQ6B,EAAgB3F,GAE1C,MAAMgG,EAAmB,IAAIN,GAE7B1F,EAAMiG,QAASzF,IACb,MAAMvC,EAASuE,EAAchC,GAAQA,EAAK4D,KAAO5D,EACjCkF,EAAaQ,KAAMb,IACb7C,EAAc6C,GAASA,EAAMjB,KAAOiB,GACrC3K,KAAOuD,EAAOvD,KAIjCsL,EAAiBG,KAAK3F,KAI1BmF,EAAgBK,IAElB,CAACN,IAGGU,EAAYL,EAAAA,YAChBpG,MAAO0G,EAAgCC,KACrC,IACE,GAAIjB,GAAOlI,SAAWoJ,EAAQlB,EAAMlI,QAAS+C,KAAkBoG,IAAcD,EAC3E,OAEFhB,EAAMlI,QAAU+C,EAEhBqF,GAAW,GACPnF,MAA+B,GACnC,MAAMoG,UAAEA,EAAY,IAAOtG,EAGrBuG,EAAkB,SAClBC,EAFc,YAEYC,KAAKH,GAC/BI,EAAsBH,EAAgBE,KAAKH,GAC3CK,EAAgBD,GAAqB9C,OAAS8C,EAAoB,GAAGE,OAAS,GAM9EhH,EAAS,IALS,IACnBI,EACHsG,UAAWK,EACXE,MAAOL,GAAa5C,OAAS4C,EAAY,GAAK,IAI9CrK,MAAOgK,GAAchK,OAASsG,EAAWtG,MACzCC,OAAQ+J,GAAc/J,QAAU,GAE5B0K,QAAoBtH,EAAeI,IACnCE,MAAEA,EAAAC,WAAOA,GAAe+G,EAE9BnB,EAAQ7F,GAER8F,EAAU9F,GAELqG,GACHb,EAAc,CACZnJ,MAAOsG,EAAWtG,MAClBC,OAAQ,IAIZmJ,EAAYxF,GACZsF,GAAW,GACPnF,MAA+B,EACrC,OAAS6G,GACP1B,GAAW,GACPnF,MAA+B,EACrC,GAEF,CAAC0F,EAAWpG,EAAgBiD,EAAWtG,MAAO+D,EAAgBF,IAG1D9C,EAAU2I,EAAAA,YAAY,KAC1BK,EAAUzD,GAAY,IACrB,CAACyD,EAAWzD,IAEfjF,EAAAA,UAAU,KACR,MAAMwJ,EACJlM,OAAOoK,EAA8BjI,WAAanC,OAAOK,GACtD8L,EAAQjH,KACPgH,GACFd,EAAUzD,GAAY,GACtByC,EAA8BjI,QAAU9B,GAExC+K,MAIH,CAACA,EAAWlG,EAAc7E,EAA0BsH,IAEvD,MAKMyE,EAAkB,IACnBzE,EACHW,SAGI+D,EAAUtB,EAAAA,YAAY,IAAMH,EAAM,CAACA,IAEnC0B,EAAevB,EAAAA,YAAY,IAAML,EAAc,CAACA,IActD,OAZA6B,EAAAA,oBACE9H,EACA,KAAA,CACEoG,UACAF,kBACA0B,UACAC,eACAlK,YAEF,CAACiK,EAASC,EAAclK,IAIxBkB,EAAAA,IAACmE,EAAA,CACCC,UAAWkD,EACXjD,WAAYyE,EACZvE,qBACAD,mBA/B2BjD,gBACvByG,EAAUzD,GAChB6C,EAAc7C,IA8BZG,iBAAkB5I,EAClBoI,UAAWgD,EACXjF,aACAF,SACA4C,0BAGN,ICtNMyE,EAAkBrI,QACZ,IAAVA,GAAiC,KAAVA,EAAenE,OAAOmE,QAAS,ECClDqI,EAAkBrI,QACZ,IAAVA,GAAiC,KAAVA,EAAenE,OAAOmE,QAAS,ECwBlDsI,EAAcA,IACqB,CACrC,CACEvJ,MAAO,QACPwJ,KAAM,QACNvI,MAAO,EACPhB,OAAQ,iCAEV,CACED,MAAO,eACPwJ,KAAM,eACNvI,MAAO,EACPhB,OAAQ,uCAEV,CACED,MAAO,eACPwJ,KAAM,eACNvI,MAAO,EACPhB,OAAQ,wCAORxB,EAAqB3C,GAClB,CACL,CACE0N,KAAM,gBACNxJ,MAAOlE,EAAO,kCACd2N,UAAU,EACVvJ,QAAS,GACTC,YAAa,GACbuJ,UAAW,mBACXvD,GAAI,GACJwD,UAAU,EACVC,QAAS,SACTC,KAAM,UA8DNC,GAAyB,CAC7B,EAAG,wCACH,EAAG,mCACH,EAAG,oCACH,EAAG,uCCtHCC,GAAa,CACjB,EAAG,OACH,EAAG,YACH,EAAG,SACH,EAAG,YAqDCC,GAAwBvI,UAC5B,IAAIwI,EAA6C,GACjD,IACE,MAAMC,gBAAEA,SCrCVC,EAAUC,WAAwC,CAAEC,MAnC3B,yQD6EvBJ,EAxDqCC,IACiBA,EAAgBxK,IAAK4C,IAC3E,MAAMgI,YAAEA,GAAgBhI,EAClBjD,EAAO0K,GAAWzH,EAAKoH,WAEvBa,EAAoC,CACxCC,eAAe,EACfhB,KAAMlH,EAAKmI,UACXzK,MAAOsC,EAAKoI,UACZjB,SAAUnH,EAAKqI,WACfzK,QAASoC,EAAKsI,cAAgB,GAC9BlB,UAAWrK,EACX8G,GAAI,GACJyD,QAAS,SACTC,KAAM,SAGR,OAAQxK,GACN,IAAK,WACH,GAAIiL,EAAa,CACf,MAAMxK,EAA+BwK,GAAa5K,IAAKK,IAAA,CACrDC,MAAOD,EACPkB,MAAOlB,KAGLD,EAAQ8F,OAAS,IACnB2E,EAAazK,QAAUA,EAE3B,CAEA,MACF,IAAK,SACHyK,EAAaM,IAAMvI,EAAKwI,cAAgB,GACxC,MACF,IAAK,YACHP,EAAaQ,KAAOzI,EAAK0I,cAAgB,GACzC,MACF,QACET,EAAaU,UAAY3I,EAAK4I,eAAiB,GAInD,OAAOX,IAY0BY,CAFXjB,EAAgBkB,OAAQ9I,GAASA,EAAK+I,kBAK9D,OAASC,GACPC,EAAUC,MAAMF,EAClB,CAEA,OAAOrB,GElFHX,GAAkBrI,QACZ,IAAVA,GAAiC,KAAVA,EAAenE,OAAOmE,QAAS,EC6RlDwB,GAAgBgJ,EAAAA,WAhPtB,UAAqB5O,UAAEA,EAAA6F,WAAWA,GAAgCnB,GAChE,MAAMmK,EAAQrP,EAAe,EAAGK,aAAcA,EAAQC,SAAS+O,QAExDC,EAAMC,GAAWnQ,EAAAA,UAAkB,IACnC4D,EAAMwM,GAAWpQ,EAAAA,SAAiB,KAElCqQ,EAAUC,GAAetQ,cAEzBuQ,EAAkBC,GAAuBxQ,EAAAA,UAAkB,IAE3DyQ,EAAYC,GAAiB1Q,EAAAA,SAAiC,KAC9D2Q,EAAiBC,GAAsB5Q,EAAAA,SAAiC,IAEzEK,EAASC,KAETuQ,QACJA,EAAAC,aACAA,EAAAC,UACAA,EACAC,WAAWC,OAAEA,GAAOC,YACpBA,EAAAC,SACAA,EAAAC,SACAA,GACEC,EAAQ,CACVC,KAAM,aAQRvN,EAAAA,UAAU,KACuB,IAA3B4M,EAAgBxG,QANMnE,WAC1B,MAAM2K,QAAwBpC,KAC9BqC,EAAmBD,IAKjBY,IAED,CAACZ,EAAgBxG,SAoBpBpG,EAAAA,UAAU,KACR,GAAImM,EAAM,CACR,MAAMsB,EAAgBf,EAAWxM,IAAK4C,IACpC,MAAM4K,EAAU5K,EV3GD6K,IAAmBC,EUiHlC,MAJa,SAAT/N,GAAmByM,GACrBc,EAAStK,EAAKkH,MV9GkB4D,EU8GJtB,EAAUxJ,EAAKkH,QV7G5C4D,EU6GoDtB,EAASxJ,EAAKkH,WAAQ,IAGpE0D,IAGTf,EAAcc,EAChB,GAGC,CAACnB,EAAUH,EAAMtM,IAEpB,MAAME,EAAoBA,KACxB2M,EAAWnE,QAASzF,IAClBsK,EAAStK,EAAKkH,KAAM,IAChBlH,EAAKkI,eACPoC,EAAStK,EAAKkH,KAAMlH,EAAKpC,SAAW,MAGxCyM,IACAf,GAAQ,IAGJyB,EAAqB5L,UACzB,MAAM6L,SACJA,EACAC,UAAUC,YAAEA,ULrGaC,EKsGF,CACvB5E,MAAO6E,EACP7Q,YACA8Q,aLxGJxD,EAAUC,WAAmC,CAC3CC,MA9BsB,iSA+BtBoD,UAAW,CACT5E,MAAO4E,EAAU5E,MACjBhM,UAAWyM,EAAemE,EAAU5Q,WACpC8Q,UAAWrE,EAAemE,EAAUE,WACpCC,eAEDC,KAAMC,IAAA,IACJA,EAAIC,eACPC,QAASF,EAAIC,eAAeT,WAAaW,EAAUC,mBAXxBT,MK4G3B,MAAMO,EAAU,CACdC,EAAUC,eACVD,EAAUE,IACVF,EAAUG,uCACVC,SAASf,GAYX,OAVKU,GACHnB,EAAS,QAAS,CAChBxN,KAAM,SACNiP,QAASxS,EAAOgO,GAAWwD,GAAW,CACpCE,YAAaA,EAAc,IAAIA,KAAiB,GAChD3E,MAAO6E,MAKN,CACLM,UACAV,aAyDElO,EAAyDqC,UAC7D,MAAQpC,KAAAA,GAASS,EACXoM,EJrJYqC,EAAClP,EAAcvD,EAA4B0S,GAAmB,KAClF,MAAMC,EAAUhQ,EAAkB3C,GAiDlC,OAhDA2S,EAAQ,GAAGhF,UAAW,EACtBgF,EAAQ,GAAG9E,SAAW6E,EAEH,IACdC,EACH,CACEjF,KAAM,QACNxJ,MAAOlE,EAAO,+BACd2N,UAAU,EACVC,UAAW,OACXvD,GAAI,GACJwD,SAAmB,SAATtK,EACVa,QAAS,GACT0J,QAAS,SACTC,KAAM,SAER,CACEL,KAAM,YACNxJ,MAAOlE,EAAO,mCACd2N,UAAU,EACVvJ,QAAS,GACTwJ,UAAW,OACXvD,GAAI,EACJyD,QAAS,SACTC,KAAM,SAER,CACEL,KAAM,WACNxJ,MAAOlE,EAAO,kCACd2N,UAAU,EACVC,UAAW,OACXvD,GAAI,EACJjG,QAAS,GACT0J,QAAS,SACTC,KAAM,SAER,CACEL,KAAM,QACNxJ,MAAOlE,EAAO,qCACd2N,UAAU,EACVC,UAAW,OACXvD,GAAI,GACJjG,QAAS,GACT0J,QAAS,SACTC,KAAM,WIuGW0E,CACjBlP,EACAvD,EACS,SAATuD,GAAkBqM,IAAU5O,OAAOgD,EAAQlE,SAG7C,GAAa,SAATyD,EAAiB,CACnB,MAAMzD,OAAEA,GAAWkE,EACb4B,OC9LWgN,GAAG9S,SAAQiB,eAChCsN,EAAUC,WAAyB,CACjCC,MAtCc,sUAuCdoD,UAAW,CAAE7R,OAAQkB,OAAOlB,GAASiB,UAAWC,OAAOD,MACtDgR,KAAK,EAAGc,UAAWA,GD0LCD,CAAQ,CAAE9S,SAAQiB,cAC/B+R,EAAsClN,EAAKmN,aAAe,GAChE,IAAIC,EAAUpN,EACd,GAAIkN,GAAmBA,EAAgBhJ,OAAS,EAAG,CACjD,MAAMmJ,EAAoC,CAAA,EAE1CH,EAAgB7G,QAASzF,IACvByM,EAAgBzM,EAAKmI,WAAanI,EAAK0M,aAGzCF,EAAU,IACLpN,KACAqN,EAEP,CAEAhD,EAAY,CAAEvP,GAAIZ,KAAWkT,IAE7B,MAAMG,EACJ/C,EAAWgD,KAAM5M,GAAuB,kBAAdA,EAAKkH,OAA6B,KAC1DyF,IACFA,EAAgB9O,YAAcuB,GAAMyN,iBAAmB,GACvDF,EAAgB/O,QAAUwB,GAAMpD,eAAiB,GAErD,CACA,MAAM8Q,EAAgBC,EAAOnD,EAAYE,GACzCD,EAAciD,GAEdvD,EAAQxM,GACRuM,GAAQ,IAOV,OAJAvC,EAAAA,oBAAoB9H,EAAK,MACvBnC,gCAIAgB,EAAAA,IAACuC,EAAA,CACCC,OAAQ+I,EACR9I,MACoB/G,EAAT,SAATuD,EAAyB,0BAAoC,6BAE/DyD,YAAahH,EAAO,yBACpBiH,aAAcjH,EAAO,2BACrBkH,gBAAiBzD,EACjB0D,eA5GuB5B,KACzBkL,EAAa9K,UACXwK,GAAoB,GACpB,MAAMqD,EAlFwBC,KAChC,MAAMC,EAAWC,OAAOC,KAAKH,GAEvBI,EAAkC,GAYxC,OAXAvD,EAAgBrE,QAASzF,IACvB,GAAIkN,EAASnB,SAAS/L,EAAKkH,MAAO,CAChC,MAAMoG,EAAa,CACjBnF,UAAWnI,EAAKkH,MAAQ,GACxBwF,WAAYO,EAAajN,EAAKkH,OAAS,IAGzCmG,EAAY1H,KAAK2H,EACnB,IAGKD,GAmEmBE,CAAyBnO,GACjD,IAAI4M,EAAUxS,EAAO,sCAErB,IACE,MAAM8F,EAA+B,CACnC/E,YACAyB,cAAexB,OAAO4E,EAAKpD,kBACxBoD,EACHmN,YAAaS,GAGf,GAAa,SAATjQ,EAAiB,CACnB,MAAM2O,QAAEA,EAAAV,SAASA,SAAmBD,EAAmB3L,EAAKmH,OAE5D,IAAKmF,EAEH,YADA/B,GAAoB,GAIlBqB,IAAaW,EAAUG,wCACzBxM,EAAOkO,YAAa,EACpBxB,EAAUxS,EAAO,8BAA+B,CAC9C+M,MAAOnH,EAAKmH,cN/JFnH,KACtB,MAAMqO,EAAW,CACflT,UAAWyM,EAAe5H,EAAK7E,WAC/ByB,cAAegL,EAAe5H,EAAKpD,eAEnCuK,MAAOnH,EAAKmH,MACZmH,UAAWtO,EAAKsO,UAChBC,SAAUvO,EAAKuO,SACfC,MAAOxO,EAAKwO,MACZJ,WAAYpO,EAAKoO,WACjBX,gBAAiBzN,EAAKyN,gBACtBN,YAAanN,EAAKmN,aAGpB,OAAO1E,EAAUC,WAA4B,CAAEC,MAxC/B,kJAwCiDoD,UAAW,CAAEsC,eMsJhEI,CAAQvO,EAChB,CAEa,SAATvC,IACFuC,EAAOhG,OAASkQ,GAAUtP,IAAM,GAChC8R,EAAUxS,EAAO,gDACV8F,EAAOiH,WDzKGnH,KACzB,MAAMqO,EAAW,CACfnU,OAAQ0N,GAAe5H,EAAK9F,QAC5BiB,UAAWyM,GAAe5H,EAAK7E,WAC/ByB,cAAegL,GAAe5H,EAAKpD,eAEnCuK,MAAOnH,EAAKmH,MACZmH,UAAWtO,EAAKsO,UAChBC,SAAUvO,EAAKuO,SACfC,MAAOxO,EAAKwO,MACZJ,WAAYpO,EAAKoO,WACjBX,gBAAiBzN,EAAKyN,gBACtBN,YAAanN,EAAKmN,aAGpB,OAAO1E,EAAUC,WAA+B,CAAEC,MA1C/B,yJA0CoDoD,UAAW,CAAEsC,eC6JtEK,CAAWxO,IAGnBrC,IAEA4D,EAASC,QAAQkL,GAEjB5L,GACF,CAAA,QACEuJ,GAAoB,EACtB,GAhDFM,IA4GEnF,QAAS4E,EACTzI,gBAAc,EAEdhD,SAAAH,EAAAA,IAACiQ,EAAA,CACCC,WAAYpE,EACZQ,SACAJ,UACAE,YACAI,cAIR,GE5RMtD,GAAkBrI,QACZ,IAAVA,GAAiC,KAAVA,EAAenE,OAAOmE,QAAS,EAmB3CiC,GAAcuK,GACzBtD,EAAUC,WAA+B,CACvCC,MAnBiB,yJAoBjBoD,UAAW,CACT5Q,UAAWyM,GAAemE,EAAU5Q,WACpCjB,OAAQ0N,GAAemE,EAAU7R,WC6B1B+F,GAAYD,GACvByI,EAAUC,WAA0B,CAClCC,MAxDe,yfAyDfoD,UAAW,IACN/L,EACHnD,EAAGmD,EAAKnD,GAAK,GACb1B,UAAWC,OAAO4E,EAAK7E,WACvByB,mBACyB,IAAvBoD,EAAKpD,eAAsD,KAAvBoD,EAAKpD,cACrCxB,OAAO4E,EAAKpD,oBACZ,KCvBNiS,GAAO5M,EAAO,MAAPA,CAAc,KAAA,CACzBhD,QAAS,OACToD,WAAY,SACZD,eAAgB,mBAGX,SAASzB,GAAamO,GAC3B,MAAQlO,KAAMiL,EAAAhL,OAAUA,EAAAC,SAAQA,GAAagO,GACvC5T,YAAEA,EAAAJ,GAAaA,EAAA2S,gBAAIA,YAAiBa,EAAAC,SAAWA,EAAApH,MAAUA,GAAU0E,GAEnEkD,4BAAEA,EAAAC,4BAA6BA,GAAgCjT,EAE/DkT,EAA0BC,EAAsB,CACpDC,KAAMJ,EACN5T,UAAWC,OAAOF,GAAaC,WAAa,GAC5CjB,OAAQkB,OAAON,KAEXsU,EAA0BF,EAAsB,CACpDC,KAAMH,EACN7T,UAAWC,OAAOF,GAAaC,WAAa,GAC5CjB,OAAQkB,OAAON,KAmDjB,aACGuU,EAAA,CACCxQ,SAAAC,EAAAA,KAACwQ,EAAA,CACCtQ,GAAI,CACF4C,MAAO,WAGT/C,SAAA,CAAAC,EAAAA,KAACyQ,EAAA,CACCrH,QAAQ,KACRlJ,GAAI,CACF4C,MAAO,uBAGR/C,SAAA,CAAAyP,EAAU,IAAEC,KAGf7P,EAAAA,IAAC6Q,EAAA,CACCvQ,GAAI,CACFwQ,EAAG,UAELtH,QAAQ,QAEPrJ,SAAAsI,WAEF0H,GAAA,CACEhQ,SAAA,CArCaiJ,KACpB,MACM2H,EArCW5H,IACkC7J,IAAK4C,GAC3B,IAAvBxF,OAAOwF,EAAKrB,OACU,iBAApBkO,EACK,CACL7L,MAAO,UACP8N,UAAW,WACR9O,EACHtC,MAAOmP,EACP3F,KAAM2F,GAGH,CACL7L,MAAO,UACP8N,UAAW,WACR9O,GAGoB,IAAvBxF,OAAOwF,EAAKrB,OACP,CACLqC,MAAO,yBACP8N,UAAW,WACR9O,GAGA,CACLgB,MAAO,UACP8N,UAAW,WACR9O,IASsB4M,KAAM5M,GAAwBA,EAAKkH,OAASA,GAEzE,OAAK2H,EAEH/Q,EAAAA,IAACiR,GAAM/N,MAAO6N,EAAS7N,MAAO8N,UAAWD,EAASC,UAC/C7Q,SAAA4Q,EAASnR,QAHQ,MAiCfsR,CAAanC,UACb1O,EAAA,CACEF,SAAA,CAAAoQ,GACCvQ,EAAAA,IAACmR,EAAA,CACC,aAAW,OACX1H,KAAK,QACLnJ,GAAI,CACF8Q,YAAa,OAEfC,QAASA,IAAMlP,EAAOgL,EAAS/Q,IAE/B+D,SAAAH,EAAAA,IAACsR,EAAA,CAAS1N,SAAS,cAGtB8M,GACC1Q,EAAAA,IAACmR,EAAA,CAAW,aAAW,SAAS1H,KAAK,QAAQ4H,QAASA,IAAMjP,EAAS+K,EAAS/Q,IAC5E+D,eAACoR,EAAA,CAAW3N,SAAS,wBAxCtBxH,EAgDf"}