{"version":3,"file":"users-DkbfJmiF.js","sources":["../../src/shared/service/b2b/graphql/users.ts"],"sourcesContent":["import { UserTypes } from '@/types';\n\nimport { storeHash } from '../../../../utils';\nimport B3Request from '../../request/b3Fetch';\n\nconst checkUserB2BEmail = (data: CustomFieldItems) => `\n  query UserEmailCheck {\n    userEmailCheck (\n      email: \"${data.email}\"\n      companyId: ${data.companyId || null}\n      storeHash: \"${storeHash}\"\n      channelId: ${data.channelId || null}\n    ){\n      userType,\n      userInfo{\n        id\n        email\n        firstName\n        lastName\n        phoneNumber\n        role\n        companyName\n        originChannelId\n        forcePasswordReset\n      }\n    }\n  }\n`;\n\nconst checkCustomerBCEmail = (data: CustomFieldItems) => `{\n  customerEmailCheck (\n    email: \"${data.email}\"\n    storeHash: \"${storeHash}\"\n    channelId: ${data.channelId || null}\n  ){\n    userType,\n  }\n}`;\n\nexport interface UserEmailCheckResponse {\n  data: {\n    userEmailCheck: {\n      userType: UserTypes;\n      userInfo: {\n        id: string | null;\n        email: string | null;\n        firstName: string | null;\n        lastName: string | null;\n        phoneNumber: string | null;\n        role: string | null;\n        companyName: string | null;\n        originChannelId: string | null;\n        forcePasswordReset: boolean | null;\n      };\n    };\n  };\n}\n\nexport const checkUserEmail = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: checkUserB2BEmail(data),\n  }).then((res) => ({\n    ...res.userEmailCheck,\n    isValid: res.userEmailCheck.userType === UserTypes.DOES_NOT_EXIST,\n  }));\n\nexport const checkUserBCEmail = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: checkCustomerBCEmail(data),\n  }).then((res) => ({\n    ...res.customerEmailCheck,\n    isValid: res.customerEmailCheck.userType !== UserTypes.B2C,\n  }));\n"],"names":["checkUserB2BEmail","data","storeHash","checkCustomerBCEmail","checkUserEmail","B3Request","res","UserTypes","checkUserBCEmail"],"mappings":"8HAKA,MAAMA,EAAqBC,GAA2B,mEAGtC,OAAAA,EAAK,MAAK,wBACP,OAAAA,EAAK,WAAa,KAAI,wBACrB,OAAAC,EAAS,wBACV,OAAAD,EAAK,WAAa,KAAI,kPAkBnCE,EAAwBF,GAA2B,0CAE3C,OAAAA,EAAK,MAAK,uBACN,OAAAC,EAAS,sBACV,OAAAD,EAAK,WAAa,KAAI,iCAyB1BG,EAAkBH,GAC7BI,EAAU,WAAW,CACnB,MAAOL,EAAkBC,CAAI,CAC/B,CAAC,EAAE,KAAMK,IAAS,CAChB,GAAGA,EAAI,eACP,QAASA,EAAI,eAAe,WAAaC,EAAU,cACrD,EAAE,EAESC,EAAoBP,GAC/BI,EAAU,WAAW,CACnB,MAAOF,EAAqBF,CAAI,CAClC,CAAC,EAAE,KAAMK,IAAS,CAChB,GAAGA,EAAI,mBACP,QAASA,EAAI,mBAAmB,WAAaC,EAAU,GACzD,EAAE"}