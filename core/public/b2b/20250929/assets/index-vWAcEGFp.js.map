{"version":3,"file":"index-vWAcEGFp.js","sources":["../../src/pages/Registered/RegisterComplete.tsx","../../src/pages/Registered/RegisteredAccount.tsx","../../src/pages/Registered/RegisteredDetail.tsx","../../src/pages/Registered/RegisterContent.tsx","../../src/pages/Registered/RegisteredStep.tsx","../../src/pages/Registered/index.tsx"],"sourcesContent":["import { MouseEvent, useContext, useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Alert, Box, Typography } from '@mui/material';\n\nimport { B3CustomForm } from '@/components';\nimport { Captcha } from '@/components/form';\nimport { getContrastColor } from '@/components/outSideComponents/utils/b3CustomStyles';\nimport { useB3Lang } from '@/lib/lang';\nimport { CustomStyleContext } from '@/shared/customStyleButton/context';\nimport { GlobalContext } from '@/shared/global';\nimport {\n  createB2BCompanyUser,\n  createBCCompanyUser,\n  sendSubscribersState,\n  uploadB2BFile,\n} from '@/shared/service/b2b';\nimport { getStorefrontToken } from '@/shared/service/b2b/graphql/recaptcha';\nimport { channelId, storeHash } from '@/utils';\nimport b2bLogger from '@/utils/b3Logger';\n\nimport { RegisteredContext } from './context/RegisteredContext';\nimport { deCodeField, toHump } from './config';\nimport { PrimaryButton } from './PrimaryButton';\nimport { InformationFourLabels, TipContent } from './styled';\nimport { RegisterFields } from './types';\n\ninterface RegisterCompleteProps {\n  handleBack: () => void;\n  handleNext: (password: string) => void;\n}\n\ntype RegisterCompleteList = Array<RegisterFields> | undefined;\n\nexport default function RegisterComplete(props: RegisterCompleteProps) {\n  const b3Lang = useB3Lang();\n  const { handleBack, handleNext } = props;\n  const [personalInfo, setPersonalInfo] = useState<Array<CustomFieldItems>>([]);\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const [enterEmail, setEnterEmail] = useState<string>('');\n\n  const [captchaKey, setCaptchaKey] = useState('');\n  const [isEnabledOnStorefront, setIsEnabledOnStorefront] = useState(false);\n  const [storefrontSiteKey, setStorefrontSiteKey] = useState('');\n\n  const [isCaptchaMissing, setIsCaptchaMissing] = useState(false);\n\n  const handleGetCaptchaKey = (key: string) => setCaptchaKey(key);\n\n  useEffect(() => {\n    const getIsEnabledOnStorefront = async () => {\n      try {\n        const response = await getStorefrontToken();\n\n        if (response) {\n          setIsEnabledOnStorefront(response.isEnabledOnStorefront);\n          setStorefrontSiteKey(response.siteKey);\n        }\n      } catch (e) {\n        b2bLogger.error(e);\n      }\n    };\n\n    getIsEnabledOnStorefront();\n  }, []);\n\n  useEffect(() => {\n    if (captchaKey) setIsCaptchaMissing(false);\n  }, [captchaKey]);\n\n  const {\n    control,\n    handleSubmit,\n    setError,\n    formState: { errors },\n  } = useForm({\n    mode: 'all',\n  });\n  const { state, dispatch } = useContext(RegisteredContext);\n\n  const {\n    state: { blockPendingAccountOrderCreation },\n  } = useContext(GlobalContext);\n\n  const {\n    state: {\n      portalStyle: { backgroundColor = '#FEF9F5' },\n    },\n  } = useContext(CustomStyleContext);\n\n  const customColor = getContrastColor(backgroundColor);\n\n  const {\n    contactInformation,\n    bcContactInformation,\n    passwordInformation = [],\n    bcPasswordInformation = [],\n    accountType,\n    additionalInformation,\n    bcAdditionalInformation,\n    addressBasicFields = [],\n    bcAddressBasicFields = [],\n    companyInformation = [],\n    emailMarketingNewsletter,\n  } = state;\n\n  const list: RegisterCompleteList =\n    accountType === '1' ? contactInformation : bcContactInformation;\n  const passwordInfo: RegisterCompleteList =\n    accountType === '1' ? passwordInformation : bcPasswordInformation;\n\n  const passwordName = passwordInfo[0]?.groupName || '';\n\n  const additionalInfo: RegisterCompleteList =\n    accountType === '1' ? additionalInformation : bcAdditionalInformation;\n\n  const addressBasicList = accountType === '1' ? addressBasicFields : bcAddressBasicFields;\n\n  useEffect(() => {\n    if (!accountType) return;\n    if (list && list.length) {\n      const emailFields: CustomFieldItems =\n        list.find((item: RegisterFields) => item.name === 'email') || {};\n\n      setEnterEmail(emailFields?.default || '');\n    }\n\n    setPersonalInfo(passwordInfo);\n  }, [contactInformation, bcContactInformation, accountType, list, passwordInfo]);\n\n  const getBCFieldsValue = (data: CustomFieldItems) => {\n    const bcFields: CustomFieldItems = {};\n\n    bcFields.authentication = {\n      force_password_reset: false,\n      new_password: data.password,\n    };\n\n    bcFields.accepts_product_review_abandoned_cart_emails = emailMarketingNewsletter;\n\n    if (list) {\n      list.forEach((item: any) => {\n        const name = deCodeField(item.name);\n        if (name === 'accepts_marketing_emails') {\n          bcFields.accepts_product_review_abandoned_cart_emails = !!item?.default?.length;\n        } else if (!item.custom) {\n          bcFields[name] = item?.default || '';\n        }\n      });\n\n      bcFields.form_fields = [];\n      if (additionalInfo && (additionalInfo as Array<CustomFieldItems>).length) {\n        additionalInfo.forEach((field: CustomFieldItems) => {\n          bcFields.form_fields.push({\n            name: field.bcLabel,\n            value: field.default,\n          });\n        });\n      }\n    }\n\n    bcFields.addresses = [];\n    bcFields.origin_channel_id = channelId;\n    bcFields.channel_ids = [channelId];\n\n    if (accountType === '2') {\n      const addresses: CustomFieldItems = {};\n\n      const getBCAddressField = addressBasicList.filter((field: any) => !field.custom);\n      const getBCExtraAddressField = addressBasicList.filter((field: any) => field.custom);\n\n      if (getBCAddressField) {\n        bcFields.addresses = {};\n        getBCAddressField.forEach((field: any) => {\n          if (field.name === 'country') {\n            addresses.country_code = field.default;\n          } else if (field.name === 'state') {\n            addresses.state_or_province = field.default;\n          } else if (field.name === 'postalCode') {\n            addresses.postal_code = field.default;\n          } else if (field.name === 'firstName') {\n            addresses.first_name = field.default;\n          } else if (field.name === 'lastName') {\n            addresses.last_name = field.default;\n          } else {\n            addresses[field.name] = field.default;\n          }\n        });\n      }\n\n      addresses.form_fields = [];\n      // BC Extra field\n      if (getBCExtraAddressField && getBCExtraAddressField.length) {\n        getBCExtraAddressField.forEach((field: any) => {\n          addresses.form_fields.push({\n            name: field.bcLabel,\n            value: field.default,\n          });\n        });\n      }\n\n      bcFields.addresses = [addresses];\n      bcFields.trigger_account_created_notification = true;\n    }\n\n    const userItem = {\n      storeHash,\n      ...bcFields,\n    };\n\n    return createBCCompanyUser(userItem, captchaKey);\n  };\n\n  const getB2BFieldsValue = async (\n    _: CustomFieldItems,\n    customerId: number | string,\n    fileList: any,\n  ) => {\n    try {\n      const b2bFields: CustomFieldItems = {};\n      b2bFields.customerId = customerId || '';\n      b2bFields.storeHash = storeHash;\n\n      // company user extra field\n      const b2bContactInformationList = list || [];\n      const companyUserExtraFieldsList = b2bContactInformationList.filter((item) => !!item.custom);\n\n      if (companyUserExtraFieldsList.length) {\n        const companyUserExtraFields: Array<CustomFieldItems> = [];\n        companyUserExtraFieldsList.forEach((item: CustomFieldItems) => {\n          const itemExtraField: CustomFieldItems = {};\n          itemExtraField.fieldName = deCodeField(item.name);\n          itemExtraField.fieldValue = item?.default || '';\n          companyUserExtraFields.push(itemExtraField);\n        });\n        b2bFields.userExtraFields = companyUserExtraFields;\n      }\n\n      const companyInfo = companyInformation.filter(\n        (list) => !list.custom && list.fieldType !== 'files',\n      );\n      const companyExtraInfo = companyInformation.filter((list) => !!list.custom);\n      // company field\n      if (companyInfo.length) {\n        companyInfo.forEach((item: any) => {\n          b2bFields[toHump(deCodeField(item.name))] = item?.default || '';\n        });\n      }\n\n      // Company Additional Field\n      if (companyExtraInfo.length) {\n        const extraFields: Array<CustomFieldItems> = [];\n        companyExtraInfo.forEach((item: CustomFieldItems) => {\n          const itemExtraField: CustomFieldItems = {};\n          itemExtraField.fieldName = deCodeField(item.name);\n          itemExtraField.fieldValue = item?.default || '';\n          extraFields.push(itemExtraField);\n        });\n        b2bFields.extraFields = extraFields;\n      }\n\n      // address Field\n      const addressBasicInfo = addressBasicList.filter((list) => !list.custom) || [];\n      const addressExtraBasicInfo = addressBasicList.filter((list) => !!list.custom) || [];\n\n      if (addressBasicInfo.length) {\n        addressBasicInfo.forEach((field: CustomFieldItems) => {\n          const name = deCodeField(field.name);\n          if (name === 'address1') {\n            b2bFields.addressLine1 = field.default;\n          }\n          if (name === 'address2') {\n            b2bFields.addressLine2 = field.default;\n          }\n          b2bFields[name] = field.default;\n        });\n      }\n\n      // address Additional Field\n      if (addressExtraBasicInfo.length) {\n        const extraFields: Array<CustomFieldItems> = [];\n        addressExtraBasicInfo.forEach((item: CustomFieldItems) => {\n          const itemExtraField: CustomFieldItems = {};\n          itemExtraField.fieldName = deCodeField(item.name);\n          itemExtraField.fieldValue = item?.default || '';\n          extraFields.push(itemExtraField);\n        });\n        b2bFields.addressExtraFields = extraFields;\n      }\n      b2bFields.fileList = fileList;\n      b2bFields.channelId = channelId;\n\n      return await createB2BCompanyUser(b2bFields);\n    } catch (error) {\n      b2bLogger.error(error);\n    }\n    return undefined;\n  };\n\n  const getFileUrl = async (attachmentsList: RegisterFields[]) => {\n    let attachments: File[] = [];\n\n    if (!attachmentsList.length) return undefined;\n\n    attachmentsList.forEach((field: any) => {\n      attachments = field.default;\n    });\n\n    try {\n      const fileResponse = await Promise.all(\n        attachments.map((file: File) =>\n          uploadB2BFile({\n            file,\n            type: 'companyAttachedFile',\n          }),\n        ),\n      );\n\n      const fileList = fileResponse.reduce((fileList: any, res: any) => {\n        let list = fileList;\n        if (res.code === 200) {\n          const newData = {\n            ...res.data,\n          };\n          newData.fileSize = newData.fileSize ? `${newData.fileSize}` : '';\n          list = [...fileList, newData];\n        } else {\n          throw (\n            res.data.errMsg || res.message || b3Lang('intl.global.fileUpload.fileUploadFailure')\n          );\n        }\n        return list;\n      }, []);\n\n      return fileList;\n    } catch (error) {\n      b2bLogger.error(error);\n      throw error;\n    }\n  };\n\n  const saveRegisterPassword = (data: CustomFieldItems) => {\n    const newPasswordInformation = passwordInformation.map((field: RegisterFields) => {\n      const registerField = field;\n      if (accountType === '1') {\n        registerField.default = data[field.name] || field.default;\n      }\n      return field;\n    });\n\n    const newBcPasswordInformation = bcPasswordInformation.map((field: RegisterFields) => {\n      const registerField = field;\n      if (accountType === '2') {\n        registerField.default = data[field.name] || field.default;\n      }\n\n      return field;\n    });\n\n    dispatch({\n      type: 'all',\n      payload: {\n        passwordInformation: newPasswordInformation,\n        bcPasswordInformation: newBcPasswordInformation,\n      },\n    });\n  };\n\n  const handleSendSubscribersState = async () => {\n    if (list && list.length > 0) {\n      const emailMe = list.find(\n        (item: CustomFieldItems) =>\n          item.fieldId === 'field_email_marketing_newsletter' && item.fieldType === 'checkbox',\n      );\n      const firstName: CustomFieldItems =\n        list.find((item: RegisterFields) => item.fieldId === 'field_first_name') || {};\n      const lastName: CustomFieldItems =\n        list.find((item: RegisterFields) => item.fieldId === 'field_last_name') || {};\n      const isChecked = emailMe?.isChecked || false;\n      const defaultValue = emailMe?.default || [];\n\n      if (isChecked && (defaultValue as Array<string>).length > 0) {\n        try {\n          await sendSubscribersState({\n            storeHash,\n            email: enterEmail,\n            first_name: firstName.default,\n            last_name: lastName.default,\n            channel_id: channelId || 1,\n          });\n        } catch (err: any) {\n          setErrorMessage(err?.message || err);\n        }\n      }\n    }\n  };\n\n  const handleCompleted = (event: MouseEvent) => {\n    handleSubmit(async ({ password, confirmPassword }: CustomFieldItems) => {\n      if (password !== confirmPassword) {\n        setError('confirmPassword', {\n          type: 'manual',\n          message: b3Lang('global.registerComplete.passwordMatchPrompt'),\n        });\n        setError('password', {\n          type: 'manual',\n          message: b3Lang('global.registerComplete.passwordMatchPrompt'),\n        });\n        return;\n      }\n\n      if (isEnabledOnStorefront && !captchaKey) {\n        setIsCaptchaMissing(true);\n        return;\n      }\n\n      if (!isCaptchaMissing) {\n        try {\n          dispatch({\n            type: 'loading',\n            payload: {\n              isLoading: true,\n            },\n          });\n\n          let isAuto = true;\n          if (accountType === '2') {\n            await getBCFieldsValue({ password, confirmPassword });\n          } else {\n            const attachmentsList = companyInformation.filter((list) => list.fieldType === 'files');\n            const fileList = await getFileUrl(attachmentsList || []);\n            const res = await getBCFieldsValue({ password, confirmPassword });\n            const {\n              customerCreate: { customer: data },\n            } = res;\n            const accountInfo = await getB2BFieldsValue(\n              { password, confirmPassword },\n              data.id,\n              fileList,\n            );\n\n            const companyStatus = accountInfo?.companyCreate?.company?.companyStatus || '';\n            isAuto = Number(companyStatus) === 1;\n          }\n          dispatch({\n            type: 'finishInfo',\n            payload: {\n              submitSuccess: true,\n              isAutoApproval: isAuto,\n              blockPendingAccountOrderCreation,\n            },\n          });\n          saveRegisterPassword({ password, confirmPassword });\n          await handleSendSubscribersState();\n          handleNext(password);\n        } catch (err: any) {\n          setErrorMessage(err?.message || err);\n        } finally {\n          dispatch({\n            type: 'loading',\n            payload: {\n              isLoading: false,\n            },\n          });\n        }\n      }\n    })(event);\n  };\n\n  return (\n    <Box\n      sx={{\n        pl: 1,\n        pr: 1,\n        mt: 2,\n        width: '100%',\n        '& h4': {\n          color: customColor,\n        },\n        '& input, & .MuiFormControl-root .MuiTextField-root': {\n          borderRadius: '4px',\n          borderBottomLeftRadius: '0',\n          borderBottomRightRadius: '0',\n        },\n      }}\n    >\n      {errorMessage && (\n        <Alert severity=\"error\">\n          <TipContent>{errorMessage}</TipContent>\n        </Alert>\n      )}\n      <Box>\n        <InformationFourLabels>{passwordName}</InformationFourLabels>\n        {personalInfo && (\n          <>\n            {enterEmail.length > 0 && (\n              <Box\n                sx={{\n                  fontSize: '16px',\n                  fontWeight: 400,\n                  color: '#000000',\n                  marginBottom: '10px',\n                  marginTop: '-12px',\n                  wordWrap: 'break-word',\n                }}\n              >\n                {`Create password for ${enterEmail}`}\n              </Box>\n            )}\n            <B3CustomForm formFields={personalInfo} errors={errors} control={control} />\n          </>\n        )}\n        {isCaptchaMissing ? (\n          <Typography\n            variant=\"body1\"\n            sx={{\n              color: 'red',\n              display: 'flex',\n              alignSelf: 'flex-start',\n              marginLeft: '8px',\n              marginTop: '2px',\n              fontSize: '13px',\n            }}\n          >\n            {b3Lang('login.loginText.missingCaptcha')}\n          </Typography>\n        ) : (\n          ''\n        )}\n        {isEnabledOnStorefront ? (\n          <Box\n            sx={{\n              display: 'flex',\n              justifyContent: 'center',\n              marginTop: '20px',\n            }}\n          >\n            <Captcha siteKey={storefrontSiteKey} size=\"normal\" handleGetKey={handleGetCaptchaKey} />\n          </Box>\n        ) : (\n          ''\n        )}\n      </Box>\n\n      <Box\n        sx={{\n          display: 'flex',\n          justifyContent: 'flex-end',\n          pt: 2,\n          gap: 1,\n        }}\n      >\n        <PrimaryButton onClick={handleBack}>{b3Lang('global.button.back')}</PrimaryButton>\n        <PrimaryButton onClick={handleCompleted}>{b3Lang('global.button.submit')}</PrimaryButton>\n      </Box>\n    </Box>\n  );\n}\n","import { ChangeEvent, MouseEvent, useContext, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Alert, Box, FormControl, FormControlLabel, Radio, RadioGroup } from '@mui/material';\n\nimport { B3CustomForm } from '@/components';\nimport { b3HexToRgb, getContrastColor } from '@/components/outSideComponents/utils/b3CustomStyles';\nimport { useB3Lang } from '@/lib/lang';\nimport { CustomStyleContext } from '@/shared/customStyleButton';\nimport {\n  checkUserBCEmail,\n  checkUserEmail,\n  validateBCCompanyUserExtraFields,\n} from '@/shared/service/b2b';\nimport { themeFrameSelector, useAppSelector } from '@/store';\nimport { channelId } from '@/utils';\nimport b2bLogger from '@/utils/b3Logger';\n\nimport { RegisteredContext } from './context/RegisteredContext';\nimport { Base64, emailError } from './config';\nimport { PrimaryButton } from './PrimaryButton';\nimport { InformationFourLabels, TipContent } from './styled';\nimport { RegisterFields } from './types';\n\ninterface RegisteredAccountProps {\n  handleNext: (email: string) => void;\n}\n\nexport default function RegisteredAccount({ handleNext }: RegisteredAccountProps) {\n  const { state, dispatch } = useContext(RegisteredContext);\n  const IframeDocument = useAppSelector(themeFrameSelector);\n\n  const {\n    state: {\n      accountLoginRegistration,\n      portalStyle: { backgroundColor = '#FEF9F5' },\n    },\n  } = useContext(CustomStyleContext);\n\n  const customColor = getContrastColor(backgroundColor);\n\n  const b3Lang = useB3Lang();\n\n  const [errorTips, setErrorTips] = useState<string>('');\n\n  const {\n    contactInformation,\n    accountType,\n    additionalInformation,\n    bcContactInformation,\n    bcAdditionalInformation,\n  } = state;\n\n  const {\n    control,\n    handleSubmit,\n    getValues,\n    formState: { errors },\n    setError,\n    setValue,\n  } = useForm({\n    mode: 'onSubmit',\n  });\n\n  const additionName = accountType === '1' ? 'additionalInformation' : 'bcAdditionalInformation';\n  const additionalInfo: any =\n    accountType === '1' ? additionalInformation || [] : bcAdditionalInformation || [];\n\n  const newContactInformation = contactInformation?.map((contactInfo: CustomFieldItems) => {\n    const info = contactInfo;\n    if (contactInfo.fieldId === 'field_email' && accountType === '1') {\n      info.isTip = true;\n      info.tipText = 'This email will be used to sign in to your account';\n    }\n\n    return contactInfo;\n  });\n\n  const contactInfo: any = accountType === '1' ? newContactInformation : bcContactInformation || [];\n  const contactName = accountType === '1' ? 'contactInformation' : 'bcContactInformationFields';\n\n  const contactInformationLabel = contactInfo.length ? contactInfo[0]?.groupName : '';\n\n  const additionalInformationLabel = additionalInfo.length ? additionalInfo[0]?.groupName : '';\n\n  const showLoading = (isShow = false) => {\n    dispatch({\n      type: 'loading',\n      payload: {\n        isLoading: isShow,\n      },\n    });\n  };\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    dispatch({\n      type: 'accountType',\n      payload: {\n        accountType: event.target.value,\n      },\n    });\n  };\n\n  const emailName =\n    contactInformation?.find((item: CustomFieldItems) => item.fieldId === 'field_email')?.name ||\n    'email';\n\n  const validateEmailValue = async (email: string) => {\n    const isRegisterAsB2BUser = accountType === '1';\n    try {\n      showLoading(true);\n      const {\n        isValid,\n        userType,\n        userInfo: { companyName = '' } = {},\n      } = isRegisterAsB2BUser\n        ? await checkUserEmail({ email, channelId })\n        : await checkUserBCEmail({ email, channelId });\n\n      if (!isValid) {\n        setErrorTips(\n          b3Lang(emailError[userType], {\n            companyName: companyName || '',\n            email,\n          }),\n        );\n        setError(emailName, {\n          type: 'custom',\n          message: '',\n        });\n\n        IframeDocument?.body.scrollIntoView(true);\n      } else {\n        setErrorTips('');\n      }\n\n      return isValid;\n    } catch (error) {\n      return false;\n    } finally {\n      showLoading(false);\n    }\n  };\n\n  const handleAccountToDetail = async (event: MouseEvent) => {\n    handleSubmit(async (data: CustomFieldItems) => {\n      if (!(await validateEmailValue(data[emailName]))) {\n        return;\n      }\n\n      const newContactInfo = contactInfo.map((item: RegisterFields) => {\n        const newContactItem = item;\n        newContactItem.default = data[item.name] || item.default;\n        if (item.fieldId === 'field_email_marketing_newsletter' && item.fieldType === 'checkbox') {\n          newContactItem.isChecked = data[item.name].length > 0;\n        }\n        return item;\n      });\n\n      try {\n        showLoading(true);\n        if (accountType === '1') {\n          const extraCompanyUserInformation = newContactInfo.filter(\n            (item: RegisterFields) => !!item.custom,\n          );\n          const extraFields = extraCompanyUserInformation.map((field: RegisterFields) => ({\n            fieldName: Base64.decode(field.name),\n            fieldValue: data[field.name] || field.default,\n          }));\n          if (extraFields.length > 0) {\n            const res = await validateBCCompanyUserExtraFields({\n              extraFields,\n            });\n\n            if (res.code !== 200) {\n              const message = res.data?.errMsg || res.message || '';\n\n              const messageArr = message.split(':');\n\n              if (messageArr.length >= 2) {\n                const field = extraCompanyUserInformation.find(\n                  (field: RegisterFields) => Base64.decode(field.name) === messageArr[0],\n                );\n                if (field) {\n                  setError(field.name, {\n                    type: 'manual',\n                    message: messageArr[1],\n                  });\n                  showLoading(false);\n                  return;\n                }\n              }\n              setErrorTips(message);\n              showLoading(false);\n              return;\n            }\n          }\n          setErrorTips('');\n        }\n      } catch (error) {\n        b2bLogger.error(error);\n      } finally {\n        showLoading(false);\n      }\n\n      let newAdditionalInformation: Array<RegisterFields> = [];\n      if (additionalInfo) {\n        newAdditionalInformation = (additionalInfo as Array<RegisterFields>).map(\n          (item: RegisterFields) => {\n            const additionalInfoItem = item;\n            additionalInfoItem.default = data[item.name] || item.default;\n            return item;\n          },\n        );\n      }\n\n      dispatch({\n        type: 'all',\n        payload: {\n          [additionName]: [...newAdditionalInformation],\n          [contactName]: [...newContactInfo],\n        },\n      });\n      handleNext(data[emailName]);\n    })(event);\n  };\n\n  return (\n    <Box\n      sx={{\n        pl: 1,\n        pr: 1,\n        mt: 2,\n        width: '100%',\n      }}\n    >\n      {errorTips && (\n        <Alert severity=\"error\">\n          <TipContent>{errorTips}</TipContent>\n        </Alert>\n      )}\n      <FormControl\n        sx={{\n          '& h4': {\n            color: customColor,\n          },\n        }}\n      >\n        <InformationFourLabels>\n          {b3Lang('register.registeredAccount.accountType')}\n        </InformationFourLabels>\n        <RadioGroup\n          aria-labelledby=\"demo-row-radio-buttons-group-label\"\n          name=\"row-radio-buttons-group\"\n          value={accountType}\n          onChange={handleChange}\n          sx={{\n            '& .MuiTypography-root.MuiTypography-body1.MuiFormControlLabel-label': {\n              color: b3HexToRgb(customColor, 0.87),\n            },\n            '& .MuiButtonBase-root.MuiRadio-root.MuiRadio-colorPrimary:not(.Mui-checked)': {\n              color: b3HexToRgb(customColor, 0.6),\n            },\n          }}\n        >\n          {accountLoginRegistration.b2b && (\n            <FormControlLabel\n              value=\"1\"\n              control={<Radio />}\n              label={b3Lang('register.registeredAccount.businessAccount')}\n            />\n          )}\n          {accountLoginRegistration.b2c && (\n            <FormControlLabel\n              value=\"2\"\n              control={<Radio />}\n              label={b3Lang('register.registeredAccount.personalAccount')}\n            />\n          )}\n        </RadioGroup>\n      </FormControl>\n      <Box\n        sx={{\n          '& h4': {\n            color: customColor,\n          },\n          '& input, & .MuiFormControl-root .MuiTextField-root, & .MuiTextField-root .MuiInputBase-multiline':\n            {\n              borderRadius: '4px',\n              borderBottomLeftRadius: '0',\n              borderBottomRightRadius: '0',\n            },\n          '& .MuiButtonBase-root.MuiCheckbox-root.MuiCheckbox-colorPrimary:not(.Mui-checked)': {\n            color: b3HexToRgb(customColor, 0.6),\n          },\n          '& .MuiTypography-root.MuiTypography-body1.MuiFormControlLabel-label': {\n            color: b3HexToRgb(customColor, 0.87),\n          },\n        }}\n      >\n        <InformationFourLabels>{contactInformationLabel}</InformationFourLabels>\n        <B3CustomForm\n          formFields={contactInfo}\n          errors={errors}\n          control={control}\n          getValues={getValues}\n          setValue={setValue}\n        />\n      </Box>\n      <Box />\n      {additionalInfo && additionalInfo.length ? (\n        <Box\n          sx={{\n            '& h4': {\n              color: customColor,\n            },\n            '& .MuiFormControlLabel-label, & .MuiFormControl-root .MuiFormLabel-root:not(.Mui-focused)':\n              {\n                color: b3HexToRgb(customColor, 0.87),\n              },\n            '& .MuiRadio-root:not(.Mui-checked)': {\n              color: b3HexToRgb(customColor, 0.6),\n            },\n          }}\n        >\n          <InformationFourLabels>{additionalInformationLabel}</InformationFourLabels>\n          <B3CustomForm\n            formFields={additionalInfo}\n            errors={errors}\n            control={control}\n            getValues={getValues}\n            setValue={setValue}\n          />\n        </Box>\n      ) : (\n        ''\n      )}\n\n      <Box\n        sx={{\n          display: 'flex',\n          justifyContent: 'flex-end',\n          pt: 2,\n        }}\n      >\n        <PrimaryButton onClick={handleAccountToDetail}>\n          {b3Lang('global.button.next')}\n        </PrimaryButton>\n      </Box>\n    </Box>\n  );\n}\n","import { MouseEvent, useCallback, useContext, useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Alert, Box } from '@mui/material';\nimport isEmpty from 'lodash-es/isEmpty';\n\nimport { B3CustomForm } from '@/components';\nimport { getContrastColor } from '@/components/outSideComponents/utils/b3CustomStyles';\nimport { useB3Lang } from '@/lib/lang';\nimport { CustomStyleContext } from '@/shared/customStyleButton';\n\nimport { RegisteredContext } from './context/RegisteredContext';\nimport { Country, State, validateExtraFields } from './config';\nimport { PrimaryButton } from './PrimaryButton';\nimport { InformationFourLabels, TipContent } from './styled';\nimport { RegisterFields } from './types';\n\ninterface RegisteredDetailProps {\n  handleBack: () => void;\n  handleNext: () => void;\n}\n\nexport default function RegisteredDetail({ handleBack, handleNext }: RegisteredDetailProps) {\n  const b3Lang = useB3Lang();\n\n  const { state, dispatch } = useContext(RegisteredContext);\n\n  const {\n    state: {\n      portalStyle: { backgroundColor = '#FEF9F5' },\n    },\n  } = useContext(CustomStyleContext);\n\n  const customColor = getContrastColor(backgroundColor);\n\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const {\n    accountType = '1',\n    companyInformation = [],\n    companyAttachment = [],\n    addressBasicFields = [],\n    bcAddressBasicFields = [],\n    countryList = [],\n  } = state;\n\n  const {\n    control,\n    handleSubmit,\n    getValues,\n    formState: { errors },\n    setValue,\n    watch,\n    setError,\n  } = useForm({\n    mode: 'all',\n  });\n  const businessDetailsName = accountType === '1' ? companyInformation[0]?.groupName : '';\n\n  const addressBasicName = accountType === '1' ? 'addressBasicFields' : 'bcAddressBasicFields';\n  const addressBasicList = accountType === '1' ? addressBasicFields : bcAddressBasicFields;\n\n  const addressName = addressBasicList[0]?.groupName || '';\n\n  const handleCountryChange = useCallback(\n    (countryCode: string, stateCode = '') => {\n      const stateList =\n        countryList.find(\n          (country: Country) =>\n            country.countryCode === countryCode || country.countryName === countryCode,\n        )?.states || [];\n      const stateFields = addressBasicList.find(\n        (formFields: RegisterFields) => formFields.name === 'state',\n      );\n\n      if (stateFields) {\n        if (stateList.length > 0) {\n          stateFields.fieldType = 'dropdown';\n          stateFields.options = stateList;\n          stateFields.required = true;\n        } else {\n          stateFields.fieldType = 'text';\n          stateFields.options = [];\n          stateFields.required = false;\n        }\n      }\n\n      setValue(\n        'state',\n        stateCode &&\n          countryCode &&\n          (stateList.find((state: State) => state.stateName === stateCode) ||\n            stateList.length === 0)\n          ? stateCode\n          : '',\n      );\n\n      dispatch({\n        type: 'stateList',\n        payload: {\n          stateList,\n          addressBasicFields,\n          bcAddressBasicFields,\n          [addressBasicName]: [...addressBasicList],\n        },\n      });\n    },\n    // disabling as we don't need dispatchers here\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [addressBasicFields, addressBasicList, addressBasicName, bcAddressBasicFields, countryList],\n  );\n\n  useEffect(() => {\n    const countryValue = getValues('country');\n    const stateValue = getValues('state');\n    handleCountryChange(countryValue, stateValue);\n    // disabling as we only need to run this once and values at starting render are good enough\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const subscription = watch((value, { name, type }) => {\n      const { country, state } = value;\n\n      if (name === 'country' && type === 'change') {\n        handleCountryChange(country, state);\n      }\n    });\n    return () => subscription.unsubscribe();\n    // disabling as we don't need watch in the dependency array\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [countryList, handleCountryChange]);\n\n  const showLoading = (isShow = false) => {\n    dispatch({\n      type: 'loading',\n      payload: {\n        isLoading: isShow,\n      },\n    });\n  };\n\n  const setRegisterFieldsValue = (formFields: Array<RegisterFields>, formData: CustomFieldItems) =>\n    formFields.map((field) => {\n      const item = field;\n      item.default = formData[field.name] || field.default;\n      return field;\n    });\n\n  interface DetailsFormValues {\n    [K: string]: string | number | boolean;\n  }\n\n  const saveDetailsData = () => {\n    const data = [...companyInformation, ...companyAttachment, ...addressBasicList].reduce(\n      (formValues: DetailsFormValues, field: RegisterFields) => {\n        const values = formValues;\n        values[field.name] = getValues(field.name) || field.default;\n\n        return formValues;\n      },\n      {},\n    );\n\n    const newCompanyInformation = setRegisterFieldsValue(companyInformation, data);\n    const newCompanyAttachment = setRegisterFieldsValue(companyAttachment, data);\n    const newAddressBasicFields = setRegisterFieldsValue(addressBasicList, data);\n\n    dispatch({\n      type: 'all',\n      payload: {\n        companyInformation: [...newCompanyInformation],\n        companyAttachment: [...newCompanyAttachment],\n        [addressBasicName]: [...newAddressBasicFields],\n      },\n    });\n  };\n\n  const handleValidateAttachmentFiles = () => {\n    if (accountType === '1') {\n      const formData = getValues();\n      const attachmentsFilesFiled = companyInformation.find(\n        (info) => info.fieldId === 'field_attachments',\n      );\n      if (\n        !isEmpty(attachmentsFilesFiled) &&\n        attachmentsFilesFiled.required &&\n        formData[attachmentsFilesFiled.name].length === 0\n      ) {\n        setError(attachmentsFilesFiled.name, {\n          type: 'required',\n          message: b3Lang('global.validate.required', {\n            label: attachmentsFilesFiled.label ?? '',\n          }),\n        });\n\n        showLoading(false);\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  const handleAccountToFinish = (event: MouseEvent) => {\n    const hasAttachmentsFilesError = handleValidateAttachmentFiles();\n\n    handleSubmit(async (data: CustomFieldItems) => {\n      if (hasAttachmentsFilesError) return;\n      showLoading(true);\n      try {\n        if (accountType === '1') {\n          await Promise.all([\n            validateExtraFields({\n              fields: companyInformation,\n              data,\n              type: 'company',\n              setError,\n            }),\n            validateExtraFields({\n              fields: addressBasicFields,\n              data,\n              type: 'address',\n              setError,\n            }),\n          ]);\n\n          setErrorMessage('');\n        }\n\n        saveDetailsData();\n\n        showLoading(false);\n        handleNext();\n      } catch (error) {\n        if (typeof error === 'string') {\n          setErrorMessage(error);\n        }\n        showLoading(false);\n      }\n    })(event);\n  };\n\n  const handleBackAccount = () => {\n    saveDetailsData();\n\n    handleBack();\n  };\n\n  return (\n    <Box\n      sx={{\n        pl: 1,\n        pr: 1,\n        mt: 2,\n        width: '100%',\n        '& h4': {\n          color: customColor,\n        },\n        '& input, & .MuiFormControl-root .MuiTextField-root, & .MuiDropzoneArea-textContainer, & .MuiSelect-select.MuiSelect-filled, & .MuiTextField-root .MuiInputBase-multiline':\n          {\n            borderRadius: '4px',\n            borderBottomLeftRadius: '0',\n            borderBottomRightRadius: '0',\n          },\n      }}\n    >\n      {errorMessage && (\n        <Alert severity=\"error\">\n          <TipContent>{errorMessage}</TipContent>\n        </Alert>\n      )}\n      {accountType === '1' ? (\n        <Box>\n          <InformationFourLabels>{businessDetailsName}</InformationFourLabels>\n          <B3CustomForm\n            formFields={[...companyInformation]}\n            errors={errors}\n            control={control}\n            getValues={getValues}\n            setValue={setValue}\n            setError={setError}\n          />\n        </Box>\n      ) : null}\n\n      <Box>\n        <InformationFourLabels>{addressName}</InformationFourLabels>\n\n        <B3CustomForm\n          formFields={addressBasicList}\n          errors={errors}\n          control={control}\n          getValues={getValues}\n          setValue={setValue}\n        />\n      </Box>\n\n      <Box\n        sx={{\n          display: 'flex',\n          justifyContent: 'flex-end',\n          pt: 2,\n          gap: 1,\n        }}\n      >\n        <PrimaryButton onClick={handleBackAccount}>{b3Lang('global.button.back')}</PrimaryButton>\n        <PrimaryButton onClick={handleAccountToFinish}>\n          {b3Lang('global.button.next')}\n        </PrimaryButton>\n      </Box>\n    </Box>\n  );\n}\n","import { ReactNode, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled from '@emotion/styled';\nimport { Box } from '@mui/material';\n\nimport { LoginConfig } from '../Login/config';\n\nimport RegisterComplete from './RegisterComplete';\nimport RegisteredAccount from './RegisteredAccount';\nimport RegisteredDetail from './RegisteredDetail';\nimport RegisteredFinish from './RegisteredFinish';\n\nconst StyledRegisterContent = styled(Box)({\n  '& #b3-customForm-id-name': {\n    '& label[data-shrink=\"true\"]': {\n      whiteSpace: 'break-spaces',\n      minWidth: 'calc(133% - 24px)',\n      transition: 'unset',\n    },\n\n    '& label[data-shrink=\"false\"]': {\n      whiteSpace: 'break-spaces',\n    },\n  },\n});\n\ninterface RegisterContentProps {\n  activeStep: number;\n  handleBack: () => void;\n  handleNext: () => void;\n  handleFinish: ({ email, password }: LoginConfig) => void;\n}\n\nexport default function RegisterContent({\n  activeStep,\n  handleBack,\n  handleNext,\n  handleFinish,\n}: RegisterContentProps) {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const navigate = useNavigate();\n\n  const handleFinishClick = (shouldAutoLogin: boolean) => {\n    if (shouldAutoLogin) {\n      handleFinish({ email, password });\n    } else {\n      navigate('/login');\n    }\n  };\n\n  const renderStep = (step: number): ReactNode => {\n    switch (step) {\n      case 0:\n        return (\n          <RegisteredAccount\n            handleNext={(email) => {\n              setEmail(email);\n              handleNext();\n            }}\n          />\n        );\n\n      case 1:\n        return <RegisteredDetail handleBack={handleBack} handleNext={handleNext} />;\n\n      case 2:\n        return (\n          <RegisterComplete\n            handleBack={handleBack}\n            handleNext={(password) => {\n              setPassword(password);\n              handleNext();\n            }}\n          />\n        );\n\n      case 3:\n        return <RegisteredFinish handleFinish={handleFinishClick} />;\n\n      default:\n        return null;\n    }\n  };\n\n  return <StyledRegisterContent component=\"div\">{renderStep(activeStep)}</StyledRegisterContent>;\n}\n","import { ReactNode, useContext, useMemo } from 'react';\nimport { Box, Step, StepLabel, Stepper, useTheme } from '@mui/material';\n\nimport { getContrastColor } from '@/components/outSideComponents/utils/b3CustomStyles';\nimport { useMobile } from '@/hooks';\nimport { useB3Lang } from '@/lib/lang';\n\nimport { RegisteredContext } from './context/RegisteredContext';\nimport { steps } from './config';\n\ninterface RegisteredStepProps {\n  children: ReactNode;\n  activeStep: number;\n  backgroundColor: string;\n}\n\nexport default function RegisteredStep(props: RegisteredStepProps) {\n  const { children, activeStep, backgroundColor } = props;\n\n  const b3Lang = useB3Lang();\n  const [isMobile] = useMobile();\n  const theme = useTheme();\n\n  const {\n    state: { accountType, submitSuccess },\n  } = useContext(RegisteredContext);\n\n  const pageTitle = useMemo(() => {\n    return submitSuccess\n      ? b3Lang(\n          accountType === '1' ? 'register.title.registerComplete' : 'register.title.accountCreated',\n        )\n      : b3Lang('register.title.accountRegister');\n  }, [submitSuccess, accountType, b3Lang]);\n\n  const customColor = getContrastColor(backgroundColor);\n  return (\n    <Box\n      component=\"div\"\n      sx={{\n        width: isMobile ? '100%' : '537px',\n        boxShadow:\n          '0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px rgba(0, 0, 0, 0.14), 0px 1px 3px rgba(0, 0, 0, 0.12)',\n        borderRadius: '4px',\n        marginTop: '1rem',\n        background: '#FFFFFF',\n        padding: '0 0.8rem 1rem 0.8rem',\n      }}\n    >\n      <Box\n        component=\"h3\"\n        sx={{\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'center',\n          pt: 2,\n          fontSize: '24px',\n          fontWeight: '400',\n          margin: '0.5rem 0',\n          color: customColor,\n        }}\n      >\n        {pageTitle}\n      </Box>\n      {!submitSuccess && (\n        <Stepper\n          activeStep={activeStep}\n          sx={{\n            '& .MuiSvgIcon-root:not(.Mui-active) .MuiStepIcon-text': {\n              fill: getContrastColor(customColor),\n            },\n            '& .MuiSvgIcon-root.Mui-active .MuiStepIcon-text': {\n              fill: getContrastColor(theme.palette.primary.main),\n            },\n          }}\n        >\n          {steps.map((label) => (\n            <Step key={label}>\n              <StepLabel>{b3Lang(label)}</StepLabel>\n            </Step>\n          ))}\n        </Stepper>\n      )}\n      {children}\n    </Box>\n  );\n}\n","import { useContext, useEffect, useState } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { Box, ImageListItem } from '@mui/material';\n\nimport b2bLogo from '@/assets/b2bLogo.png';\nimport { B3Card } from '@/components';\nimport B3Spin from '@/components/spin/B3Spin';\nimport { LOGIN_LANDING_LOCATIONS } from '@/constants';\nimport { useMobile, useScrollBar } from '@/hooks';\nimport { useB3Lang } from '@/lib/lang';\nimport { CustomStyleContext } from '@/shared/customStyleButton';\nimport { GlobalContext } from '@/shared/global';\nimport { getB2BAccountFormFields, getB2BCountries } from '@/shared/service/b2b';\nimport { bcLogin } from '@/shared/service/bc';\nimport { themeFrameSelector, useAppSelector } from '@/store';\nimport { B3SStorage, loginJump, platform } from '@/utils';\nimport b2bLogger from '@/utils/b3Logger';\nimport { getAssetUrl } from '@/utils/getAssetUrl';\nimport { getCurrentCustomerInfo } from '@/utils/loginInfo';\nimport { getTemPlateConfig } from '@/utils/storefrontConfig';\n\nimport { loginCheckout, LoginConfig } from '../Login/config';\nimport { type PageProps } from '../PageProps';\n\nimport { RegisteredContext } from './context/RegisteredContext';\nimport {\n  AccountFormFieldsItems,\n  b2bAddressRequiredFields,\n  companyAttachmentsFields,\n  getAccountFormFields,\n  RegisterFieldsItems,\n} from './config';\nimport RegisterContent from './RegisterContent';\nimport RegisteredStep from './RegisteredStep';\nimport { RegisteredContainer, RegisteredImage } from './styled';\n// 1 bc 2 b2b\nconst formType: Array<number> = [1, 2];\n\nfunction Registered(props: PageProps) {\n  const { setOpenPage } = props;\n\n  const [activeStep, setActiveStep] = useState(0);\n\n  const b3Lang = useB3Lang();\n  const [isMobile] = useMobile();\n\n  const navigate = useNavigate();\n\n  const IframeDocument = useAppSelector(themeFrameSelector);\n  const loginLandingLocation = useAppSelector(({ global }) => global.loginLandingLocation);\n  const [params] = useSearchParams();\n\n  const {\n    state: { isCheckout, isCloseGotoBCHome, logo, registerEnabled },\n    dispatch: globalDispatch,\n  } = useContext(GlobalContext);\n\n  const {\n    state: { isLoading },\n    dispatch,\n  } = useContext(RegisteredContext);\n\n  const {\n    state: {\n      accountLoginRegistration,\n      portalStyle: { backgroundColor = '#FEF9F5' },\n    },\n    dispatch: styleDispatch,\n  } = useContext(CustomStyleContext);\n\n  useEffect(() => {\n    if (!registerEnabled) {\n      navigate('/login');\n    }\n  }, [navigate, registerEnabled]);\n\n  useEffect(() => {\n    const getBCAdditionalFields = async () => {\n      try {\n        if (dispatch) {\n          dispatch({\n            type: 'loading',\n            payload: {\n              isLoading: true,\n            },\n          });\n          dispatch({\n            type: 'finishInfo',\n            payload: {\n              submitSuccess: false,\n            },\n          });\n        }\n\n        // update the storefront config in the context\n        getTemPlateConfig(styleDispatch, globalDispatch);\n\n        const accountFormAllFields = formType.map((item: number) => getB2BAccountFormFields(item));\n\n        const accountFormFields = await Promise.all(accountFormAllFields);\n\n        const newB2bAccountFormFields: AccountFormFieldsItems[] = (\n          accountFormFields[1]?.accountFormFields || []\n        ).map((fields: AccountFormFieldsItems) => {\n          const formFields = fields;\n          if (b2bAddressRequiredFields.includes(fields?.fieldId || '') && fields.groupId === 4) {\n            formFields.isRequired = true;\n            formFields.visible = true;\n          }\n\n          return fields;\n        });\n\n        const bcAccountFormFields = getAccountFormFields(\n          accountFormFields[0]?.accountFormFields || [],\n        );\n        const b2bAccountFormFields = getAccountFormFields(newB2bAccountFormFields || []);\n\n        const { countries } = await getB2BCountries();\n\n        const newAddressInformationFields =\n          b2bAccountFormFields.address?.map(\n            (addressFields: Partial<RegisterFieldsItems>): Partial<RegisterFieldsItems> => {\n              const fields = addressFields;\n              if (addressFields.name === 'country') {\n                fields.options = countries;\n                fields.replaceOptions = {\n                  label: 'countryName',\n                  value: 'countryName',\n                };\n              }\n              return addressFields;\n            },\n          ) || [];\n\n        const newBCAddressInformationFields =\n          bcAccountFormFields.address?.map(\n            (addressFields: Partial<RegisterFieldsItems>): Partial<RegisterFieldsItems> => {\n              const addressFormFields = addressFields;\n              if (addressFields.name === 'country') {\n                addressFormFields.options = countries;\n                const countryDefaultValue = countries.find(\n                  (country: CustomFieldItems) => country.countryName === addressFields.default,\n                );\n                addressFormFields.default =\n                  countryDefaultValue?.countryCode || addressFields.default;\n              }\n              return addressFields;\n            },\n          ) || [];\n        // accountLoginRegistration\n        const { b2b, b2c } = accountLoginRegistration;\n        const accountB2cEnabledInfo = b2c && !b2b;\n        if (dispatch) {\n          dispatch({\n            type: 'all',\n            payload: {\n              accountType: accountB2cEnabledInfo ? '2' : '1',\n              isLoading: false,\n              // account\n              contactInformation: [...(b2bAccountFormFields.contactInformation || [])],\n              bcContactInformation: [...(bcAccountFormFields.contactInformation || [])],\n              additionalInformation: [...(b2bAccountFormFields.additionalInformation || [])],\n              bcAdditionalInformation: [...(bcAccountFormFields.additionalInformation || [])],\n              // detail\n              companyExtraFields: [],\n              companyInformation: [...(b2bAccountFormFields?.businessDetails || [])],\n              companyAttachment: [...companyAttachmentsFields(b3Lang)],\n              addressBasicFields: [...newAddressInformationFields],\n              bcAddressBasicFields: [...newBCAddressInformationFields],\n              countryList: [...countries],\n              // password\n              passwordInformation: [...(b2bAccountFormFields.password || [])],\n              bcPasswordInformation: [...(bcAccountFormFields.password || [])],\n            },\n          });\n        }\n      } catch (e) {\n        b2bLogger.error(e);\n      }\n    };\n\n    getBCAdditionalFields();\n    // disabling as we only need to run this once and values at starting render are good enough\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleNext = async () => {\n    setActiveStep((prevActiveStep: number) => prevActiveStep + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep: number) => prevActiveStep - 1);\n  };\n\n  const clearRegisterInfo = () => {\n    if (dispatch) {\n      dispatch({\n        type: 'all',\n        payload: {\n          accountType: '',\n          isLoading: false,\n          submitSuccess: false,\n          contactInformation: [],\n          additionalInformation: [],\n          companyExtraFields: [],\n          companyInformation: [],\n          companyAttachment: [],\n          addressBasicFields: [],\n          addressExtraFields: [],\n          countryList: [],\n          passwordInformation: [],\n        },\n      });\n    }\n  };\n\n  const handleFinish = async ({ email, password }: LoginConfig) => {\n    dispatch({\n      type: 'loading',\n      payload: {\n        isLoading: true,\n      },\n    });\n\n    if (isCheckout) {\n      try {\n        await loginCheckout({ email, password });\n        window.location.reload();\n      } catch (error) {\n        b2bLogger.error(error);\n      }\n    } else {\n      try {\n        const customer = await bcLogin({ email, password }).then(\n          (res) => res?.data?.login?.customer,\n        );\n\n        if (customer) {\n          B3SStorage.set('loginCustomer', {\n            emailAddress: customer.email,\n            phoneNumber: customer.phone,\n            ...customer,\n          });\n        }\n\n        await getCurrentCustomerInfo();\n\n        clearRegisterInfo();\n\n        if (platform === 'catalyst') {\n          const landingLoginLocation =\n            params.get('redirectTo') === 'check-out'\n              ? LOGIN_LANDING_LOCATIONS.CHECKOUT\n              : loginLandingLocation;\n\n          window.b2b.callbacks.dispatchEvent('on-registered', {\n            email,\n            password,\n            landingLoginLocation,\n          });\n\n          window.location.hash = '';\n\n          return;\n        }\n\n        const isLoginLandLocation = loginJump(navigate);\n\n        if (!isLoginLandLocation) return;\n\n        if (isCloseGotoBCHome) {\n          window.location.href = '/';\n        } else {\n          navigate('/orders');\n        }\n      } catch (error) {\n        b2bLogger.error(error);\n      }\n    }\n\n    dispatch({\n      type: 'loading',\n      payload: {\n        isLoading: false,\n      },\n    });\n  };\n\n  useEffect(() => {\n    IframeDocument?.body.scrollIntoView(true);\n    // disabling as we only need to run this when activeStep changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [activeStep]);\n\n  useScrollBar(false);\n\n  return (\n    <B3Card setOpenPage={setOpenPage}>\n      <RegisteredContainer isMobile={isMobile}>\n        <B3Spin isSpinning={isLoading} tip={b3Lang('global.tips.loading')} transparency=\"0\">\n          <Box\n            sx={{\n              display: 'flex',\n              flexDirection: 'column',\n              width: '100%',\n              alignItems: 'center',\n            }}\n          >\n            <RegisteredImage>\n              <ImageListItem\n                sx={{\n                  maxWidth: '250px',\n                }}\n                onClick={() => {\n                  window.location.href = '/';\n                }}\n              >\n                <img\n                  src={logo || getAssetUrl(b2bLogo)}\n                  alt={b3Lang('global.tips.registerLogo')}\n                  loading=\"lazy\"\n                />\n              </ImageListItem>\n            </RegisteredImage>\n            <RegisteredStep activeStep={activeStep} backgroundColor={backgroundColor}>\n              <RegisterContent\n                activeStep={activeStep}\n                handleBack={handleBack}\n                handleNext={handleNext}\n                handleFinish={handleFinish}\n              />\n            </RegisteredStep>\n          </Box>\n        </B3Spin>\n      </RegisteredContainer>\n    </B3Card>\n  );\n}\n\nexport default Registered;\n"],"names":["RegisterComplete","props","b3Lang","useB3Lang","handleBack","handleNext","personalInfo","setPersonalInfo","useState","errorMessage","setErrorMessage","enterEmail","setEnterEmail","captchaKey","setCaptchaKey","isEnabledOnStorefront","setIsEnabledOnStorefront","storefrontSiteKey","setStorefrontSiteKey","isCaptchaMissing","setIsCaptchaMissing","handleGetCaptchaKey","key","useEffect","response","getStorefrontToken","e","b2bLogger","control","handleSubmit","setError","errors","useForm","state","dispatch","useContext","RegisteredContext","blockPendingAccountOrderCreation","GlobalContext","backgroundColor","CustomStyleContext","customColor","getContrastColor","contactInformation","bcContactInformation","passwordInformation","bcPasswordInformation","accountType","additionalInformation","bcAdditionalInformation","addressBasicFields","bcAddressBasicFields","companyInformation","emailMarketingNewsletter","list","passwordInfo","passwordName","_a","additionalInfo","addressBasicList","emailFields","item","getBCFieldsValue","data","bcFields","name","deCodeField","field","channelId","addresses","getBCAddressField","getBCExtraAddressField","userItem","storeHash","createBCCompanyUser","getB2BFieldsValue","_","customerId","fileList","b2bFields","companyUserExtraFieldsList","companyUserExtraFields","itemExtraField","companyInfo","companyExtraInfo","toHump","extraFields","addressBasicInfo","addressExtraBasicInfo","createB2BCompanyUser","error","getFileUrl","attachmentsList","attachments","file","uploadB2BFile","res","newData","saveRegisterPassword","newPasswordInformation","registerField","newBcPasswordInformation","handleSendSubscribersState","emailMe","firstName","lastName","isChecked","defaultValue","sendSubscribersState","err","handleCompleted","event","password","confirmPassword","isAuto","accountInfo","companyStatus","_b","jsxs","Box","Alert","jsx","TipContent","InformationFourLabels","Fragment","B3CustomForm","Typography","Captcha","PrimaryButton","RegisteredAccount","IframeDocument","useAppSelector","themeFrameSelector","accountLoginRegistration","errorTips","setErrorTips","getValues","setValue","additionName","newContactInformation","contactInfo","info","contactName","contactInformationLabel","additionalInformationLabel","showLoading","isShow","handleChange","emailName","_c","validateEmailValue","email","isRegisterAsB2BUser","isValid","userType","companyName","checkUserEmail","checkUserBCEmail","emailError","handleAccountToDetail","newContactInfo","newContactItem","extraCompanyUserInformation","Base64","validateBCCompanyUserExtraFields","message","messageArr","newAdditionalInformation","additionalInfoItem","FormControl","RadioGroup","b3HexToRgb","FormControlLabel","Radio","RegisteredDetail","companyAttachment","countryList","watch","businessDetailsName","addressBasicName","addressName","handleCountryChange","useCallback","countryCode","stateCode","stateList","country","stateFields","formFields","countryValue","stateValue","subscription","value","type","setRegisterFieldsValue","formData","saveDetailsData","formValues","values","newCompanyInformation","newCompanyAttachment","newAddressBasicFields","handleValidateAttachmentFiles","attachmentsFilesFiled","isEmpty","handleAccountToFinish","hasAttachmentsFilesError","validateExtraFields","handleBackAccount","StyledRegisterContent","styled","RegisterContent","activeStep","handleFinish","setEmail","setPassword","navigate","useNavigate","handleFinishClick","shouldAutoLogin","renderStep","step","RegisteredFinish","RegisteredStep","children","isMobile","useMobile","theme","useTheme","submitSuccess","pageTitle","useMemo","Stepper","steps","label","Step","StepLabel","formType","Registered","setOpenPage","setActiveStep","loginLandingLocation","global","params","useSearchParams","isCheckout","isCloseGotoBCHome","logo","registerEnabled","globalDispatch","isLoading","styleDispatch","getTemPlateConfig","accountFormAllFields","getB2BAccountFormFields","accountFormFields","newB2bAccountFormFields","fields","b2bAddressRequiredFields","bcAccountFormFields","getAccountFormFields","b2bAccountFormFields","countries","getB2BCountries","newAddressInformationFields","addressFields","newBCAddressInformationFields","_d","addressFormFields","countryDefaultValue","b2b","b2c","companyAttachmentsFields","prevActiveStep","clearRegisterInfo","loginCheckout","customer","bcLogin","B3SStorage","getCurrentCustomerInfo","platform","landingLoginLocation","LOGIN_LANDING_LOCATIONS","loginJump","useScrollBar","B3Card","RegisteredContainer","B3Spin","RegisteredImage","ImageListItem","getAssetUrl","b2bLogo"],"mappings":"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"}