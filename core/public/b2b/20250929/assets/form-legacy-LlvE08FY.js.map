{"version":3,"file":"form-legacy-LlvE08FY.js","sources":["../../../../node_modules/react-hook-form/dist/index.esm.mjs"],"sourcesContent":["import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\nvar isObject = (value) => !isNullOrUndefined(value) &&\n    !Array.isArray(value) &&\n    isObjectType(value) &&\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\n    ? isCheckBoxInput(event.target)\n        ? event.target.checked\n        : event.target.value\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar isPlainObject = (tempObject) => {\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\n};\n\nvar isWeb = typeof window !== 'undefined' &&\n    typeof window.HTMLElement !== 'undefined' &&\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\n    let copy;\n    const isArray = Array.isArray(data);\n    const isFileListInstance = typeof FileList !== 'undefined' ? data instanceof FileList : false;\n    if (data instanceof Date) {\n        copy = new Date(data);\n    }\n    else if (!(isWeb && (data instanceof Blob || isFileListInstance)) &&\n        (isArray || isObject(data))) {\n        copy = isArray ? [] : Object.create(Object.getPrototypeOf(data));\n        if (!isArray && !isPlainObject(data)) {\n            copy = data;\n        }\n        else {\n            for (const key in data) {\n                if (data.hasOwnProperty(key)) {\n                    copy[key] = cloneObject(data[key]);\n                }\n            }\n        }\n    }\n    else {\n        return data;\n    }\n    return copy;\n}\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar isUndefined = (val) => val === undefined;\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nvar get = (object, path, defaultValue) => {\n    if (!path || !isObject(object)) {\n        return defaultValue;\n    }\n    const result = (isKey(path) ? [path] : stringToPath(path)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], object);\n    return isUndefined(result) || result === object\n        ? isUndefined(object[path])\n            ? defaultValue\n            : object[path]\n        : result;\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar set = (object, path, value) => {\n    let index = -1;\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\n    const length = tempPath.length;\n    const lastIndex = length - 1;\n    while (++index < length) {\n        const key = tempPath[index];\n        let newValue = value;\n        if (index !== lastIndex) {\n            const objValue = object[key];\n            newValue =\n                isObject(objValue) || Array.isArray(objValue)\n                    ? objValue\n                    : !isNaN(+tempPath[index + 1])\n                        ? []\n                        : {};\n        }\n        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n            return;\n        }\n        object[key] = newValue;\n        object = object[key];\n    }\n};\n\nconst EVENTS = {\n    BLUR: 'blur',\n    FOCUS_OUT: 'focusout',\n    CHANGE: 'change',\n};\nconst VALIDATION_MODE = {\n    onBlur: 'onBlur',\n    onChange: 'onChange',\n    onSubmit: 'onSubmit',\n    onTouched: 'onTouched',\n    all: 'all',\n};\nconst INPUT_VALIDATION_RULES = {\n    max: 'max',\n    min: 'min',\n    maxLength: 'maxLength',\n    minLength: 'minLength',\n    pattern: 'pattern',\n    required: 'required',\n    validate: 'validate',\n};\n\nconst HookFormContext = React.createContext(null);\nHookFormContext.displayName = 'HookFormContext';\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst useFormContext = () => React.useContext(HookFormContext);\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst FormProvider = (props) => {\n    const { children, ...data } = props;\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\n    const result = {\n        defaultValues: control._defaultValues,\n    };\n    for (const key in formState) {\n        Object.defineProperty(result, key, {\n            get: () => {\n                const _key = key;\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n                }\n                localProxyFormState && (localProxyFormState[_key] = true);\n                return formState[_key];\n            },\n        });\n    }\n    return result;\n};\n\nconst useIsomorphicLayoutEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n\n/**\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\n *\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, control } = useForm({\n *     defaultValues: {\n *     firstName: \"firstName\"\n *   }});\n *   const { dirtyFields } = useFormState({\n *     control\n *   });\n *   const onSubmit = (data) => console.log(data);\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFormState(props) {\n    const methods = useFormContext();\n    const { control = methods.control, disabled, name, exact } = props || {};\n    const [formState, updateFormState] = React.useState(control._formState);\n    const _localProxyFormState = React.useRef({\n        isDirty: false,\n        isLoading: false,\n        dirtyFields: false,\n        touchedFields: false,\n        validatingFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    });\n    useIsomorphicLayoutEffect(() => control._subscribe({\n        name,\n        formState: _localProxyFormState.current,\n        exact,\n        callback: (formState) => {\n            !disabled &&\n                updateFormState({\n                    ...control._formState,\n                    ...formState,\n                });\n        },\n    }), [name, disabled, exact]);\n    React.useEffect(() => {\n        _localProxyFormState.current.isValid && control._setValid(true);\n    }, [control]);\n    return React.useMemo(() => getProxyFormState(formState, control, _localProxyFormState.current, false), [formState, control]);\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {\n    if (isString(names)) {\n        isGlobal && _names.watch.add(names);\n        return get(formValues, names, defaultValue);\n    }\n    if (Array.isArray(names)) {\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName),\n            get(formValues, fieldName)));\n    }\n    isGlobal && (_names.watchAll = true);\n    return formValues;\n};\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2, _internal_visited = new WeakSet()) {\n    if (isPrimitive(object1) || isPrimitive(object2)) {\n        return object1 === object2;\n    }\n    if (isDateObject(object1) && isDateObject(object2)) {\n        return object1.getTime() === object2.getTime();\n    }\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    if (_internal_visited.has(object1) || _internal_visited.has(object2)) {\n        return true;\n    }\n    _internal_visited.add(object1);\n    _internal_visited.add(object2);\n    for (const key of keys1) {\n        const val1 = object1[key];\n        if (!keys2.includes(key)) {\n            return false;\n        }\n        if (key !== 'ref') {\n            const val2 = object2[key];\n            if ((isDateObject(val1) && isDateObject(val2)) ||\n                (isObject(val1) && isObject(val2)) ||\n                (Array.isArray(val1) && Array.isArray(val2))\n                ? !deepEqual(val1, val2, _internal_visited)\n                : val1 !== val2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * const { control } = useForm();\n * const values = useWatch({\n *   name: \"fieldName\"\n *   control,\n * })\n * ```\n */\nfunction useWatch(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, defaultValue, disabled, exact, compute, } = props || {};\n    const _defaultValue = React.useRef(defaultValue);\n    const _compute = React.useRef(compute);\n    const _computeFormValues = React.useRef(undefined);\n    _compute.current = compute;\n    const defaultValueMemo = React.useMemo(() => control._getWatch(name, _defaultValue.current), [control, name]);\n    const [value, updateValue] = React.useState(_compute.current ? _compute.current(defaultValueMemo) : defaultValueMemo);\n    useIsomorphicLayoutEffect(() => control._subscribe({\n        name,\n        formState: {\n            values: true,\n        },\n        exact,\n        callback: (formState) => {\n            if (!disabled) {\n                const formValues = generateWatchOutput(name, control._names, formState.values || control._formValues, false, _defaultValue.current);\n                if (_compute.current) {\n                    const computedFormValues = _compute.current(formValues);\n                    if (!deepEqual(computedFormValues, _computeFormValues.current)) {\n                        updateValue(computedFormValues);\n                        _computeFormValues.current = computedFormValues;\n                    }\n                }\n                else {\n                    updateValue(formValues);\n                }\n            }\n        },\n    }), [control, disabled, name, exact]);\n    React.useEffect(() => control._removeUnmounted());\n    return value;\n}\n\n/**\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns field properties, field and form state. {@link UseControllerReturn}\n *\n * @example\n * ```tsx\n * function Input(props) {\n *   const { field, fieldState, formState } = useController(props);\n *   return (\n *     <div>\n *       <input {...field} placeholder={props.name} />\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *     </div>\n *   );\n * }\n * ```\n */\nfunction useController(props) {\n    const methods = useFormContext();\n    const { name, disabled, control = methods.control, shouldUnregister, defaultValue, } = props;\n    const isArrayField = isNameInFieldArray(control._names.array, name);\n    const defaultValueMemo = React.useMemo(() => get(control._formValues, name, get(control._defaultValues, name, defaultValue)), [control, name, defaultValue]);\n    const value = useWatch({\n        control,\n        name,\n        defaultValue: defaultValueMemo,\n        exact: true,\n    });\n    const formState = useFormState({\n        control,\n        name,\n        exact: true,\n    });\n    const _props = React.useRef(props);\n    const _registerProps = React.useRef(control.register(name, {\n        ...props.rules,\n        value,\n        ...(isBoolean(props.disabled) ? { disabled: props.disabled } : {}),\n    }));\n    _props.current = props;\n    const fieldState = React.useMemo(() => Object.defineProperties({}, {\n        invalid: {\n            enumerable: true,\n            get: () => !!get(formState.errors, name),\n        },\n        isDirty: {\n            enumerable: true,\n            get: () => !!get(formState.dirtyFields, name),\n        },\n        isTouched: {\n            enumerable: true,\n            get: () => !!get(formState.touchedFields, name),\n        },\n        isValidating: {\n            enumerable: true,\n            get: () => !!get(formState.validatingFields, name),\n        },\n        error: {\n            enumerable: true,\n            get: () => get(formState.errors, name),\n        },\n    }), [formState, name]);\n    const onChange = React.useCallback((event) => _registerProps.current.onChange({\n        target: {\n            value: getEventValue(event),\n            name: name,\n        },\n        type: EVENTS.CHANGE,\n    }), [name]);\n    const onBlur = React.useCallback(() => _registerProps.current.onBlur({\n        target: {\n            value: get(control._formValues, name),\n            name: name,\n        },\n        type: EVENTS.BLUR,\n    }), [name, control._formValues]);\n    const ref = React.useCallback((elm) => {\n        const field = get(control._fields, name);\n        if (field && elm) {\n            field._f.ref = {\n                focus: () => elm.focus && elm.focus(),\n                select: () => elm.select && elm.select(),\n                setCustomValidity: (message) => elm.setCustomValidity(message),\n                reportValidity: () => elm.reportValidity(),\n            };\n        }\n    }, [control._fields, name]);\n    const field = React.useMemo(() => ({\n        name,\n        value,\n        ...(isBoolean(disabled) || formState.disabled\n            ? { disabled: formState.disabled || disabled }\n            : {}),\n        onChange,\n        onBlur,\n        ref,\n    }), [name, disabled, formState.disabled, onChange, onBlur, ref, value]);\n    React.useEffect(() => {\n        const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n        control.register(name, {\n            ..._props.current.rules,\n            ...(isBoolean(_props.current.disabled)\n                ? { disabled: _props.current.disabled }\n                : {}),\n        });\n        const updateMounted = (name, value) => {\n            const field = get(control._fields, name);\n            if (field && field._f) {\n                field._f.mount = value;\n            }\n        };\n        updateMounted(name, true);\n        if (_shouldUnregisterField) {\n            const value = cloneObject(get(control._options.defaultValues, name));\n            set(control._defaultValues, name, value);\n            if (isUndefined(get(control._formValues, name))) {\n                set(control._formValues, name, value);\n            }\n        }\n        !isArrayField && control.register(name);\n        return () => {\n            (isArrayField\n                ? _shouldUnregisterField && !control._state.action\n                : _shouldUnregisterField)\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, isArrayField, shouldUnregister]);\n    React.useEffect(() => {\n        control._setDisabledField({\n            disabled,\n            name,\n        });\n    }, [disabled, name, control]);\n    return React.useMemo(() => ({\n        field,\n        formState,\n        fieldState,\n    }), [field, formState, fieldState]);\n}\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = (props) => props.render(useController(props));\n\nconst flatten = (obj) => {\n    const output = {};\n    for (const key of Object.keys(obj)) {\n        if (isObjectType(obj[key]) && obj[key] !== null) {\n            const nested = flatten(obj[key]);\n            for (const nestedKey of Object.keys(nested)) {\n                output[`${key}.${nestedKey}`] = nested[nestedKey];\n            }\n        }\n        else {\n            output[key] = obj[key];\n        }\n    }\n    return output;\n};\n\nconst POST_REQUEST = 'post';\n/**\n * Form component to manage submission.\n *\n * @param props - to setup submission detail. {@link FormProps}\n *\n * @returns form component or headless render prop.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control, formState: { errors } } = useForm();\n *\n *   return (\n *     <Form action=\"/api\" control={control}>\n *       <input {...register(\"name\")} />\n *       <p>{errors?.root?.server && 'Server error'}</p>\n *       <button>Submit</button>\n *     </Form>\n *   );\n * }\n * ```\n */\nfunction Form(props) {\n    const methods = useFormContext();\n    const [mounted, setMounted] = React.useState(false);\n    const { control = methods.control, onSubmit, children, action, method = POST_REQUEST, headers, encType, onError, render, onSuccess, validateStatus, ...rest } = props;\n    const submit = async (event) => {\n        let hasError = false;\n        let type = '';\n        await control.handleSubmit(async (data) => {\n            const formData = new FormData();\n            let formDataJson = '';\n            try {\n                formDataJson = JSON.stringify(data);\n            }\n            catch (_a) { }\n            const flattenFormValues = flatten(control._formValues);\n            for (const key in flattenFormValues) {\n                formData.append(key, flattenFormValues[key]);\n            }\n            if (onSubmit) {\n                await onSubmit({\n                    data,\n                    event,\n                    method,\n                    formData,\n                    formDataJson,\n                });\n            }\n            if (action) {\n                try {\n                    const shouldStringifySubmissionData = [\n                        headers && headers['Content-Type'],\n                        encType,\n                    ].some((value) => value && value.includes('json'));\n                    const response = await fetch(String(action), {\n                        method,\n                        headers: {\n                            ...headers,\n                            ...(encType && encType !== 'multipart/form-data'\n                                ? { 'Content-Type': encType }\n                                : {}),\n                        },\n                        body: shouldStringifySubmissionData ? formDataJson : formData,\n                    });\n                    if (response &&\n                        (validateStatus\n                            ? !validateStatus(response.status)\n                            : response.status < 200 || response.status >= 300)) {\n                        hasError = true;\n                        onError && onError({ response });\n                        type = String(response.status);\n                    }\n                    else {\n                        onSuccess && onSuccess({ response });\n                    }\n                }\n                catch (error) {\n                    hasError = true;\n                    onError && onError({ error });\n                }\n            }\n        })(event);\n        if (hasError && props.control) {\n            props.control._subjects.state.next({\n                isSubmitSuccessful: false,\n            });\n            props.control.setError('root.server', {\n                type,\n            });\n        }\n    };\n    React.useEffect(() => {\n        setMounted(true);\n    }, []);\n    return render ? (React.createElement(React.Fragment, null, render({\n        submit,\n    }))) : (React.createElement(\"form\", { noValidate: mounted, action: action, method: method, encType: encType, onSubmit: submit, ...rest }, children));\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\n            [type]: message || true,\n        },\n    }\n    : {};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar createSubject = () => {\n    let _observers = [];\n    const next = (value) => {\n        for (const observer of _observers) {\n            observer.next && observer.next(value);\n        }\n    };\n    const subscribe = (observer) => {\n        _observers.push(observer);\n        return {\n            unsubscribe: () => {\n                _observers = _observers.filter((o) => o !== observer);\n            },\n        };\n    };\n    const unsubscribe = () => {\n        _observers = [];\n    };\n    return {\n        get observers() {\n            return _observers;\n        },\n        next,\n        subscribe,\n        unsubscribe,\n    };\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isHTMLElement = (value) => {\n    if (!isWeb) {\n        return false;\n    }\n    const owner = value ? value.ownerDocument : 0;\n    return (value instanceof\n        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));\n};\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nfunction baseGet(object, updatePath) {\n    const length = updatePath.slice(0, -1).length;\n    let index = 0;\n    while (index < length) {\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\n    }\n    return object;\n}\nfunction isEmptyArray(obj) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction unset(object, path) {\n    const paths = Array.isArray(path)\n        ? path\n        : isKey(path)\n            ? [path]\n            : stringToPath(path);\n    const childObject = paths.length === 1 ? object : baseGet(object, paths);\n    const index = paths.length - 1;\n    const key = paths[index];\n    if (childObject) {\n        delete childObject[key];\n    }\n    if (index !== 0 &&\n        ((isObject(childObject) && isEmptyObject(childObject)) ||\n            (Array.isArray(childObject) && isEmptyArray(childObject)))) {\n        unset(object, paths.slice(0, -1));\n    }\n    return object;\n}\n\nvar objectHasFunction = (data) => {\n    for (const key in data) {\n        if (isFunction(data[key])) {\n            return true;\n        }\n    }\n    return false;\n};\n\nfunction markFieldsDirty(data, fields = {}) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                fields[key] = Array.isArray(data[key]) ? [] : {};\n                markFieldsDirty(data[key], fields[key]);\n            }\n            else if (!isNullOrUndefined(data[key])) {\n                fields[key] = true;\n            }\n        }\n    }\n    return fields;\n}\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                if (isUndefined(formValues) ||\n                    isPrimitive(dirtyFieldsFromValues[key])) {\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\n                        ? markFieldsDirty(data[key], [])\n                        : { ...markFieldsDirty(data[key]) };\n                }\n                else {\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n                }\n            }\n            else {\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n            }\n        }\n    }\n    return dirtyFieldsFromValues;\n}\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nconst defaultResult = {\n    value: false,\n    isValid: false,\n};\nconst validResult = { value: true, isValid: true };\nvar getCheckboxValue = (options) => {\n    if (Array.isArray(options)) {\n        if (options.length > 1) {\n            const values = options\n                .filter((option) => option && option.checked && !option.disabled)\n                .map((option) => option.value);\n            return { value: values, isValid: !!values.length };\n        }\n        return options[0].checked && !options[0].disabled\n            ? // @ts-expect-error expected to work in the browser\n                options[0].attributes && !isUndefined(options[0].attributes.value)\n                    ? isUndefined(options[0].value) || options[0].value === ''\n                        ? validResult\n                        : { value: options[0].value, isValid: true }\n                    : validResult\n            : defaultResult;\n    }\n    return defaultResult;\n};\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\n    ? value\n    : valueAsNumber\n        ? value === ''\n            ? NaN\n            : value\n                ? +value\n                : value\n        : valueAsDate && isString(value)\n            ? new Date(value)\n            : setValueAs\n                ? setValueAs(value)\n                : value;\n\nconst defaultReturn = {\n    isValid: false,\n    value: null,\n};\nvar getRadioValue = (options) => Array.isArray(options)\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\n        ? {\n            isValid: true,\n            value: option.value,\n        }\n        : previous, defaultReturn)\n    : defaultReturn;\n\nfunction getFieldValue(_f) {\n    const ref = _f.ref;\n    if (isFileInput(ref)) {\n        return ref.files;\n    }\n    if (isRadioInput(ref)) {\n        return getRadioValue(_f.refs).value;\n    }\n    if (isMultipleSelect(ref)) {\n        return [...ref.selectedOptions].map(({ value }) => value);\n    }\n    if (isCheckBoxInput(ref)) {\n        return getCheckboxValue(_f.refs).value;\n    }\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n    const fields = {};\n    for (const name of fieldsNames) {\n        const field = get(_fields, name);\n        field && set(fields, name, field._f);\n    }\n    return {\n        criteriaMode,\n        names: [...fieldsNames],\n        fields,\n        shouldUseNativeValidation,\n    };\n};\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getRuleValue = (rule) => isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n        ? rule.source\n        : isObject(rule)\n            ? isRegex(rule.value)\n                ? rule.value.source\n                : rule.value\n            : rule;\n\nvar getValidationModes = (mode) => ({\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n\nconst ASYNC_FUNCTION = 'AsyncFunction';\nvar hasPromiseValidation = (fieldReference) => !!fieldReference &&\n    !!fieldReference.validate &&\n    !!((isFunction(fieldReference.validate) &&\n        fieldReference.validate.constructor.name === ASYNC_FUNCTION) ||\n        (isObject(fieldReference.validate) &&\n            Object.values(fieldReference.validate).find((validateFunction) => validateFunction.constructor.name === ASYNC_FUNCTION)));\n\nvar hasValidation = (options) => options.mount &&\n    (options.required ||\n        options.min ||\n        options.max ||\n        options.maxLength ||\n        options.minLength ||\n        options.pattern ||\n        options.validate);\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\n    (_names.watchAll ||\n        _names.watch.has(name) ||\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nconst iterateFieldsByAction = (fields, action, fieldsNames, abortEarly) => {\n    for (const key of fieldsNames || Object.keys(fields)) {\n        const field = get(fields, key);\n        if (field) {\n            const { _f, ...currentField } = field;\n            if (_f) {\n                if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {\n                    return true;\n                }\n                else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {\n                    return true;\n                }\n                else {\n                    if (iterateFieldsByAction(currentField, action)) {\n                        break;\n                    }\n                }\n            }\n            else if (isObject(currentField)) {\n                if (iterateFieldsByAction(currentField, action)) {\n                    break;\n                }\n            }\n        }\n    }\n    return;\n};\n\nfunction schemaErrorLookup(errors, _fields, name) {\n    const error = get(errors, name);\n    if (error || isKey(name)) {\n        return {\n            error,\n            name,\n        };\n    }\n    const names = name.split('.');\n    while (names.length) {\n        const fieldName = names.join('.');\n        const field = get(_fields, fieldName);\n        const foundError = get(errors, fieldName);\n        if (field && !Array.isArray(field) && name !== fieldName) {\n            return { name };\n        }\n        if (foundError && foundError.type) {\n            return {\n                name: fieldName,\n                error: foundError,\n            };\n        }\n        if (foundError && foundError.root && foundError.root.type) {\n            return {\n                name: `${fieldName}.root`,\n                error: foundError.root,\n            };\n        }\n        names.pop();\n    }\n    return {\n        name,\n    };\n}\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {\n    updateFormState(formStateData);\n    const { name, ...formState } = formStateData;\n    return (isEmptyObject(formState) ||\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\n            (!isRoot || VALIDATION_MODE.all)));\n};\n\nvar shouldSubscribeByName = (name, signalName, exact) => !name ||\n    !signalName ||\n    name === signalName ||\n    convertToArrayPayload(name).some((currentName) => currentName &&\n        (exact\n            ? currentName === signalName\n            : currentName.startsWith(signalName) ||\n                signalName.startsWith(currentName)));\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n    if (mode.isOnAll) {\n        return false;\n    }\n    else if (!isSubmitted && mode.isOnTouch) {\n        return !(isTouched || isBlurEvent);\n    }\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n        return !isBlurEvent;\n    }\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n        return isBlurEvent;\n    }\n    return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nvar updateFieldArrayRootError = (errors, error, name) => {\n    const fieldArrayErrors = convertToArrayPayload(get(errors, name));\n    set(fieldArrayErrors, 'root', error[name]);\n    set(errors, name, fieldArrayErrors);\n    return errors;\n};\n\nvar isMessage = (value) => isString(value);\n\nfunction getValidateError(result, ref, type = 'validate') {\n    if (isMessage(result) ||\n        (Array.isArray(result) && result.every(isMessage)) ||\n        (isBoolean(result) && !result)) {\n        return {\n            type,\n            message: isMessage(result) ? result : '',\n            ref,\n        };\n    }\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n    };\n\nvar validateField = async (field, disabledFieldNames, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, } = field._f;\n    const inputValue = get(formValues, name);\n    if (!mount || disabledFieldNames.has(name)) {\n        return {};\n    }\n    const inputRef = refs ? refs[0] : ref;\n    const setCustomValidity = (message) => {\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n            inputRef.reportValidity();\n        }\n    };\n    const error = {};\n    const isRadio = isRadioInput(ref);\n    const isCheckBox = isCheckBoxInput(ref);\n    const isRadioOrCheckbox = isRadio || isCheckBox;\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&\n        isUndefined(ref.value) &&\n        isUndefined(inputValue)) ||\n        (isHTMLElement(ref) && ref.value === '') ||\n        inputValue === '' ||\n        (Array.isArray(inputValue) && !inputValue.length);\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\n        error[name] = {\n            type: exceedMax ? maxType : minType,\n            message,\n            ref,\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n        };\n    };\n    if (isFieldArray\n        ? !Array.isArray(inputValue) || !inputValue.length\n        : required &&\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n                (isBoolean(inputValue) && !inputValue) ||\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\n                (isRadio && !getRadioValue(refs).isValid))) {\n        const { value, message } = isMessage(required)\n            ? { value: !!required, message: required }\n            : getValueAndMessage(required);\n        if (value) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.required,\n                message,\n                ref: inputRef,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n        let exceedMax;\n        let exceedMin;\n        const maxOutput = getValueAndMessage(max);\n        const minOutput = getValueAndMessage(min);\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\n            const valueNumber = ref.valueAsNumber ||\n                (inputValue ? +inputValue : inputValue);\n            if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n            }\n            if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n            }\n        }\n        else {\n            const valueDate = ref.valueAsDate || new Date(inputValue);\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\n            const isTime = ref.type == 'time';\n            const isWeek = ref.type == 'week';\n            if (isString(maxOutput.value) && inputValue) {\n                exceedMax = isTime\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n                    : isWeek\n                        ? inputValue > maxOutput.value\n                        : valueDate > new Date(maxOutput.value);\n            }\n            if (isString(minOutput.value) && inputValue) {\n                exceedMin = isTime\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n                    : isWeek\n                        ? inputValue < minOutput.value\n                        : valueDate < new Date(minOutput.value);\n            }\n        }\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if ((maxLength || minLength) &&\n        !isEmpty &&\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\n        const maxLengthOutput = getValueAndMessage(maxLength);\n        const minLengthOutput = getValueAndMessage(minLength);\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\n            inputValue.length > +maxLengthOutput.value;\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\n            inputValue.length < +minLengthOutput.value;\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if (pattern && !isEmpty && isString(inputValue)) {\n        const { value: patternValue, message } = getValueAndMessage(pattern);\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.pattern,\n                message,\n                ref,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (validate) {\n        if (isFunction(validate)) {\n            const result = await validate(inputValue, formValues);\n            const validateError = getValidateError(result, inputRef);\n            if (validateError) {\n                error[name] = {\n                    ...validateError,\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\n                };\n                if (!validateAllFieldCriteria) {\n                    setCustomValidity(validateError.message);\n                    return error;\n                }\n            }\n        }\n        else if (isObject(validate)) {\n            let validationResult = {};\n            for (const key in validate) {\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n                    break;\n                }\n                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);\n                if (validateError) {\n                    validationResult = {\n                        ...validateError,\n                        ...appendErrorsCurry(key, validateError.message),\n                    };\n                    setCustomValidity(validateError.message);\n                    if (validateAllFieldCriteria) {\n                        error[name] = validationResult;\n                    }\n                }\n            }\n            if (!isEmptyObject(validationResult)) {\n                error[name] = {\n                    ref: inputRef,\n                    ...validationResult,\n                };\n                if (!validateAllFieldCriteria) {\n                    return error;\n                }\n            }\n        }\n    }\n    setCustomValidity(true);\n    return error;\n};\n\nconst defaultOptions = {\n    mode: VALIDATION_MODE.onSubmit,\n    reValidateMode: VALIDATION_MODE.onChange,\n    shouldFocusError: true,\n};\nfunction createFormControl(props = {}) {\n    let _options = {\n        ...defaultOptions,\n        ...props,\n    };\n    let _formState = {\n        submitCount: 0,\n        isDirty: false,\n        isReady: false,\n        isLoading: isFunction(_options.defaultValues),\n        isValidating: false,\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        touchedFields: {},\n        dirtyFields: {},\n        validatingFields: {},\n        errors: _options.errors || {},\n        disabled: _options.disabled || false,\n    };\n    let _fields = {};\n    let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values)\n        ? cloneObject(_options.defaultValues || _options.values) || {}\n        : {};\n    let _formValues = _options.shouldUnregister\n        ? {}\n        : cloneObject(_defaultValues);\n    let _state = {\n        action: false,\n        mount: false,\n        watch: false,\n    };\n    let _names = {\n        mount: new Set(),\n        disabled: new Set(),\n        unMount: new Set(),\n        array: new Set(),\n        watch: new Set(),\n    };\n    let delayErrorCallback;\n    let timer = 0;\n    const _proxyFormState = {\n        isDirty: false,\n        dirtyFields: false,\n        validatingFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    };\n    let _proxySubscribeFormState = {\n        ..._proxyFormState,\n    };\n    const _subjects = {\n        array: createSubject(),\n        state: createSubject(),\n    };\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n    const debounce = (callback) => (wait) => {\n        clearTimeout(timer);\n        timer = setTimeout(callback, wait);\n    };\n    const _setValid = async (shouldUpdateValid) => {\n        if (!_options.disabled &&\n            (_proxyFormState.isValid ||\n                _proxySubscribeFormState.isValid ||\n                shouldUpdateValid)) {\n            const isValid = _options.resolver\n                ? isEmptyObject((await _runSchema()).errors)\n                : await executeBuiltInValidation(_fields, true);\n            if (isValid !== _formState.isValid) {\n                _subjects.state.next({\n                    isValid,\n                });\n            }\n        }\n    };\n    const _updateIsValidating = (names, isValidating) => {\n        if (!_options.disabled &&\n            (_proxyFormState.isValidating ||\n                _proxyFormState.validatingFields ||\n                _proxySubscribeFormState.isValidating ||\n                _proxySubscribeFormState.validatingFields)) {\n            (names || Array.from(_names.mount)).forEach((name) => {\n                if (name) {\n                    isValidating\n                        ? set(_formState.validatingFields, name, isValidating)\n                        : unset(_formState.validatingFields, name);\n                }\n            });\n            _subjects.state.next({\n                validatingFields: _formState.validatingFields,\n                isValidating: !isEmptyObject(_formState.validatingFields),\n            });\n        }\n    };\n    const _setFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\n        if (args && method && !_options.disabled) {\n            _state.action = true;\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\n                shouldSetValues && set(_fields, name, fieldValues);\n            }\n            if (shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.errors, name))) {\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.errors, name, errors);\n                unsetEmptyArray(_formState.errors, name);\n            }\n            if ((_proxyFormState.touchedFields ||\n                _proxySubscribeFormState.touchedFields) &&\n                shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.touchedFields, name))) {\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n            }\n            if (_proxyFormState.dirtyFields || _proxySubscribeFormState.dirtyFields) {\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n            }\n            _subjects.state.next({\n                name,\n                isDirty: _getDirty(name, values),\n                dirtyFields: _formState.dirtyFields,\n                errors: _formState.errors,\n                isValid: _formState.isValid,\n            });\n        }\n        else {\n            set(_formValues, name, values);\n        }\n    };\n    const updateErrors = (name, error) => {\n        set(_formState.errors, name, error);\n        _subjects.state.next({\n            errors: _formState.errors,\n        });\n    };\n    const _setErrors = (errors) => {\n        _formState.errors = errors;\n        _subjects.state.next({\n            errors: _formState.errors,\n            isValid: false,\n        });\n    };\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\n        const field = get(_fields, name);\n        if (field) {\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\n            isUndefined(defaultValue) ||\n                (ref && ref.defaultChecked) ||\n                shouldSkipSetValueAs\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\n                : setFieldValue(name, defaultValue);\n            _state.mount && _setValid();\n        }\n    };\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\n        let shouldUpdateField = false;\n        let isPreviousDirty = false;\n        const output = {\n            name,\n        };\n        if (!_options.disabled) {\n            if (!isBlurEvent || shouldDirty) {\n                if (_proxyFormState.isDirty || _proxySubscribeFormState.isDirty) {\n                    isPreviousDirty = _formState.isDirty;\n                    _formState.isDirty = output.isDirty = _getDirty();\n                    shouldUpdateField = isPreviousDirty !== output.isDirty;\n                }\n                const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\n                isPreviousDirty = !!get(_formState.dirtyFields, name);\n                isCurrentFieldPristine\n                    ? unset(_formState.dirtyFields, name)\n                    : set(_formState.dirtyFields, name, true);\n                output.dirtyFields = _formState.dirtyFields;\n                shouldUpdateField =\n                    shouldUpdateField ||\n                        ((_proxyFormState.dirtyFields ||\n                            _proxySubscribeFormState.dirtyFields) &&\n                            isPreviousDirty !== !isCurrentFieldPristine);\n            }\n            if (isBlurEvent) {\n                const isPreviousFieldTouched = get(_formState.touchedFields, name);\n                if (!isPreviousFieldTouched) {\n                    set(_formState.touchedFields, name, isBlurEvent);\n                    output.touchedFields = _formState.touchedFields;\n                    shouldUpdateField =\n                        shouldUpdateField ||\n                            ((_proxyFormState.touchedFields ||\n                                _proxySubscribeFormState.touchedFields) &&\n                                isPreviousFieldTouched !== isBlurEvent);\n                }\n            }\n            shouldUpdateField && shouldRender && _subjects.state.next(output);\n        }\n        return shouldUpdateField ? output : {};\n    };\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\n        const previousFieldError = get(_formState.errors, name);\n        const shouldUpdateValid = (_proxyFormState.isValid || _proxySubscribeFormState.isValid) &&\n            isBoolean(isValid) &&\n            _formState.isValid !== isValid;\n        if (_options.delayError && error) {\n            delayErrorCallback = debounce(() => updateErrors(name, error));\n            delayErrorCallback(_options.delayError);\n        }\n        else {\n            clearTimeout(timer);\n            delayErrorCallback = null;\n            error\n                ? set(_formState.errors, name, error)\n                : unset(_formState.errors, name);\n        }\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n            !isEmptyObject(fieldState) ||\n            shouldUpdateValid) {\n            const updatedFormState = {\n                ...fieldState,\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n                errors: _formState.errors,\n                name,\n            };\n            _formState = {\n                ..._formState,\n                ...updatedFormState,\n            };\n            _subjects.state.next(updatedFormState);\n        }\n    };\n    const _runSchema = async (name) => {\n        _updateIsValidating(name, true);\n        const result = await _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\n        _updateIsValidating(name);\n        return result;\n    };\n    const executeSchemaAndUpdateState = async (names) => {\n        const { errors } = await _runSchema(names);\n        if (names) {\n            for (const name of names) {\n                const error = get(errors, name);\n                error\n                    ? set(_formState.errors, name, error)\n                    : unset(_formState.errors, name);\n            }\n        }\n        else {\n            _formState.errors = errors;\n        }\n        return errors;\n    };\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\n        valid: true,\n    }) => {\n        for (const name in fields) {\n            const field = fields[name];\n            if (field) {\n                const { _f, ...fieldValue } = field;\n                if (_f) {\n                    const isFieldArrayRoot = _names.array.has(_f.name);\n                    const isPromiseFunction = field._f && hasPromiseValidation(field._f);\n                    if (isPromiseFunction && _proxyFormState.validatingFields) {\n                        _updateIsValidating([name], true);\n                    }\n                    const fieldError = await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);\n                    if (isPromiseFunction && _proxyFormState.validatingFields) {\n                        _updateIsValidating([name]);\n                    }\n                    if (fieldError[_f.name]) {\n                        context.valid = false;\n                        if (shouldOnlyCheckValid) {\n                            break;\n                        }\n                    }\n                    !shouldOnlyCheckValid &&\n                        (get(fieldError, _f.name)\n                            ? isFieldArrayRoot\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\n                            : unset(_formState.errors, _f.name));\n                }\n                !isEmptyObject(fieldValue) &&\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\n            }\n        }\n        return context.valid;\n    };\n    const _removeUnmounted = () => {\n        for (const name of _names.unMount) {\n            const field = get(_fields, name);\n            field &&\n                (field._f.refs\n                    ? field._f.refs.every((ref) => !live(ref))\n                    : !live(field._f.ref)) &&\n                unregister(name);\n        }\n        _names.unMount = new Set();\n    };\n    const _getDirty = (name, data) => !_options.disabled &&\n        (name && data && set(_formValues, name, data),\n            !deepEqual(getValues(), _defaultValues));\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\n        ...(_state.mount\n            ? _formValues\n            : isUndefined(defaultValue)\n                ? _defaultValues\n                : isString(names)\n                    ? { [names]: defaultValue }\n                    : defaultValue),\n    }, isGlobal, defaultValue);\n    const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, _options.shouldUnregister ? get(_defaultValues, name, []) : []));\n    const setFieldValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        let fieldValue = value;\n        if (field) {\n            const fieldReference = field._f;\n            if (fieldReference) {\n                !fieldReference.disabled &&\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\n                fieldValue =\n                    isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n                        ? ''\n                        : value;\n                if (isMultipleSelect(fieldReference.ref)) {\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\n                }\n                else if (fieldReference.refs) {\n                    if (isCheckBoxInput(fieldReference.ref)) {\n                        fieldReference.refs.forEach((checkboxRef) => {\n                            if (!checkboxRef.defaultChecked || !checkboxRef.disabled) {\n                                if (Array.isArray(fieldValue)) {\n                                    checkboxRef.checked = !!fieldValue.find((data) => data === checkboxRef.value);\n                                }\n                                else {\n                                    checkboxRef.checked =\n                                        fieldValue === checkboxRef.value || !!fieldValue;\n                                }\n                            }\n                        });\n                    }\n                    else {\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\n                    }\n                }\n                else if (isFileInput(fieldReference.ref)) {\n                    fieldReference.ref.value = '';\n                }\n                else {\n                    fieldReference.ref.value = fieldValue;\n                    if (!fieldReference.ref.type) {\n                        _subjects.state.next({\n                            name,\n                            values: cloneObject(_formValues),\n                        });\n                    }\n                }\n            }\n        }\n        (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\n        options.shouldValidate && trigger(name);\n    };\n    const setValues = (name, value, options) => {\n        for (const fieldKey in value) {\n            if (!value.hasOwnProperty(fieldKey)) {\n                return;\n            }\n            const fieldValue = value[fieldKey];\n            const fieldName = name + '.' + fieldKey;\n            const field = get(_fields, fieldName);\n            (_names.array.has(name) ||\n                isObject(fieldValue) ||\n                (field && !field._f)) &&\n                !isDateObject(fieldValue)\n                ? setValues(fieldName, fieldValue, options)\n                : setFieldValue(fieldName, fieldValue, options);\n        }\n    };\n    const setValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        const isFieldArray = _names.array.has(name);\n        const cloneValue = cloneObject(value);\n        set(_formValues, name, cloneValue);\n        if (isFieldArray) {\n            _subjects.array.next({\n                name,\n                values: cloneObject(_formValues),\n            });\n            if ((_proxyFormState.isDirty ||\n                _proxyFormState.dirtyFields ||\n                _proxySubscribeFormState.isDirty ||\n                _proxySubscribeFormState.dirtyFields) &&\n                options.shouldDirty) {\n                _subjects.state.next({\n                    name,\n                    dirtyFields: getDirtyFields(_defaultValues, _formValues),\n                    isDirty: _getDirty(name, cloneValue),\n                });\n            }\n        }\n        else {\n            field && !field._f && !isNullOrUndefined(cloneValue)\n                ? setValues(name, cloneValue, options)\n                : setFieldValue(name, cloneValue, options);\n        }\n        isWatched(name, _names) && _subjects.state.next({ ..._formState, name });\n        _subjects.state.next({\n            name: _state.mount ? name : undefined,\n            values: cloneObject(_formValues),\n        });\n    };\n    const onChange = async (event) => {\n        _state.mount = true;\n        const target = event.target;\n        let name = target.name;\n        let isFieldValueUpdated = true;\n        const field = get(_fields, name);\n        const _updateIsFieldValueUpdated = (fieldValue) => {\n            isFieldValueUpdated =\n                Number.isNaN(fieldValue) ||\n                    (isDateObject(fieldValue) && isNaN(fieldValue.getTime())) ||\n                    deepEqual(fieldValue, get(_formValues, name, fieldValue));\n        };\n        const validationModeBeforeSubmit = getValidationModes(_options.mode);\n        const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n        if (field) {\n            let error;\n            let isValid;\n            const fieldValue = target.type\n                ? getFieldValue(field._f)\n                : getEventValue(event);\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n            const shouldSkipValidation = (!hasValidation(field._f) &&\n                !_options.resolver &&\n                !get(_formState.errors, name) &&\n                !field._f.deps) ||\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n            const watched = isWatched(name, _names, isBlurEvent);\n            set(_formValues, name, fieldValue);\n            if (isBlurEvent) {\n                if (!target || !target.readOnly) {\n                    field._f.onBlur && field._f.onBlur(event);\n                    delayErrorCallback && delayErrorCallback(0);\n                }\n            }\n            else if (field._f.onChange) {\n                field._f.onChange(event);\n            }\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent);\n            const shouldRender = !isEmptyObject(fieldState) || watched;\n            !isBlurEvent &&\n                _subjects.state.next({\n                    name,\n                    type: event.type,\n                    values: cloneObject(_formValues),\n                });\n            if (shouldSkipValidation) {\n                if (_proxyFormState.isValid || _proxySubscribeFormState.isValid) {\n                    if (_options.mode === 'onBlur') {\n                        if (isBlurEvent) {\n                            _setValid();\n                        }\n                    }\n                    else if (!isBlurEvent) {\n                        _setValid();\n                    }\n                }\n                return (shouldRender &&\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\n            }\n            !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n            if (_options.resolver) {\n                const { errors } = await _runSchema([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n                    const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n                    error = errorLookupResult.error;\n                    name = errorLookupResult.name;\n                    isValid = isEmptyObject(errors);\n                }\n            }\n            else {\n                _updateIsValidating([name], true);\n                error = (await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n                _updateIsValidating([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    if (error) {\n                        isValid = false;\n                    }\n                    else if (_proxyFormState.isValid ||\n                        _proxySubscribeFormState.isValid) {\n                        isValid = await executeBuiltInValidation(_fields, true);\n                    }\n                }\n            }\n            if (isFieldValueUpdated) {\n                field._f.deps &&\n                    trigger(field._f.deps);\n                shouldRenderByError(name, isValid, error, fieldState);\n            }\n        }\n    };\n    const _focusInput = (ref, key) => {\n        if (get(_formState.errors, key) && ref.focus) {\n            ref.focus();\n            return 1;\n        }\n        return;\n    };\n    const trigger = async (name, options = {}) => {\n        let isValid;\n        let validationResult;\n        const fieldNames = convertToArrayPayload(name);\n        if (_options.resolver) {\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n            isValid = isEmptyObject(errors);\n            validationResult = name\n                ? !fieldNames.some((name) => get(errors, name))\n                : isValid;\n        }\n        else if (name) {\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\n                const field = get(_fields, fieldName);\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\n            }))).every(Boolean);\n            !(!validationResult && !_formState.isValid) && _setValid();\n        }\n        else {\n            validationResult = isValid = await executeBuiltInValidation(_fields);\n        }\n        _subjects.state.next({\n            ...(!isString(name) ||\n                ((_proxyFormState.isValid || _proxySubscribeFormState.isValid) &&\n                    isValid !== _formState.isValid)\n                ? {}\n                : { name }),\n            ...(_options.resolver || !name ? { isValid } : {}),\n            errors: _formState.errors,\n        });\n        options.shouldFocus &&\n            !validationResult &&\n            iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);\n        return validationResult;\n    };\n    const getValues = (fieldNames) => {\n        const values = {\n            ...(_state.mount ? _formValues : _defaultValues),\n        };\n        return isUndefined(fieldNames)\n            ? values\n            : isString(fieldNames)\n                ? get(values, fieldNames)\n                : fieldNames.map((name) => get(values, name));\n    };\n    const getFieldState = (name, formState) => ({\n        invalid: !!get((formState || _formState).errors, name),\n        isDirty: !!get((formState || _formState).dirtyFields, name),\n        error: get((formState || _formState).errors, name),\n        isValidating: !!get(_formState.validatingFields, name),\n        isTouched: !!get((formState || _formState).touchedFields, name),\n    });\n    const clearErrors = (name) => {\n        name &&\n            convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));\n        _subjects.state.next({\n            errors: name ? _formState.errors : {},\n        });\n    };\n    const setError = (name, error, options) => {\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n        const currentError = get(_formState.errors, name) || {};\n        // Don't override existing error messages elsewhere in the object tree.\n        const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;\n        set(_formState.errors, name, {\n            ...restOfErrorTree,\n            ...error,\n            ref,\n        });\n        _subjects.state.next({\n            name,\n            errors: _formState.errors,\n            isValid: false,\n        });\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\n    };\n    const watch = (name, defaultValue) => isFunction(name)\n        ? _subjects.state.subscribe({\n            next: (payload) => 'values' in payload &&\n                name(_getWatch(undefined, defaultValue), payload),\n        })\n        : _getWatch(name, defaultValue, true);\n    const _subscribe = (props) => _subjects.state.subscribe({\n        next: (formState) => {\n            if (shouldSubscribeByName(props.name, formState.name, props.exact) &&\n                shouldRenderFormState(formState, props.formState || _proxyFormState, _setFormState, props.reRenderRoot)) {\n                props.callback({\n                    values: { ..._formValues },\n                    ..._formState,\n                    ...formState,\n                    defaultValues: _defaultValues,\n                });\n            }\n        },\n    }).unsubscribe;\n    const subscribe = (props) => {\n        _state.mount = true;\n        _proxySubscribeFormState = {\n            ..._proxySubscribeFormState,\n            ...props.formState,\n        };\n        return _subscribe({\n            ...props,\n            formState: _proxySubscribeFormState,\n        });\n    };\n    const unregister = (name, options = {}) => {\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n            _names.mount.delete(fieldName);\n            _names.array.delete(fieldName);\n            if (!options.keepValue) {\n                unset(_fields, fieldName);\n                unset(_formValues, fieldName);\n            }\n            !options.keepError && unset(_formState.errors, fieldName);\n            !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n            !options.keepTouched && unset(_formState.touchedFields, fieldName);\n            !options.keepIsValidating &&\n                unset(_formState.validatingFields, fieldName);\n            !_options.shouldUnregister &&\n                !options.keepDefaultValue &&\n                unset(_defaultValues, fieldName);\n        }\n        _subjects.state.next({\n            values: cloneObject(_formValues),\n        });\n        _subjects.state.next({\n            ..._formState,\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n        });\n        !options.keepIsValid && _setValid();\n    };\n    const _setDisabledField = ({ disabled, name, }) => {\n        if ((isBoolean(disabled) && _state.mount) ||\n            !!disabled ||\n            _names.disabled.has(name)) {\n            disabled ? _names.disabled.add(name) : _names.disabled.delete(name);\n        }\n    };\n    const register = (name, options = {}) => {\n        let field = get(_fields, name);\n        const disabledIsDefined = isBoolean(options.disabled) || isBoolean(_options.disabled);\n        set(_fields, name, {\n            ...(field || {}),\n            _f: {\n                ...(field && field._f ? field._f : { ref: { name } }),\n                name,\n                mount: true,\n                ...options,\n            },\n        });\n        _names.mount.add(name);\n        if (field) {\n            _setDisabledField({\n                disabled: isBoolean(options.disabled)\n                    ? options.disabled\n                    : _options.disabled,\n                name,\n            });\n        }\n        else {\n            updateValidAndValue(name, true, options.value);\n        }\n        return {\n            ...(disabledIsDefined\n                ? { disabled: options.disabled || _options.disabled }\n                : {}),\n            ...(_options.progressive\n                ? {\n                    required: !!options.required,\n                    min: getRuleValue(options.min),\n                    max: getRuleValue(options.max),\n                    minLength: getRuleValue(options.minLength),\n                    maxLength: getRuleValue(options.maxLength),\n                    pattern: getRuleValue(options.pattern),\n                }\n                : {}),\n            name,\n            onChange,\n            onBlur: onChange,\n            ref: (ref) => {\n                if (ref) {\n                    register(name, options);\n                    field = get(_fields, name);\n                    const fieldRef = isUndefined(ref.value)\n                        ? ref.querySelectorAll\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\n                            : ref\n                        : ref;\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n                    const refs = field._f.refs || [];\n                    if (radioOrCheckbox\n                        ? refs.find((option) => option === fieldRef)\n                        : fieldRef === field._f.ref) {\n                        return;\n                    }\n                    set(_fields, name, {\n                        _f: {\n                            ...field._f,\n                            ...(radioOrCheckbox\n                                ? {\n                                    refs: [\n                                        ...refs.filter(live),\n                                        fieldRef,\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                                    ],\n                                    ref: { type: fieldRef.type, name },\n                                }\n                                : { ref: fieldRef }),\n                        },\n                    });\n                    updateValidAndValue(name, false, undefined, fieldRef);\n                }\n                else {\n                    field = get(_fields, name, {});\n                    if (field._f) {\n                        field._f.mount = false;\n                    }\n                    (_options.shouldUnregister || options.shouldUnregister) &&\n                        !(isNameInFieldArray(_names.array, name) && _state.action) &&\n                        _names.unMount.add(name);\n                }\n            },\n        };\n    };\n    const _focusError = () => _options.shouldFocusError &&\n        iterateFieldsByAction(_fields, _focusInput, _names.mount);\n    const _disableForm = (disabled) => {\n        if (isBoolean(disabled)) {\n            _subjects.state.next({ disabled });\n            iterateFieldsByAction(_fields, (ref, name) => {\n                const currentField = get(_fields, name);\n                if (currentField) {\n                    ref.disabled = currentField._f.disabled || disabled;\n                    if (Array.isArray(currentField._f.refs)) {\n                        currentField._f.refs.forEach((inputRef) => {\n                            inputRef.disabled = currentField._f.disabled || disabled;\n                        });\n                    }\n                }\n            }, 0, false);\n        }\n    };\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\n        let onValidError = undefined;\n        if (e) {\n            e.preventDefault && e.preventDefault();\n            e.persist &&\n                e.persist();\n        }\n        let fieldValues = cloneObject(_formValues);\n        _subjects.state.next({\n            isSubmitting: true,\n        });\n        if (_options.resolver) {\n            const { errors, values } = await _runSchema();\n            _formState.errors = errors;\n            fieldValues = cloneObject(values);\n        }\n        else {\n            await executeBuiltInValidation(_fields);\n        }\n        if (_names.disabled.size) {\n            for (const name of _names.disabled) {\n                unset(fieldValues, name);\n            }\n        }\n        unset(_formState.errors, 'root');\n        if (isEmptyObject(_formState.errors)) {\n            _subjects.state.next({\n                errors: {},\n            });\n            try {\n                await onValid(fieldValues, e);\n            }\n            catch (error) {\n                onValidError = error;\n            }\n        }\n        else {\n            if (onInvalid) {\n                await onInvalid({ ..._formState.errors }, e);\n            }\n            _focusError();\n            setTimeout(_focusError);\n        }\n        _subjects.state.next({\n            isSubmitted: true,\n            isSubmitting: false,\n            isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,\n            submitCount: _formState.submitCount + 1,\n            errors: _formState.errors,\n        });\n        if (onValidError) {\n            throw onValidError;\n        }\n    };\n    const resetField = (name, options = {}) => {\n        if (get(_fields, name)) {\n            if (isUndefined(options.defaultValue)) {\n                setValue(name, cloneObject(get(_defaultValues, name)));\n            }\n            else {\n                setValue(name, options.defaultValue);\n                set(_defaultValues, name, cloneObject(options.defaultValue));\n            }\n            if (!options.keepTouched) {\n                unset(_formState.touchedFields, name);\n            }\n            if (!options.keepDirty) {\n                unset(_formState.dirtyFields, name);\n                _formState.isDirty = options.defaultValue\n                    ? _getDirty(name, cloneObject(get(_defaultValues, name)))\n                    : _getDirty();\n            }\n            if (!options.keepError) {\n                unset(_formState.errors, name);\n                _proxyFormState.isValid && _setValid();\n            }\n            _subjects.state.next({ ..._formState });\n        }\n    };\n    const _reset = (formValues, keepStateOptions = {}) => {\n        const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;\n        const cloneUpdatedValues = cloneObject(updatedValues);\n        const isEmptyResetValues = isEmptyObject(formValues);\n        const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;\n        if (!keepStateOptions.keepDefaultValues) {\n            _defaultValues = updatedValues;\n        }\n        if (!keepStateOptions.keepValues) {\n            if (keepStateOptions.keepDirtyValues) {\n                const fieldsToCheck = new Set([\n                    ..._names.mount,\n                    ...Object.keys(getDirtyFields(_defaultValues, _formValues)),\n                ]);\n                for (const fieldName of Array.from(fieldsToCheck)) {\n                    get(_formState.dirtyFields, fieldName)\n                        ? set(values, fieldName, get(_formValues, fieldName))\n                        : setValue(fieldName, get(values, fieldName));\n                }\n            }\n            else {\n                if (isWeb && isUndefined(formValues)) {\n                    for (const name of _names.mount) {\n                        const field = get(_fields, name);\n                        if (field && field._f) {\n                            const fieldReference = Array.isArray(field._f.refs)\n                                ? field._f.refs[0]\n                                : field._f.ref;\n                            if (isHTMLElement(fieldReference)) {\n                                const form = fieldReference.closest('form');\n                                if (form) {\n                                    form.reset();\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                if (keepStateOptions.keepFieldsRef) {\n                    for (const fieldName of _names.mount) {\n                        setValue(fieldName, get(values, fieldName));\n                    }\n                }\n                else {\n                    _fields = {};\n                }\n            }\n            _formValues = _options.shouldUnregister\n                ? keepStateOptions.keepDefaultValues\n                    ? cloneObject(_defaultValues)\n                    : {}\n                : cloneObject(values);\n            _subjects.array.next({\n                values: { ...values },\n            });\n            _subjects.state.next({\n                values: { ...values },\n            });\n        }\n        _names = {\n            mount: keepStateOptions.keepDirtyValues ? _names.mount : new Set(),\n            unMount: new Set(),\n            array: new Set(),\n            disabled: new Set(),\n            watch: new Set(),\n            watchAll: false,\n            focus: '',\n        };\n        _state.mount =\n            !_proxyFormState.isValid ||\n                !!keepStateOptions.keepIsValid ||\n                !!keepStateOptions.keepDirtyValues;\n        _state.watch = !!_options.shouldUnregister;\n        _subjects.state.next({\n            submitCount: keepStateOptions.keepSubmitCount\n                ? _formState.submitCount\n                : 0,\n            isDirty: isEmptyResetValues\n                ? false\n                : keepStateOptions.keepDirty\n                    ? _formState.isDirty\n                    : !!(keepStateOptions.keepDefaultValues &&\n                        !deepEqual(formValues, _defaultValues)),\n            isSubmitted: keepStateOptions.keepIsSubmitted\n                ? _formState.isSubmitted\n                : false,\n            dirtyFields: isEmptyResetValues\n                ? {}\n                : keepStateOptions.keepDirtyValues\n                    ? keepStateOptions.keepDefaultValues && _formValues\n                        ? getDirtyFields(_defaultValues, _formValues)\n                        : _formState.dirtyFields\n                    : keepStateOptions.keepDefaultValues && formValues\n                        ? getDirtyFields(_defaultValues, formValues)\n                        : keepStateOptions.keepDirty\n                            ? _formState.dirtyFields\n                            : {},\n            touchedFields: keepStateOptions.keepTouched\n                ? _formState.touchedFields\n                : {},\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\n            isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful\n                ? _formState.isSubmitSuccessful\n                : false,\n            isSubmitting: false,\n            defaultValues: _defaultValues,\n        });\n    };\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\n        ? formValues(_formValues)\n        : formValues, keepStateOptions);\n    const setFocus = (name, options = {}) => {\n        const field = get(_fields, name);\n        const fieldReference = field && field._f;\n        if (fieldReference) {\n            const fieldRef = fieldReference.refs\n                ? fieldReference.refs[0]\n                : fieldReference.ref;\n            if (fieldRef.focus) {\n                fieldRef.focus();\n                options.shouldSelect &&\n                    isFunction(fieldRef.select) &&\n                    fieldRef.select();\n            }\n        }\n    };\n    const _setFormState = (updatedFormState) => {\n        _formState = {\n            ..._formState,\n            ...updatedFormState,\n        };\n    };\n    const _resetDefaultValues = () => isFunction(_options.defaultValues) &&\n        _options.defaultValues().then((values) => {\n            reset(values, _options.resetOptions);\n            _subjects.state.next({\n                isLoading: false,\n            });\n        });\n    const methods = {\n        control: {\n            register,\n            unregister,\n            getFieldState,\n            handleSubmit,\n            setError,\n            _subscribe,\n            _runSchema,\n            _focusError,\n            _getWatch,\n            _getDirty,\n            _setValid,\n            _setFieldArray,\n            _setDisabledField,\n            _setErrors,\n            _getFieldArray,\n            _reset,\n            _resetDefaultValues,\n            _removeUnmounted,\n            _disableForm,\n            _subjects,\n            _proxyFormState,\n            get _fields() {\n                return _fields;\n            },\n            get _formValues() {\n                return _formValues;\n            },\n            get _state() {\n                return _state;\n            },\n            set _state(value) {\n                _state = value;\n            },\n            get _defaultValues() {\n                return _defaultValues;\n            },\n            get _names() {\n                return _names;\n            },\n            set _names(value) {\n                _names = value;\n            },\n            get _formState() {\n                return _formState;\n            },\n            get _options() {\n                return _options;\n            },\n            set _options(value) {\n                _options = {\n                    ..._options,\n                    ...value,\n                };\n            },\n        },\n        subscribe,\n        trigger,\n        register,\n        handleSubmit,\n        watch,\n        setValue,\n        getValues,\n        reset,\n        resetField,\n        clearErrors,\n        unregister,\n        setError,\n        setFocus,\n        getFieldState,\n    };\n    return {\n        ...methods,\n        formControl: methods,\n    };\n}\n\nvar generateId = () => {\n    if (typeof crypto !== 'undefined' && crypto.randomUUID) {\n        return crypto.randomUUID();\n    }\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16 + d) % 16 | 0;\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n\nvar appendAt = (data, value) => [\n    ...data,\n    ...convertToArrayPayload(value),\n];\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n    return [\n        ...data.slice(0, index),\n        ...convertToArrayPayload(value),\n        ...data.slice(index),\n    ];\n}\n\nvar moveArrayAt = (data, from, to) => {\n    if (!Array.isArray(data)) {\n        return [];\n    }\n    if (isUndefined(data[to])) {\n        data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n};\n\nvar prependAt = (data, value) => [\n    ...convertToArrayPayload(value),\n    ...convertToArrayPayload(data),\n];\n\nfunction removeAtIndexes(data, indexes) {\n    let i = 0;\n    const temp = [...data];\n    for (const index of indexes) {\n        temp.splice(index - i, 1);\n        i++;\n    }\n    return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index)\n    ? []\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n    [data[indexA], data[indexB]] = [data[indexB], data[indexA]];\n};\n\nvar updateAt = (fieldValues, index, value) => {\n    fieldValues[index] = value;\n    return fieldValues;\n};\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFieldArray(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, rules, } = props;\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\n    const _fieldIds = React.useRef(fields);\n    const _actioned = React.useRef(false);\n    _fieldIds.current = fields;\n    control._names.array.add(name);\n    React.useMemo(() => rules &&\n        control.register(name, rules), [control, rules, name]);\n    useIsomorphicLayoutEffect(() => control._subjects.array.subscribe({\n        next: ({ values, name: fieldArrayName, }) => {\n            if (fieldArrayName === name || !fieldArrayName) {\n                const fieldValues = get(values, name);\n                if (Array.isArray(fieldValues)) {\n                    setFields(fieldValues);\n                    ids.current = fieldValues.map(generateId);\n                }\n            }\n        },\n    }).unsubscribe, [control, name]);\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\n        _actioned.current = true;\n        control._setFieldArray(name, updatedFieldArrayValues);\n    }, [control, name]);\n    const append = (value, options) => {\n        const appendValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = appendAt(control._getFieldArray(name), appendValue);\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\n        ids.current = appendAt(ids.current, appendValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, appendAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const prepend = (value, options) => {\n        const prependValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = prependAt(control._getFieldArray(name), prependValue);\n        control._names.focus = getFocusFieldName(name, 0, options);\n        ids.current = prependAt(ids.current, prependValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, prependAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const remove = (index) => {\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\n        ids.current = removeArrayAt(ids.current, index);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        !Array.isArray(get(control._fields, name)) &&\n            set(control._fields, name, undefined);\n        control._setFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n            argA: index,\n        });\n    };\n    const insert$1 = (index, value, options) => {\n        const insertValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\n        control._names.focus = getFocusFieldName(name, index, options);\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, insert, {\n            argA: index,\n            argB: fillEmptyArray(value),\n        });\n    };\n    const swap = (indexA, indexB) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n        swapArrayAt(ids.current, indexA, indexB);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\n            argA: indexA,\n            argB: indexB,\n        }, false);\n    };\n    const move = (from, to) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        moveArrayAt(updatedFieldArrayValues, from, to);\n        moveArrayAt(ids.current, from, to);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\n            argA: from,\n            argB: to,\n        }, false);\n    };\n    const update = (index, value) => {\n        const updateValue = cloneObject(value);\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\n        updateValues(updatedFieldArrayValues);\n        setFields([...updatedFieldArrayValues]);\n        control._setFieldArray(name, updatedFieldArrayValues, updateAt, {\n            argA: index,\n            argB: updateValue,\n        }, true, false);\n    };\n    const replace = (value) => {\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n        ids.current = updatedFieldArrayValues.map(generateId);\n        updateValues([...updatedFieldArrayValues]);\n        setFields([...updatedFieldArrayValues]);\n        control._setFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\n    };\n    React.useEffect(() => {\n        control._state.action = false;\n        isWatched(name, control._names) &&\n            control._subjects.state.next({\n                ...control._formState,\n            });\n        if (_actioned.current &&\n            (!getValidationModes(control._options.mode).isOnSubmit ||\n                control._formState.isSubmitted) &&\n            !getValidationModes(control._options.reValidateMode).isOnSubmit) {\n            if (control._options.resolver) {\n                control._runSchema([name]).then((result) => {\n                    const error = get(result.errors, name);\n                    const existingError = get(control._formState.errors, name);\n                    if (existingError\n                        ? (!error && existingError.type) ||\n                            (error &&\n                                (existingError.type !== error.type ||\n                                    existingError.message !== error.message))\n                        : error && error.type) {\n                        error\n                            ? set(control._formState.errors, name, error)\n                            : unset(control._formState.errors, name);\n                        control._subjects.state.next({\n                            errors: control._formState.errors,\n                        });\n                    }\n                });\n            }\n            else {\n                const field = get(control._fields, name);\n                if (field &&\n                    field._f &&\n                    !(getValidationModes(control._options.reValidateMode).isOnSubmit &&\n                        getValidationModes(control._options.mode).isOnSubmit)) {\n                    validateField(field, control._names.disabled, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\n                        control._subjects.state.next({\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\n                        }));\n                }\n            }\n        }\n        control._subjects.state.next({\n            name,\n            values: cloneObject(control._formValues),\n        });\n        control._names.focus &&\n            iterateFieldsByAction(control._fields, (ref, key) => {\n                if (control._names.focus &&\n                    key.startsWith(control._names.focus) &&\n                    ref.focus) {\n                    ref.focus();\n                    return 1;\n                }\n                return;\n            });\n        control._names.focus = '';\n        control._setValid();\n        _actioned.current = false;\n    }, [fields, name, control]);\n    React.useEffect(() => {\n        !get(control._formValues, name) && control._setFieldArray(name);\n        return () => {\n            const updateMounted = (name, value) => {\n                const field = get(control._fields, name);\n                if (field && field._f) {\n                    field._f.mount = value;\n                }\n            };\n            control._options.shouldUnregister || shouldUnregister\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, keyName, shouldUnregister]);\n    return {\n        swap: React.useCallback(swap, [updateValues, name, control]),\n        move: React.useCallback(move, [updateValues, name, control]),\n        prepend: React.useCallback(prepend, [updateValues, name, control]),\n        append: React.useCallback(append, [updateValues, name, control]),\n        remove: React.useCallback(remove, [updateValues, name, control]),\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\n        update: React.useCallback(update, [updateValues, name, control]),\n        replace: React.useCallback(replace, [updateValues, name, control]),\n        fields: React.useMemo(() => fields.map((field, index) => ({\n            ...field,\n            [keyName]: ids.current[index] || generateId(),\n        })), [fields, keyName]),\n    };\n}\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useForm(props = {}) {\n    const _formControl = React.useRef(undefined);\n    const _values = React.useRef(undefined);\n    const [formState, updateFormState] = React.useState({\n        isDirty: false,\n        isValidating: false,\n        isLoading: isFunction(props.defaultValues),\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        submitCount: 0,\n        dirtyFields: {},\n        touchedFields: {},\n        validatingFields: {},\n        errors: props.errors || {},\n        disabled: props.disabled || false,\n        isReady: false,\n        defaultValues: isFunction(props.defaultValues)\n            ? undefined\n            : props.defaultValues,\n    });\n    if (!_formControl.current) {\n        if (props.formControl) {\n            _formControl.current = {\n                ...props.formControl,\n                formState,\n            };\n            if (props.defaultValues && !isFunction(props.defaultValues)) {\n                props.formControl.reset(props.defaultValues, props.resetOptions);\n            }\n        }\n        else {\n            const { formControl, ...rest } = createFormControl(props);\n            _formControl.current = {\n                ...rest,\n                formState,\n            };\n        }\n    }\n    const control = _formControl.current.control;\n    control._options = props;\n    useIsomorphicLayoutEffect(() => {\n        const sub = control._subscribe({\n            formState: control._proxyFormState,\n            callback: () => updateFormState({ ...control._formState }),\n            reRenderRoot: true,\n        });\n        updateFormState((data) => ({\n            ...data,\n            isReady: true,\n        }));\n        control._formState.isReady = true;\n        return sub;\n    }, [control]);\n    React.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);\n    React.useEffect(() => {\n        if (props.mode) {\n            control._options.mode = props.mode;\n        }\n        if (props.reValidateMode) {\n            control._options.reValidateMode = props.reValidateMode;\n        }\n    }, [control, props.mode, props.reValidateMode]);\n    React.useEffect(() => {\n        if (props.errors) {\n            control._setErrors(props.errors);\n            control._focusError();\n        }\n    }, [control, props.errors]);\n    React.useEffect(() => {\n        props.shouldUnregister &&\n            control._subjects.state.next({\n                values: control._getWatch(),\n            });\n    }, [control, props.shouldUnregister]);\n    React.useEffect(() => {\n        if (control._proxyFormState.isDirty) {\n            const isDirty = control._getDirty();\n            if (isDirty !== formState.isDirty) {\n                control._subjects.state.next({\n                    isDirty,\n                });\n            }\n        }\n    }, [control, formState.isDirty]);\n    React.useEffect(() => {\n        if (props.values && !deepEqual(props.values, _values.current)) {\n            control._reset(props.values, {\n                keepFieldsRef: true,\n                ...control._options.resetOptions,\n            });\n            _values.current = props.values;\n            updateFormState((state) => ({ ...state }));\n        }\n        else {\n            control._resetDefaultValues();\n        }\n    }, [control, props.values]);\n    React.useEffect(() => {\n        if (!control._state.mount) {\n            control._setValid();\n            control._state.mount = true;\n        }\n        if (control._state.watch) {\n            control._state.watch = false;\n            control._subjects.state.next({ ...control._formState });\n        }\n        control._removeUnmounted();\n    });\n    _formControl.current.formState = getProxyFormState(formState, control);\n    return _formControl.current;\n}\n\nexport { Controller, Form, FormProvider, appendErrors, createFormControl, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n"],"names":["props","_formControl","React","useRef","undefined","_values","formState","updateFormState","useState","isDirty","isValidating","isLoading","isFunction","defaultValues","isSubmitted","isSubmitting","isSubmitSuccessful","isValid","submitCount","dirtyFields","touchedFields","validatingFields","errors","disabled","isReady","current","formControl","reset","resetOptions","rest","delayErrorCallback","_options","defaultOptions","_formState","_fields","_defaultValues","isObject","values","cloneObject","_formValues","shouldUnregister","_state","action","mount","watch","_names","Set","unMount","array","timer","_proxyFormState","_proxySubscribeFormState","_subjects","createSubject","state","shouldDisplayAllAssociatedErrors","criteriaMode","VALIDATION_MODE","all","debounce","callback","wait","clearTimeout","setTimeout","_setValid","async","shouldUpdateValid","resolver","isEmptyObject","_runSchema","executeBuiltInValidation","next","_updateIsValidating","names","Array","from","forEach","name","set","unset","_setFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","isArray","get","fieldValues","argA","argB","unsetEmptyArray","getDirtyFields","_getDirty","updateErrors","error","updateValidAndValue","shouldSkipSetValueAs","value","ref","field","defaultValue","isUndefined","defaultChecked","getFieldValue","_f","setFieldValue","updateTouchAndDirty","fieldValue","isBlurEvent","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","isCurrentFieldPristine","deepEqual","isPreviousFieldTouched","shouldRenderByError","fieldState","previousFieldError","isBoolean","delayError","updatedFormState","result","context","getResolverOptions","shouldUseNativeValidation","executeSchemaAndUpdateState","fields","shouldOnlyCheckValid","valid","isFieldArrayRoot","has","isPromiseFunction","hasPromiseValidation","fieldError","validateField","updateFieldArrayRootError","_removeUnmounted","refs","every","live","unregister","data","getValues","_getWatch","isGlobal","generateWatchOutput","isString","options","fieldReference","getFieldValueAs","isHTMLElement","isNullOrUndefined","isMultipleSelect","optionRef","selected","includes","isCheckBoxInput","checkboxRef","checked","find","radioRef","isFileInput","type","shouldTouch","shouldValidate","trigger","setValues","fieldKey","hasOwnProperty","fieldName","isDateObject","setValue","isFieldArray","cloneValue","isWatched","onChange","target","event","isFieldValueUpdated","_updateIsFieldValueUpdated","Number","isNaN","getTime","validationModeBeforeSubmit","getValidationModes","mode","validationModeAfterSubmit","reValidateMode","getEventValue","EVENTS","BLUR","FOCUS_OUT","shouldSkipValidation","hasValidation","deps","skipValidation","watched","readOnly","onBlur","previousErrorLookupResult","schemaErrorLookup","errorLookupResult","_focusInput","key","focus","validationResult","fieldNames","convertToArrayPayload","some","Promise","map","Boolean","shouldFocus","iterateFieldsByAction","getFieldState","invalid","isTouched","clearErrors","inputName","setError","currentError","currentRef","message","restOfErrorTree","subscribe","payload","_subscribe","shouldSubscribeByName","exact","shouldRenderFormState","_setFormState","reRenderRoot","unsubscribe","delete","keepValue","keepError","keepDirty","keepTouched","keepIsValidating","keepDefaultValue","keepIsValid","_setDisabledField","add","register","disabledIsDefined","progressive","required","min","getRuleValue","max","minLength","maxLength","pattern","fieldRef","querySelectorAll","radioOrCheckbox","isRadioOrCheckbox","option","filter","isNameInFieldArray","_focusError","shouldFocusError","handleSubmit","onValid","onInvalid","onValidError","e","preventDefault","persist","size","resetField","_reset","formValues","keepStateOptions","updatedValues","cloneUpdatedValues","isEmptyResetValues","keepDefaultValues","keepValues","keepDirtyValues","fieldsToCheck","Object","keys","isWeb","form","closest","keepFieldsRef","watchAll","keepSubmitCount","keepIsSubmitted","keepErrors","keepIsSubmitSuccessful","setFocus","shouldSelect","select","methods","control","_setErrors","_getFieldArray","compact","_resetDefaultValues","then","_disableForm","currentField","inputRef","createFormControl","useIsomorphicLayoutEffect","sub","useEffect","getProxyFormState","element","Date","isObjectType","substring","search","getNodeParentName","isPlainObject","tempObject","prototypeCopy","constructor","prototype","window","HTMLElement","document","copy","isFileListInstance","FileList","Blob","create","getPrototypeOf","isKey","test","val","stringToPath","input","replace","split","object","path","reduce","index","tempPath","length","lastIndex","newValue","objValue","CHANGE","onSubmit","onTouched","INPUT_VALIDATION_RULES","HookFormContext","createContext","displayName","useFormContext","useContext","localProxyFormState","isRoot","defineProperty","_key","useLayoutEffect","isPrimitive","object1","object2","_internal_visited","WeakSet","keys1","keys2","val1","val2","useWatch","compute","_defaultValue","_compute","_computeFormValues","defaultValueMemo","useMemo","updateValue","computedFormValues","useController","isArrayField","_localProxyFormState","useFormState","_props","_registerProps","rules","defineProperties","enumerable","useCallback","elm","setCustomValidity","reportValidity","_shouldUnregisterField","updateMounted","exports","render","appendErrors","validateAllFieldCriteria","types","_observers","observers","observer","push","o","owner","ownerDocument","defaultView","isRadioInput","isConnected","paths","childObject","updatePath","slice","baseGet","obj","isEmptyArray","objectHasFunction","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","defaultResult","validResult","getCheckboxValue","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","getRadioValue","previous","files","selectedOptions","fieldsNames","isRegex","RegExp","rule","source","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","ASYNC_FUNCTION","validate","validateFunction","watchName","startsWith","abortEarly","join","foundError","root","pop","formStateData","signalName","currentName","fieldArrayErrors","isMessage","getValidateError","getValueAndMessage","validationData","disabledFieldNames","inputValue","isRadio","isCheckBox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","convertTimeToDate","time","toDateString","isTime","isWeek","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError"],"mappings":"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","x_google_ignoreList":[0]}