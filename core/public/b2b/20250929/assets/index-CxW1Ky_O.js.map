{"version":3,"file":"index-CxW1Ky_O.js","sources":["../../src/pages/Dashboard/components/DashboardCard.tsx","../../src/pages/Dashboard/ActionMenuCell.tsx","../../src/pages/Dashboard/CompanyNameCell/SelectedBadge.tsx","../../src/pages/Dashboard/CompanyNameCell/index.tsx","../../src/pages/Dashboard/index.tsx"],"sourcesContent":["import { Box, Button, Card, CardContent, Typography } from '@mui/material';\n\nimport { useB3Lang } from '@/lib/lang';\n\ninterface DashboardCardProps {\n  companyName: string;\n  email: string;\n  isSelected: boolean;\n  action: { label: string; onClick: () => void };\n}\n\nfunction SelectedBadge() {\n  const b3Lang = useB3Lang();\n\n  return (\n    <Box\n      sx={{\n        fontWeight: 400,\n        fontSize: '13px',\n        background: '#ED6C02',\n        display: 'inline-block',\n        p: '2px 7px',\n        color: '#FFFFFF',\n        borderRadius: '10px',\n      }}\n    >\n      {b3Lang('dashboard.selected')}\n    </Box>\n  );\n}\n\nexport function DashboardCard({ companyName, email, isSelected, action }: DashboardCardProps) {\n  return (\n    <Card>\n      <CardContent\n        sx={{\n          color: '#313440',\n        }}\n      >\n        <Typography\n          sx={{\n            fontWeight: 400,\n            fontSize: '24px',\n            color: 'rgba(0, 0, 0, 0.87)',\n          }}\n        >\n          {companyName}\n        </Typography>\n\n        {isSelected && <SelectedBadge />}\n\n        <Box\n          sx={{\n            display: 'flex',\n            fontSize: '16px',\n            mt: '15px',\n            gap: '5px',\n          }}\n        >\n          <Typography\n            sx={{\n              fontWeight: 500,\n            }}\n          >\n            Email:\n          </Typography>\n          <Typography variant=\"body1\">{email}</Typography>\n        </Box>\n      </CardContent>\n\n      <Button\n        sx={{\n          ml: '10px',\n          mb: '10px',\n        }}\n        variant=\"text\"\n        onClick={() => action.onClick()}\n      >\n        {action.label}\n      </Button>\n    </Card>\n  );\n}\n","import { useRef, useState } from 'react';\nimport { MoreHoriz as MoreHorizIcon } from '@mui/icons-material';\nimport { IconButton, Menu, MenuItem } from '@mui/material';\nimport { styled } from '@mui/material/styles';\n\nconst StyledMenu = styled(Menu)(() => ({\n  '& .MuiPaper-elevation': {\n    boxShadow:\n      '0px 1px 0px -1px rgba(0, 0, 0, 0.1), 0px 1px 6px rgba(0, 0, 0, 0.07), 0px 1px 4px rgba(0, 0, 0, 0.06)',\n    borderRadius: '4px',\n  },\n}));\n\ninterface Props {\n  label: string;\n  onClick: () => void;\n}\n\nexport function ActionMenuCell({ label, onClick }: Props) {\n  const ref = useRef<HTMLButtonElement | null>(null);\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <>\n      <IconButton onClick={() => setIsOpen(true)} ref={ref}>\n        <MoreHorizIcon />\n      </IconButton>\n      <StyledMenu\n        anchorEl={ref.current}\n        open={isOpen}\n        onClose={() => setIsOpen(false)}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'right',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n      >\n        <MenuItem\n          sx={{\n            color: 'primary.main',\n          }}\n          onClick={() => {\n            onClick();\n            setIsOpen(false);\n          }}\n        >\n          {label}\n        </MenuItem>\n      </StyledMenu>\n    </>\n  );\n}\n","import { Box } from '@mui/material';\n\nimport { useB3Lang } from '@/lib/lang';\n\nexport function SelectedBadge() {\n  const b3Lang = useB3Lang();\n\n  return (\n    <Box\n      sx={{\n        fontWeight: 400,\n        fontSize: '13px',\n        background: '#ED6C02',\n        ml: '16px',\n        p: '2px 7px',\n        color: '#FFFFFF',\n        borderRadius: '10px',\n      }}\n    >\n      {b3Lang('dashboard.selected')}\n    </Box>\n  );\n}\n","import { Box } from '@mui/material';\n\nimport { SelectedBadge } from './SelectedBadge';\n\ninterface Props {\n  companyName: string;\n  isSelected: boolean;\n}\n\nexport function CompanyNameCell({ companyName, isSelected }: Props) {\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        alignItems: 'center',\n      }}\n    >\n      {companyName}\n      {isSelected && <SelectedBadge />}\n    </Box>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Box } from '@mui/material';\nimport Cookies from 'js-cookie';\n\nimport { usePageMask } from '@/components';\nimport { ConfirmMasqueradeDialog } from '@/components/ConfirmMasqueradeDialog';\nimport B3FilterSearch from '@/components/filter/B3FilterSearch';\nimport B3Spin from '@/components/spin/B3Spin';\nimport { B3PaginationTable, GetRequestList } from '@/components/table/B3PaginationTable';\nimport { TableColumnItem } from '@/components/table/B3Table';\nimport { useSort } from '@/hooks';\nimport { useB3Lang } from '@/lib/lang';\nimport { PageProps } from '@/pages/PageProps';\nimport { superAdminCompanies } from '@/shared/service/b2b';\nimport { deleteCart } from '@/shared/service/bc/graphql/cart';\nimport { setCartNumber, useAppSelector, useAppStore } from '@/store';\nimport { endMasquerade, startMasquerade } from '@/utils/masquerade';\n\nimport { DashboardCard } from './components/DashboardCard';\nimport { ActionMenuCell } from './ActionMenuCell';\nimport { CompanyNameCell } from './CompanyNameCell';\n\ninterface ListItem {\n  [key: string]: string;\n}\n\ntype ConfirmState =\n  | {\n      type: 'start';\n      companyId: number;\n    }\n  | {\n      type: 'end';\n    };\n\nconst defaultSortKey = 'companyName';\n\nconst sortKeys = {\n  companyName: 'companyName',\n  companyAdminName: 'companyAdminName',\n  companyEmail: 'companyEmail',\n};\n\nconst rowsPerPage = [10, 20, 30];\n\nfunction useData() {\n  const customerId = useAppSelector(({ company }) => company.customer.id);\n  const b2bId = useAppSelector(({ company }) => company.customer.b2bId);\n  const cartNumber = useAppSelector(({ global }) => global.cartNumber);\n  const salesRepCompanyId = Number(\n    useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.id),\n  );\n\n  return { salesRepCompanyId, b2bId, customerId, cartNumber };\n}\n\nfunction Dashboard(props: PageProps) {\n  const showPageMask = usePageMask();\n  const store = useAppStore();\n\n  const { salesRepCompanyId, b2bId, customerId, cartNumber } = useData();\n\n  const { setOpenPage } = props;\n  const b3Lang = useB3Lang();\n\n  const [isRequestLoading, setIsRequestLoading] = useState(false);\n  const [confirmMasquerade, setConfirmMasquerade] = useState<ConfirmState>();\n\n  const [filterData, setFilterData] = useState<ListItem>({\n    q: '',\n    orderBy: sortKeys[defaultSortKey],\n  });\n\n  const [handleSetOrderBy, order, orderBy] = useSort(\n    sortKeys,\n    defaultSortKey,\n    filterData,\n    setFilterData,\n    'asc',\n  );\n\n  const location = useLocation();\n\n  const getSuperAdminCompaniesList: GetRequestList<ListItem, ListItem> = async (params) => {\n    let list = { edges: [], totalCount: 0 };\n    if (typeof b2bId === 'number') {\n      list = (await superAdminCompanies(b2bId, params)).superAdminCompanies;\n    }\n\n    return list;\n  };\n\n  const clearCart = async (cartEntityId: string) => {\n    await deleteCart({ deleteCartInput: { cartEntityId } });\n    Cookies.remove('cartId');\n    store.dispatch(setCartNumber(0));\n  };\n\n  const startActing = async (companyId: number) => {\n    try {\n      setIsRequestLoading(true);\n      if (typeof b2bId === 'number') {\n        await startMasquerade({ customerId, companyId }, store);\n      }\n\n      const cartEntityId = Cookies.get('cartId');\n      if (cartEntityId) {\n        await clearCart(cartEntityId);\n      }\n\n      setOpenPage({\n        isOpen: true,\n        openUrl: '/dashboard',\n      });\n\n      setFilterData({\n        ...filterData,\n      });\n    } finally {\n      setIsRequestLoading(false);\n    }\n  };\n\n  const endActing = async () => {\n    try {\n      showPageMask(true);\n      if (typeof b2bId === 'number') {\n        await endMasquerade(store);\n      }\n\n      const cartEntityId = Cookies.get('cartId');\n      if (cartEntityId) {\n        await clearCart(cartEntityId);\n      }\n\n      setFilterData({\n        ...filterData,\n      });\n    } finally {\n      showPageMask(false);\n    }\n  };\n\n  useEffect(() => {\n    const params = {\n      ...location,\n    };\n    if (params?.state) {\n      endActing();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location]);\n\n  const handleChange = async (q: string) => {\n    setFilterData({\n      ...filterData,\n      q,\n    });\n  };\n\n  const onStartMasquerade = async (companyId: number) => {\n    if (cartNumber > 0) {\n      setConfirmMasquerade({ type: 'start', companyId });\n    } else {\n      await startActing(companyId);\n    }\n  };\n\n  const onEndMasquerade = async () => {\n    if (cartNumber > 0) {\n      setConfirmMasquerade({ type: 'end' });\n    } else {\n      await endActing();\n    }\n  };\n\n  const columnItems: TableColumnItem<ListItem>[] = [\n    {\n      key: 'companyName',\n      title: b3Lang('dashboard.company'),\n      render: ({ companyName, companyId }) => (\n        <CompanyNameCell\n          companyName={companyName}\n          isSelected={Number(companyId) === Number(salesRepCompanyId)}\n        />\n      ),\n      isSortable: true,\n    },\n    {\n      key: 'companyEmail',\n      title: b3Lang('dashboard.email'),\n      isSortable: true,\n    },\n    {\n      key: 'actions',\n      title: b3Lang('dashboard.action'),\n      render: ({ companyId }) => {\n        const isSelected = Number(companyId) === Number(salesRepCompanyId);\n\n        if (isSelected) {\n          return (\n            <ActionMenuCell\n              label={b3Lang('dashboard.endMasqueradeAction')}\n              onClick={() => onEndMasquerade()}\n            />\n          );\n        }\n\n        return (\n          <ActionMenuCell\n            label={b3Lang('dashboard.masqueradeAction')}\n            onClick={() => onStartMasquerade(Number(companyId))}\n          />\n        );\n      },\n    },\n  ];\n\n  return (\n    <B3Spin isSpinning={isRequestLoading}>\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n        }}\n      >\n        <Box\n          sx={{\n            mb: '24px',\n          }}\n        >\n          <B3FilterSearch handleChange={handleChange} />\n        </Box>\n        <B3PaginationTable\n          columnItems={columnItems}\n          rowsPerPageOptions={rowsPerPage}\n          getRequestList={getSuperAdminCompaniesList}\n          searchParams={filterData || {}}\n          isCustomRender={false}\n          requestLoading={setIsRequestLoading}\n          tableKey=\"id\"\n          sortDirection={order}\n          orderBy={orderBy}\n          sortByFn={handleSetOrderBy}\n          renderItem={({ companyName, companyEmail, companyId }) => {\n            const isSelected = Number(companyId) === Number(salesRepCompanyId);\n            const action = isSelected\n              ? {\n                  label: b3Lang('dashboard.endMasqueradeAction'),\n                  onClick: () => onEndMasquerade(),\n                }\n              : {\n                  label: b3Lang('dashboard.masqueradeAction'),\n                  onClick: () => onStartMasquerade(Number(companyId)),\n                };\n\n            return (\n              <DashboardCard\n                companyName={companyName}\n                email={companyEmail}\n                isSelected={isSelected}\n                action={action}\n              />\n            );\n          }}\n        />\n      </Box>\n      <ConfirmMasqueradeDialog\n        title={\n          confirmMasquerade?.type === 'end'\n            ? b3Lang('dashboard.masqueradeModal.title.end')\n            : b3Lang('dashboard.masqueradeModal.title.start')\n        }\n        isOpen={confirmMasquerade !== undefined}\n        isRequestLoading={isRequestLoading}\n        handleClose={() => setConfirmMasquerade(undefined)}\n        handleConfirm={async () => {\n          if (confirmMasquerade?.type === 'start') {\n            await startActing(confirmMasquerade.companyId);\n            setConfirmMasquerade(undefined);\n          } else if (confirmMasquerade?.type === 'end') {\n            await endActing();\n            setConfirmMasquerade(undefined);\n          }\n        }}\n      />\n    </B3Spin>\n  );\n}\n\nexport default Dashboard;\n"],"names":["SelectedBadge","b3Lang","useB3Lang","jsx","Box","DashboardCard","companyName","email","isSelected","action","Card","jsxs","CardContent","Typography","Button","StyledMenu","styled","Menu","ActionMenuCell","label","onClick","ref","useRef","isOpen","setIsOpen","useState","Fragment","IconButton","MoreHorizIcon","MenuItem","CompanyNameCell","defaultSortKey","sortKeys","rowsPerPage","useData","customerId","useAppSelector","company","b2bId","cartNumber","global","b2bFeatures","Dashboard","props","showPageMask","usePageMask","store","useAppStore","salesRepCompanyId","setOpenPage","isRequestLoading","setIsRequestLoading","confirmMasquerade","setConfirmMasquerade","filterData","setFilterData","handleSetOrderBy","order","orderBy","useSort","location","useLocation","getSuperAdminCompaniesList","params","list","superAdminCompanies","clearCart","cartEntityId","deleteCart","Cookies","setCartNumber","startActing","companyId","startMasquerade","endActing","endMasquerade","useEffect","handleChange","q","onStartMasquerade","onEndMasquerade","columnItems","B3Spin","B3FilterSearch","B3PaginationTable","companyEmail","ConfirmMasqueradeDialog"],"mappings":"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"}