{"version":3,"file":"login-legacy-DLfjBroD.js","sources":["../../src/shared/service/bc/graphql/login.ts"],"sourcesContent":["import { platform } from '@/utils';\n\nimport B3Request from '../../request/b3Fetch';\n\ninterface LoginData {\n  loginData: {\n    storeHash: string;\n    email: string;\n    password: string;\n    channelId: number;\n  };\n}\n\ninterface UserLoginResult {\n  login: {\n    result: {\n      token: string;\n      storefrontLoginToken: string;\n      permissions: [\n        {\n          code: string;\n          permissionLevel: number;\n        },\n      ];\n    };\n    errors?: { message: string }[];\n  };\n}\n\nconst getBcLogin = () => `mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    result,\n    customer {\n      entityId,\n      phone,\n      firstName,\n      lastName,\n      email,\n      customerGroupId,\n    }\n  }\n}`;\n\nconst logoutLogin = () => `mutation Logout {\n  logout {\n    result\n  }\n}`;\n\nconst getB2bLogin = `mutation Login($loginData: UserLoginType!) {\n  login(loginData: $loginData) {\n    result{\n      storefrontLoginToken\n      token\n      permissions {\n        code\n        permissionLevel\n      }\n    }\n  }\n}`;\n// customMessage: field used to determine whether to use a custom message\nexport const b2bLogin = (variables: LoginData, customMessage = true): Promise<UserLoginResult> =>\n  B3Request.graphqlB2B(\n    {\n      query: getB2bLogin,\n      variables,\n    },\n    customMessage,\n  );\n\ninterface LoginVariables {\n  email: string;\n  password: string;\n}\n\nexport const bcLogin = (variables: LoginVariables) => {\n  const query = getBcLogin();\n\n  return platform === 'bigcommerce'\n    ? B3Request.graphqlBC({ query, variables })\n    : B3Request.graphqlBCProxy({ query, variables });\n};\n\nexport const bcLogoutLogin = () =>\n  platform === 'bigcommerce'\n    ? B3Request.graphqlBC({\n        query: logoutLogin(),\n      })\n    : B3Request.graphqlBCProxy({\n        query: logoutLogin(),\n      });\n"],"names":["exports","variables","customMessage","B3Request","graphqlB2B","query","platform","graphqlBC","graphqlBCProxy"],"mappings":"yNA8DaA,EAAA,IAAW,CAACC,EAAsBC,GAAgB,IAC7DC,EAAUC,WACR,CACEC,MAhBc,2NAiBdJ,aAEFC,IAQSF,EAAA,IAAWC,IACtB,MAAMI,EAhDiB,2PAkDvB,MAAoB,gBAAbC,EACHH,EAAUI,UAAU,CAAEF,QAAOJ,cAC7BE,EAAUK,eAAe,CAAEH,QAAOJ,gBAG3BD,EAAA,IAAgB,IACd,gBAAbM,EACIH,EAAUI,UAAU,CAClBF,MA5CkB,sDA8CpBF,EAAUK,eAAe,CACvBH,MA/CkB"}