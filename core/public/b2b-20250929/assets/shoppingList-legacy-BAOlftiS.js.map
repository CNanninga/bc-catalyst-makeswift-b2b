{"version":3,"file":"shoppingList-legacy-BAOlftiS.js","sources":["../../src/types/shoppingList.ts","../../src/shared/service/b2b/graphql/shoppingList.ts"],"sourcesContent":["import { Modifiers, ProductItemOption } from './common';\nimport { AllOptionProps, ProductItem, Variant } from './products';\n\nexport interface ShoppingListItem {\n  customerInfo: {\n    firstName: string;\n    lastName: string;\n    userId: string;\n    email: string;\n  };\n  description: string;\n  grandTotal: string;\n  id: string;\n  isOwner: boolean;\n  isShowGrandTotal: boolean;\n  name: string;\n  status: number;\n  totalDiscount: string;\n  totalTax: string;\n}\n\nexport enum ShoppingListStatus {\n  Approved = 0,\n  Deleted = 20,\n  Draft = 30,\n  ReadyForApproval = 40,\n  Rejected = 50,\n}\n\nexport interface ShoppingListProductItem extends ProductItem {\n  options?: ProductItemOption[];\n  optionsV3?: Modifiers[];\n  modifiers?: Modifiers[];\n  costPrice?: string;\n  variants?: Variant[];\n  allOptions?: Partial<AllOptionProps>[];\n  selectOptions?: string;\n  orderQuantityMaximum?: number;\n  orderQuantityMinimum?: number;\n  variantId?: number | string;\n}\n\nexport interface ShoppingListAddProductOption {\n  optionId: string;\n  optionValue: string;\n}\n\nexport interface ShoppingListSelectProductOption {\n  option_id: string;\n  option_value: string;\n  optionId: string;\n  optionValue: string;\n}\n","import { ShoppingListStatus } from '@/types/shoppingList';\nimport { convertArrayToGraphql, convertObjectToGraphql } from '@/utils';\n\nimport B3Request from '../../request/b3Fetch';\n\ninterface ShoppingListParams {\n  id: string | number;\n  sampleShoppingListId: string | number;\n  name: string;\n  description: string;\n  status: number;\n  channelId: number;\n  companyId: number;\n}\n\nconst getStatus = (status: any): string => {\n  if (typeof status === 'number') {\n    // Status code 20 was previously misused as Rejected in the frontend, which is actually Deleted\n    // Now when we want to fetch rejected shopping lists, we need to fetch deleted ones as well\n    if (status === ShoppingListStatus.Rejected) {\n      return `status: [${ShoppingListStatus.Deleted}, ${ShoppingListStatus.Rejected}]`;\n    }\n\n    return `status: ${status}`;\n  }\n  if (typeof status === 'object') {\n    return `status: [${status}]`;\n  }\n  return '';\n};\n\nconst getShoppingList = ({\n  offset = 0,\n  first = 50,\n  status = '',\n  createdBy = '',\n  email = '',\n  search = '',\n  isDefault = true,\n}) => ` query B2BCustomerShoppingLists {\n  shoppingLists (\n    offset: ${offset}\n    first: ${first}\n    search: \"${search}\"\n    createdBy: \"${createdBy}\"\n    email: \"${email}\"\n    ${getStatus(status)}\n    isDefault: ${isDefault}\n  ){\n    totalCount,\n    pageInfo{\n      hasNextPage,\n      hasPreviousPage,\n    },\n    edges{\n      node{\n        id,\n        name,\n        description,\n        status,\n        customerInfo{\n          firstName,\n          lastName,\n          userId,\n          email,\n          role,\n        },\n        updatedAt,\n        isOwner,\n        products {\n          totalCount,\n        }\n        approvedFlag,\n        companyInfo {\n          companyId,\n          companyName,\n          companyAddress,\n          companyCountry,\n          companyState,\n          companyCity,\n          companyZipCode,\n          phoneNumber,\n          bcId,\n        },\n      }\n    }\n  }\n}`;\n\nconst getShoppingListInfo = `shoppingList {\n  id,\n  name,\n  description,\n  status,\n  approvedFlag,\n  customerInfo{\n    firstName,\n    lastName,\n    userId,\n    email,\n  },\n  isOwner,\n  grandTotal,\n  totalDiscount,\n  totalTax,\n  isShowGrandTotal,\n  companyInfo {\n    companyId,\n    companyName,\n    companyAddress,\n    companyCountry,\n    companyState,\n    companyCity,\n    companyZipCode,\n    phoneNumber,\n    bcId,\n  },\n}`;\n\nconst updateShoppingList = (fn: string) => `\n  mutation UpdateB2BShoppingList ($id: Int!, $shoppingListData: ShoppingListsInputType!) {\n    ${fn}(\n      id: $id\n      shoppingListData: $shoppingListData\n    ) {\n      ${getShoppingListInfo}\n    }\n  }\n`;\n\nconst createShoppingList = (fn: string) => `\nmutation CreateShoppingList($shoppingListData: ShoppingListsInputType!){\n  ${fn}(\n    shoppingListData: $shoppingListData\n  ) {\n    ${getShoppingListInfo}\n  }\n}`;\n\nconst updateShoppingListsItem = (data: CustomFieldItems) => `mutation B2BUpdateShoppingListItems {\n  shoppingListsItemsUpdate(\n    itemId: ${data.itemId}\n    shoppingListId: ${data.shoppingListId}\n    itemData: ${convertObjectToGraphql(data.itemData || [])}\n  ) {\n    shoppingListsItem {\n      id,\n      createdAt,\n      updatedAt,\n      productId,\n      variantId,\n      quantity,\n      productName,\n      optionList,\n      itemId,\n      baseSku,\n      variantSku,\n      basePrice,\n      discount,\n      tax,\n      enteredInclusive,\n      productUrl,\n      primaryImage,\n      productNote,\n    }\n  }\n}`;\n\nexport interface CustomerShoppingListB2B {\n  data: {\n    shoppingList: {\n      id: string;\n      createdAt: number;\n      updatedAt: number;\n      name: string;\n      description: string;\n      status: number;\n      reason: string | null;\n      customerInfo: {\n        firstName: string;\n        lastName: string;\n        userId: number;\n        email: string;\n        role: string;\n      };\n      isOwner: boolean;\n      grandTotal: string;\n      totalDiscount: string;\n      totalTax: string;\n      isShowGrandTotal: boolean;\n      channelId: string | null;\n      channelName: string;\n      approvedFlag: boolean;\n      companyInfo: {\n        companyId: string;\n        companyName: string;\n        companyAddress: string;\n        companyCountry: string;\n        companyState: string;\n        companyCity: string;\n        companyZipCode: string;\n        phoneNumber: string;\n        bcId: string;\n      };\n      products: {\n        totalCount: number;\n        edges: Array<{\n          node: {\n            id: string;\n            createdAt: number;\n            updatedAt: number;\n            productId: number;\n            variantId: number;\n            quantity: number;\n            productName: string;\n            optionList: string;\n            itemId: number;\n            baseSku: string;\n            variantSku: string;\n            basePrice: string;\n            discount: string;\n            tax: string;\n            enteredInclusive: boolean;\n            productUrl: string;\n            primaryImage: string;\n            productNote: string;\n          };\n        }>;\n      };\n    };\n  };\n}\n\nconst getShoppingListDetails = (data: CustomFieldItems) => `\n  query B2BShoppingListDetails {\n    shoppingList (\n      id: ${data.id}\n    ) {\n      id,\n      createdAt,\n      updatedAt,\n      name,\n      description,\n      status,\n      reason,\n      customerInfo {\n        firstName,\n        lastName,\n        userId,\n        email,\n        role,\n      },\n      isOwner,\n      grandTotal,\n      totalDiscount,\n      totalTax,\n      isShowGrandTotal,\n      channelId,\n      channelName,\n      approvedFlag,\n      companyInfo {\n        companyId,\n        companyName,\n        companyAddress,\n        companyCountry,\n        companyState,\n        companyCity,\n        companyZipCode,\n        phoneNumber,\n        bcId,\n      },\n      products (\n        offset: ${data.offset || 0}\n        first: ${data.first || 100},\n        search: \"${data.search || ''}\",\n        orderBy: \"${data?.orderBy || '-updatedAt'}\"\n      ) {\n        totalCount,\n        edges {\n          node {\n            id,\n            createdAt,\n            updatedAt,\n            productId,\n            variantId,\n            quantity,\n            productName,\n            optionList,\n            itemId,\n            baseSku,\n            variantSku,\n            basePrice,\n            discount,\n            tax,\n            enteredInclusive,\n            productUrl,\n            primaryImage,\n            productNote,\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst addItemsToShoppingList = (data: CustomFieldItems) => `mutation AddItemsToShoppingList {\n  shoppingListsItemsCreate(\n    shoppingListId: ${data.shoppingListId},\n    items: ${convertArrayToGraphql(data.items || [])}\n  ) {\n    shoppingListsItems {\n      id,\n      createdAt,\n      updatedAt,\n      productId,\n      variantId,\n      quantity,\n      productName,\n      optionList,\n      itemId,\n      baseSku,\n      variantSku,\n      basePrice,\n      discount,\n      tax,\n      enteredInclusive,\n      productUrl,\n      primaryImage,\n    }\n  }\n}`;\n\nconst deleteShoppingListItem = (data: CustomFieldItems) => `mutation {\n  shoppingListsItemsDelete(\n    itemId: ${data.itemId},\n    shoppingListId: ${data.shoppingListId},\n  ) {\n    message,\n  }\n}`;\n\nconst getCustomerShoppingLists = ({\n  offset = 0,\n  first = 50,\n  search = '',\n  channelId = 1,\n}) => `query CustomerShoppingLists {\n  customerShoppingLists (\n    offset: ${offset}\n    first: ${first}\n    search: \"${search}\"\n    channelId: ${channelId}\n  ){\n    totalCount,\n    pageInfo{\n      hasNextPage,\n      hasPreviousPage,\n    },\n    edges{\n      node{\n        id,\n        name,\n        description,\n        updatedAt,\n        products {\n          totalCount,\n        }\n      }\n    }\n  }\n}`;\n\nconst getCustomerShoppingListInfo = `\nshoppingList {\n  id,\n  name,\n  description,\n  grandTotal,\n  totalDiscount,\n  totalTax,\n  isShowGrandTotal,\n}`;\n\nconst updateCustomerShoppingList = (\n  fn: string,\n) => `mutation($id: Int!, $shoppingListData: CustomerShoppingListsInputType!){\n  ${fn}(\n    id: $id\n    shoppingListData: $shoppingListData\n  ) {\n    ${getCustomerShoppingListInfo}\n  }\n}`;\n\nconst createCustomerShoppingList = (\n  fn: string,\n) => `mutation CreateCustomerShoppingList($shoppingListData: CustomerShoppingListsInputType!){\n  ${fn}(\n    shoppingListData: $shoppingListData\n  ) {\n    ${getCustomerShoppingListInfo}\n  }\n}`;\n\nconst getCustomerShoppingListDetails = (data: CustomFieldItems) => `{\n  customerShoppingList (\n    id: ${data.id}\n  ) {\n    id,\n    createdAt,\n    updatedAt,\n    name,\n    description,\n    reason,\n    grandTotal,\n    totalDiscount,\n    totalTax,\n    isShowGrandTotal,\n    channelId,\n    channelName,\n    products (\n      offset: ${data.offset || 0}\n      first: ${data.first || 100},\n      search: \"${data.search || ''}\",\n    ) {\n      totalCount,\n      edges {\n        node {\n          id,\n          createdAt,\n          updatedAt,\n          productId,\n          variantId,\n          quantity,\n          productName,\n          optionList,\n          itemId,\n          baseSku,\n          variantSku,\n          basePrice,\n          discount,\n          tax,\n          enteredInclusive,\n          productUrl,\n          primaryImage,\n          productNote,\n        }\n      }\n    }\n  }\n}`;\n\nconst addItemsToBcShoppingList = (\n  data: CustomFieldItems,\n) => `mutation AddItemsToCustomerShoppingList {\n  customerShoppingListsItemsCreate (\n    shoppingListId: ${data.shoppingListId},\n    items: ${convertArrayToGraphql(data.items || [])}\n  ) {\n    shoppingListsItems {\n      id,\n      createdAt,\n      updatedAt,\n      productId,\n      variantId,\n      quantity,\n      productName,\n      optionList,\n      itemId,\n      baseSku,\n      variantSku,\n      basePrice,\n      discount,\n      tax,\n      enteredInclusive,\n      productUrl,\n      primaryImage,\n    }\n  }\n}`;\n\nconst updateCustomerShoppingListsItem = (data: CustomFieldItems) => `mutation {\n  customerShoppingListsItemsUpdate (\n    itemId: ${data.itemId}\n    shoppingListId: ${data.shoppingListId}\n    itemData: ${convertObjectToGraphql(data.itemData || [])}\n  ) {\n    shoppingListsItem {\n      id,\n      createdAt,\n      updatedAt,\n      productId,\n      variantId,\n      quantity,\n      productName,\n      optionList,\n      itemId,\n      baseSku,\n      variantSku,\n      basePrice,\n      discount,\n      tax,\n      enteredInclusive,\n      productUrl,\n      primaryImage,\n    }\n  }\n}`;\n\nconst deleteCustomerShoppingListItem = (data: CustomFieldItems) => `mutation {\n  customerShoppingListsItemsDelete (\n    itemId: ${data.itemId},\n    shoppingListId: ${data.shoppingListId},\n  ) {\n    message,\n  }\n}`;\n\nconst getJuniorPlaceOrder = () => `{\n  storeConfigSwitchStatus(\n    key: \"junior_place_order\",\n  ) {\n    id,\n    key,\n    isEnabled,\n  }\n}`;\n\nconst getCreatedByUser = (companyId: number, module: number, fn: string) => `\n  query GetShoppingListsCreatedByUser {\n    ${fn}(\n      companyId: ${companyId},\n      module: ${module},\n    ){\n      results,\n    }\n  }\n`;\n\nexport const getB2BShoppingList = (data: CustomFieldItems = {}) =>\n  B3Request.graphqlB2B({\n    query: getShoppingList(data),\n  }).then((res) => res.shoppingLists);\n\nexport const createB2BShoppingList = (data: Partial<ShoppingListParams>) =>\n  B3Request.graphqlB2B({\n    query: createShoppingList('shoppingListsCreate'),\n    variables: {\n      shoppingListData: {\n        companyId: data.companyId,\n        name: data.name,\n        description: data.description,\n        status: data.status,\n      },\n    },\n  });\n\nexport const updateB2BShoppingList = (data: Partial<ShoppingListParams>) =>\n  B3Request.graphqlB2B({\n    query: updateShoppingList('shoppingListsUpdate'),\n    variables: {\n      id: data?.id ? Number(data.id) : 1,\n      shoppingListData: {\n        name: data.name,\n        description: data.description,\n        status: data.status,\n      },\n    },\n  });\n\nexport const getB2BShoppingListDetails = (data: CustomFieldItems = {}) =>\n  B3Request.graphqlB2B({\n    query: getShoppingListDetails(data),\n  }).then((res) => res.shoppingList);\n\nexport const addProductToShoppingList = (data: CustomFieldItems = {}) =>\n  B3Request.graphqlB2B({\n    query: addItemsToShoppingList(data),\n  });\n\nexport const updateB2BShoppingListsItem = (data: CustomFieldItems = {}) =>\n  B3Request.graphqlB2B({\n    query: updateShoppingListsItem(data),\n  });\n\nexport const deleteB2BShoppingListItem = (data: CustomFieldItems = {}) =>\n  B3Request.graphqlB2B({\n    query: deleteShoppingListItem(data),\n  });\n\nexport const getBcShoppingList = (data: CustomFieldItems = {}) =>\n  B3Request.graphqlB2B({\n    query: getCustomerShoppingLists(data),\n  }).then((res) => res.customerShoppingLists);\n\nexport const createBcShoppingList = (data: Partial<ShoppingListParams>) =>\n  B3Request.graphqlB2B({\n    query: createCustomerShoppingList('customerShoppingListsCreate'),\n    variables: {\n      shoppingListData: {\n        name: data.name,\n        description: data.description,\n        channelId: data?.channelId ? Number(data.channelId) : 1,\n      },\n    },\n  });\n\nexport const updateBcShoppingList = (data: Partial<ShoppingListParams>) =>\n  B3Request.graphqlB2B({\n    query: updateCustomerShoppingList('customerShoppingListsUpdate'),\n    variables: {\n      id: data?.id ? Number(data.id) : 1,\n      shoppingListData: {\n        name: data.name,\n        description: data.description,\n        channelId: data?.channelId ? Number(data.channelId) : 1,\n      },\n    },\n  });\n\nexport const getBcShoppingListDetails = (data: CustomFieldItems = {}) =>\n  B3Request.graphqlB2B({\n    query: getCustomerShoppingListDetails(data),\n  }).then((res) => res.customerShoppingList);\n\nexport const addProductToBcShoppingList = (data: CustomFieldItems = {}) =>\n  B3Request.graphqlB2B({\n    query: addItemsToBcShoppingList(data),\n  });\n\nexport const updateBcShoppingListsItem = (data: CustomFieldItems = {}) =>\n  B3Request.graphqlB2B({\n    query: updateCustomerShoppingListsItem(data),\n  });\n\nexport const deleteBcShoppingListItem = (data: CustomFieldItems = {}) =>\n  B3Request.graphqlB2B({\n    query: deleteCustomerShoppingListItem(data),\n  });\n\nexport const getB2BJuniorPlaceOrder = () =>\n  B3Request.graphqlB2B({\n    query: getJuniorPlaceOrder(),\n  });\n\nexport interface ShoppingListsCreatedByUser {\n  data: {\n    createdByUser: {\n      results: {\n        createdBy: {\n          name: string;\n          email: string;\n        }[];\n        salesRep: unknown[];\n      };\n    };\n  };\n}\n\nexport const getShoppingListsCreatedByUser = (companyId: number, module: number) =>\n  B3Request.graphqlB2B({\n    query: getCreatedByUser(companyId, module, 'createdByUser'),\n  });\n"],"names":["ShoppingListStatus","exports","getShoppingList","offset","first","status","createdBy","email","search","isDefault","Rejected","Deleted","getStatus","getShoppingListInfo","updateShoppingListsItem","data","itemId","shoppingListId","convertObjectToGraphql","itemData","getShoppingListDetails","id","orderBy","addItemsToShoppingList","convertArrayToGraphql","items","deleteShoppingListItem","getCustomerShoppingLists","channelId","getCustomerShoppingListInfo","getCustomerShoppingListDetails","addItemsToBcShoppingList","updateCustomerShoppingListsItem","deleteCustomerShoppingListItem","getCreatedByUser","companyId","module","fn","B3Request","graphqlB2B","query","then","res","shoppingLists","variables","shoppingListData","name","description","Number","shoppingList","customerShoppingLists","customerShoppingList"],"mappings":"mOAqBO,IAAKA,EAAAC,EAAA,KAAAD,IACVA,EAAAA,WAAW,GAAX,WACAA,EAAAA,UAAU,IAAV,UACAA,EAAAA,QAAQ,IAAR,QACAA,EAAAA,mBAAmB,IAAnB,mBACAA,EAAAA,WAAW,IAAX,WALUA,IAAAA,GAAA,CAAA,ICNZ,MAgBME,EAAkBA,EACtBC,SAAS,EACTC,QAAQ,GACRC,SAAS,GACTC,YAAY,GACZC,QAAQ,GACRC,SAAS,GACTC,aAAY,KACR,qEAEQN,iBACDC,mBACEI,uBACGF,mBACJC,WA9BKF,IACK,iBAAXA,EAGLA,IAAWL,EAAmBU,SACzB,YAAYV,EAAmBW,YAAYX,EAAmBU,YAGhE,WAAWL,IAEE,iBAAXA,EACF,YAAYA,KAEd,GAkBHO,CAAUP,sBACCI,qsBA0CXI,EAAsB,waAkDtBC,EAA2BC,GAA2B,mFAE9CA,EAAKC,+BACGD,EAAKE,iCACXC,EAAuBH,EAAKI,UAAY,sXA0FlDC,EAA0BL,GAA2B,qEAG/CA,EAAKM,2pBAoCCN,EAAKZ,QAAU,qBAChBY,EAAKX,OAAS,0BACZW,EAAKP,QAAU,2BACdO,GAAMO,SAAW,+iBA8B/BC,EAA0BR,GAA2B,uFAErCA,EAAKE,+BACdO,EAAsBT,EAAKU,OAAS,mWAwB3CC,EAA0BX,GAA2B,wDAE7CA,EAAKC,gCACGD,EAAKE,+CAMrBU,EAA2BA,EAC/BxB,SAAS,EACTC,QAAQ,GACRI,SAAS,GACToB,YAAY,KACR,yEAEQzB,iBACDC,mBACEI,sBACEoB,2QAqBXC,EAA8B,yHAgC9BC,EAAkCf,GAA2B,wCAEzDA,EAAKM,4OAeCN,EAAKZ,QAAU,mBAChBY,EAAKX,OAAS,wBACZW,EAAKP,QAAU,8eA6B1BuB,EACJhB,GACG,wGAEiBA,EAAKE,+BACdO,EAAsBT,EAAKU,OAAS,mWAwB3CO,EAAmCjB,GAA2B,iEAEtDA,EAAKC,+BACGD,EAAKE,iCACXC,EAAuBH,EAAKI,UAAY,kWAwBlDc,EAAkClB,GAA2B,iEAErDA,EAAKC,gCACGD,EAAKE,+CAgBrBiB,EAAmBA,CAACC,EAAmBC,EAAgBC,IAAe,kDAEtEA,wBACaF,qBACHC,iDAOkB,CAACrB,EAAyB,KAC1DuB,EAAUC,WAAW,CACnBC,MAAOtC,EAAgBa,KACtB0B,KAAMC,GAAQA,EAAIC,sBAEe5B,IACpCuB,SAAUC,WAAW,CACnBC,OAhawBH,EAgaE,sBAhaa,iFAEvCA,2DAGExB,aA4ZF+B,UAAW,CACTC,iBAAkB,CAChBV,UAAWpB,EAAKoB,UAChBW,KAAM/B,EAAK+B,KACXC,YAAahC,EAAKgC,YAClB1C,OAAQU,EAAKV,WAtaOgC,cA2aUtB,IACpCuB,SAAUC,WAAW,CACnBC,OAxbwBH,EAwbE,sBAxba,qGAErCA,gFAIExB,mBAmbJ+B,UAAW,CACTvB,GAAIN,GAAMM,GAAK2B,OAAOjC,EAAKM,IAAM,EACjCwB,iBAAkB,CAChBC,KAAM/B,EAAK+B,KACXC,YAAahC,EAAKgC,YAClB1C,OAAQU,EAAKV,WA9bOgC,cAmca,CAACtB,EAAyB,KACjEuB,EAAUC,WAAW,CACnBC,MAAOpB,EAAuBL,KAC7B0B,KAAMC,GAAQA,EAAIO,qBAEiB,CAAClC,EAAyB,KAChEuB,EAAUC,WAAW,CACnBC,MAAOjB,EAAuBR,YAGQ,CAACA,EAAyB,KAClEuB,EAAUC,WAAW,CACnBC,MAAO1B,EAAwBC,YAGM,CAACA,EAAyB,KACjEuB,EAAUC,WAAW,CACnBC,MAAOd,EAAuBX,YAGD,CAACA,EAAyB,KACzDuB,EAAUC,WAAW,CACnBC,MAAOb,EAAyBZ,KAC/B0B,KAAMC,GAAQA,EAAIQ,8BAEcnC,IACnCuB,SAAUC,WAAW,CACnBC,OA1MFH,EA0MoC,8BAzMjC,+FACDA,2DAGER,aAsMFe,UAAW,CACTC,iBAAkB,CAChBC,KAAM/B,EAAK+B,KACXC,YAAahC,EAAKgC,YAClBnB,UAAWb,GAAMa,UAAYoB,OAAOjC,EAAKa,WAAa,MA/M5DS,cAoNmCtB,IACnCuB,SAAUC,WAAW,CACnBC,OAjOFH,EAiOoC,8BAhOjC,+EACDA,wEAIER,aA4NFe,UAAW,CACTvB,GAAIN,GAAMM,GAAK2B,OAAOjC,EAAKM,IAAM,EACjCwB,iBAAkB,CAChBC,KAAM/B,EAAK+B,KACXC,YAAahC,EAAKgC,YAClBnB,UAAWb,GAAMa,UAAYoB,OAAOjC,EAAKa,WAAa,MAvO5DS,cA4OsC,CAACtB,EAAyB,KAChEuB,EAAUC,WAAW,CACnBC,MAAOV,EAA+Bf,KACrC0B,KAAMC,GAAQA,EAAIS,6BAEmB,CAACpC,EAAyB,KAClEuB,EAAUC,WAAW,CACnBC,MAAOT,EAAyBhB,YAGK,CAACA,EAAyB,KACjEuB,EAAUC,WAAW,CACnBC,MAAOR,EAAgCjB,YAGH,CAACA,EAAyB,KAChEuB,EAAUC,WAAW,CACnBC,MAAOP,EAA+BlB,MAG7Bd,EAAA,IAAyB,IACpCqC,EAAUC,WAAW,CACnBC,MA5H8B,qHA6IrBvC,EAAA,IAAgC,CAACkC,EAAmBC,IAC/DE,EAAUC,WAAW,CACnBC,MAAON,EAAiBC,EAAWC,EAAQ"}