{"version":3,"file":"index-legacy-BlrsHvc3.js","sources":["../../src/pages/Login/component/LoginWidget.tsx","../../src/pages/Login/index.tsx","../../src/pages/Login/CatalystLogin.tsx","../../src/pages/Login/LoginForm.tsx","../../src/pages/Login/LoginPanel.tsx","../../src/pages/Login/useLogout.tsx"],"sourcesContent":["import { Box, SxProps } from '@mui/material';\n\ninterface LoginWidgetProps {\n  sx: SxProps;\n  html: string;\n}\n\nfunction LoginWidget(props: LoginWidgetProps) {\n  const { html, sx } = props;\n\n  return (\n    <Box\n      sx={{\n        ...sx,\n      }}\n      dangerouslySetInnerHTML={{\n        __html: html,\n      }}\n    />\n  );\n}\n\nexport default LoginWidget;\n","import { useContext, useEffect, useState } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { Alert, Box, ImageListItem } from '@mui/material';\n\nimport b2bLogo from '@/assets/b2bLogo.png';\nimport { B3Card } from '@/components';\nimport B3Spin from '@/components/spin/B3Spin';\nimport { CHECKOUT_URL, PATH_ROUTES } from '@/constants';\nimport { dispatchEvent, useMobile } from '@/hooks';\nimport { useB3Lang } from '@/lib/lang';\nimport { CustomStyleContext } from '@/shared/customStyleButton';\nimport { defaultCreateAccountPanel } from '@/shared/customStyleButton/context/config';\nimport { GlobalContext } from '@/shared/global';\nimport { getBCForcePasswordReset } from '@/shared/service/b2b';\nimport { b2bLogin, bcLogin, customerLoginAPI } from '@/shared/service/bc';\nimport { isLoggedInSelector, useAppDispatch, useAppSelector } from '@/store';\nimport { setB2BToken } from '@/store/slices/company';\nimport { CustomerRole, UserTypes } from '@/types';\nimport { LoginFlagType } from '@/types/login';\nimport { b2bJumpPath, channelId, loginJump, platform, snackbar, storeHash } from '@/utils';\nimport b2bLogger from '@/utils/b3Logger';\nimport { getAssetUrl } from '@/utils/getAssetUrl';\nimport { getCurrentCustomerInfo } from '@/utils/loginInfo';\n\nimport { type PageProps } from '../PageProps';\n\nimport LoginWidget from './component/LoginWidget';\nimport { CatalystLogin } from './CatalystLogin';\nimport { isLoginFlagType, loginCheckout, LoginConfig, loginType } from './config';\nimport LoginForm from './LoginForm';\nimport LoginPanel from './LoginPanel';\nimport { LoginContainer, LoginImage } from './styled';\nimport { useLogout } from './useLogout';\n\nconst errorMap: Record<string, string> = {\n  'Your business account is pending approval. You will gain access to business account features, products, and pricing after account approval.':\n    'global.statusNotifications.willGainAccessToBusinessFeatProductsAndPricingAfterApproval',\n  'Your business account is pending approval. Products, pricing, and ordering will be enabled after account approval.':\n    'global.statusNotifications.productsPricingAndOrderingWillBeEnabledAfterApproval',\n  'Your business account is pending approval. You will gain access to business account features after account approval.':\n    'global.statusNotifications.willGainAccessToBusinessFeatAfterApproval',\n};\n\nfunction Login(props: PageProps) {\n  const { setOpenPage } = props;\n  const storeDispatch = useAppDispatch();\n  const logout = useLogout();\n\n  const isLoggedIn = useAppSelector(isLoggedInSelector);\n\n  const quoteDetailToCheckoutUrl = useAppSelector(\n    ({ quoteInfo }) => quoteInfo.quoteDetailToCheckoutUrl,\n  );\n\n  const [isLoading, setLoading] = useState(true);\n  const [isMobile] = useMobile();\n\n  const [showTipInfo, setShowTipInfo] = useState<boolean>(true);\n  const [flag, setLoginFlag] = useState<LoginFlagType>();\n  const [loginAccount, setLoginAccount] = useState<LoginConfig>({\n    email: '',\n    password: '',\n  });\n  const navigate = useNavigate();\n  const b3Lang = useB3Lang();\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const {\n    state: { isCheckout, logo, registerEnabled },\n  } = useContext(GlobalContext);\n\n  const {\n    state: {\n      loginPageButton,\n      loginPageDisplay,\n      loginPageHtml,\n      portalStyle: { backgroundColor = 'FEF9F5' },\n    },\n  } = useContext(CustomStyleContext);\n\n  const { createAccountButtonText, primaryButtonColor, signInButtonText } = loginPageButton;\n  const { displayStoreLogo, pageTitle } = loginPageDisplay;\n\n  const {\n    bottomHtmlRegionEnabled,\n    bottomHtmlRegionHtml,\n    createAccountPanelHtml,\n    topHtmlRegionEnabled,\n    topHtmlRegionHtml,\n  } = loginPageHtml;\n\n  const loginInfo = {\n    loginTitle: pageTitle || b3Lang('login.button.signIn'),\n    loginBtn: signInButtonText || b3Lang('login.button.signInUppercase'),\n    createAccountButtonText: createAccountButtonText || b3Lang('login.button.createAccount'),\n    btnColor: primaryButtonColor || '',\n    widgetHeadText: topHtmlRegionEnabled ? topHtmlRegionHtml : undefined,\n    widgetBodyText: createAccountPanelHtml || defaultCreateAccountPanel,\n    widgetFooterText: bottomHtmlRegionEnabled ? bottomHtmlRegionHtml : undefined,\n    logo: displayStoreLogo ? logo : undefined,\n  };\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const loginFlag = searchParams.get('loginFlag');\n        const showTipInfo = searchParams.get('showTip') !== 'false';\n\n        setShowTipInfo(showTipInfo);\n\n        if (isLoginFlagType(loginFlag)) {\n          setLoginFlag(loginFlag);\n        }\n\n        if (loginFlag === 'invoiceErrorTip') {\n          const { tip } = loginType[loginFlag];\n          snackbar.error(b3Lang(tip));\n        }\n\n        if (loginFlag === 'loggedOutLogin' && isLoggedIn) {\n          await logout();\n        }\n\n        setLoading(false);\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, [b3Lang, isLoggedIn, logout, searchParams]);\n\n  const tipInfo = (loginFlag: LoginFlagType, email = '') => {\n    const { tip, alertType } = loginType[loginFlag];\n\n    return {\n      message: b3Lang(tip, { email }),\n      severity: alertType,\n    };\n  };\n\n  const getForcePasswordReset = async (email: string) => {\n    const forcePasswordReset = await getBCForcePasswordReset(email);\n\n    if (forcePasswordReset) {\n      setLoginFlag('resetPassword');\n    } else {\n      setLoginFlag('accountIncorrect');\n    }\n  };\n\n  const forcePasswordReset = async (email: string, password: string) => {\n    const { errors: bcErrors } = await bcLogin({ email, password });\n\n    if (bcErrors?.[0]) {\n      const { message } = bcErrors[0];\n\n      if (message === 'Reset password') {\n        getForcePasswordReset(email);\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  const handleLoginSubmit = async (data: LoginConfig) => {\n    setLoading(true);\n    setLoginAccount(data);\n    setSearchParams((prevURLSearchParams) => {\n      prevURLSearchParams.delete('loginFlag');\n      return prevURLSearchParams;\n    });\n\n    if (isCheckout) {\n      try {\n        const response = await loginCheckout(data);\n\n        if (response.status === 400 && response.type === 'reset_password_before_login') {\n          setLoginFlag('resetPassword');\n        } else if (response.type === 'invalid_login') {\n          setLoginFlag('accountIncorrect');\n        } else {\n          window.location.href = CHECKOUT_URL;\n        }\n      } catch (error) {\n        b2bLogger.error(error);\n        await getForcePasswordReset(data.email);\n      } finally {\n        setLoading(false);\n      }\n    } else {\n      try {\n        const loginData = {\n          email: data.email,\n          password: data.password,\n          storeHash,\n          channelId,\n        };\n\n        const isForcePasswordReset = await forcePasswordReset(data.email, data.password);\n        if (isForcePasswordReset) return;\n\n        const {\n          login: {\n            result: { token, storefrontLoginToken },\n            errors,\n          },\n        } = await b2bLogin({ loginData });\n\n        storeDispatch(setB2BToken(token));\n        customerLoginAPI(storefrontLoginToken);\n\n        dispatchEvent('on-login', { storefrontToken: storefrontLoginToken });\n\n        if (errors?.[0] || !token) {\n          if (errors?.[0]) {\n            const { message } = errors[0];\n            if (message === 'Operation cannot be performed as the storefront channel is not live') {\n              setLoginFlag('accountPrelaunch');\n              setLoading(false);\n              return;\n            }\n          }\n          getForcePasswordReset(data.email);\n        } else {\n          const info = await getCurrentCustomerInfo(token);\n\n          if (quoteDetailToCheckoutUrl) {\n            navigate(quoteDetailToCheckoutUrl);\n            return;\n          }\n\n          if (\n            info?.userType === UserTypes.MULTIPLE_B2C &&\n            info?.role === CustomerRole.SUPER_ADMIN\n          ) {\n            navigate('/dashboard');\n            return;\n          }\n          const isLoginLandLocation = loginJump(navigate);\n\n          if (!isLoginLandLocation) return;\n\n          if (info?.userType === UserTypes.B2C) {\n            navigate(PATH_ROUTES.ORDERS);\n          }\n\n          const path = b2bJumpPath(Number(info?.role));\n\n          navigate(path);\n        }\n      } catch (error: unknown) {\n        if (error instanceof Error) {\n          const i18nKey = errorMap[error.message];\n          if (i18nKey) {\n            snackbar.error(b3Lang(i18nKey));\n            await logout(false);\n          } else {\n            snackbar.error(b3Lang('login.loginTipInfo.accountIncorrect'));\n          }\n        }\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n\n  const loginAndRegisterContainerWidth = registerEnabled ? '100%' : '50%';\n  const loginContainerWidth = registerEnabled ? '50%' : 'auto';\n\n  const tip = flag && tipInfo(flag, loginAccount?.email);\n\n  return (\n    <B3Card setOpenPage={setOpenPage}>\n      <LoginContainer paddings={isMobile ? '0' : '20px 20px'}>\n        <B3Spin isSpinning={isLoading} tip={b3Lang('global.tips.loading')} background=\"transparent\">\n          <Box\n            sx={{\n              display: 'flex',\n              flexDirection: 'column',\n              width: '100%',\n              minHeight: '400px',\n              minWidth: '343px',\n            }}\n          >\n            {loginInfo && (\n              <>\n                {flag && showTipInfo && (\n                  <Box\n                    sx={{\n                      padding: isMobile ? 0 : '0 5%',\n                      margin: '30px 0 0 0',\n                    }}\n                  >\n                    {tip && (\n                      <Alert severity={tip.severity} variant=\"filled\">\n                        {tip.message}\n                      </Alert>\n                    )}\n                  </Box>\n                )}\n                {quoteDetailToCheckoutUrl && (\n                  <Alert severity=\"error\" variant=\"filled\">\n                    {b3Lang('login.loginText.quoteDetailToCheckoutUrl')}\n                  </Alert>\n                )}\n                <Box sx={{ margin: '20px 0', minHeight: '150px' }}>\n                  <LoginImage>\n                    <ImageListItem\n                      sx={{\n                        maxWidth: isMobile ? '70%' : '250px',\n                      }}\n                      onClick={() => {\n                        window.location.href = '/';\n                      }}\n                    >\n                      <img\n                        src={loginInfo.logo || getAssetUrl(b2bLogo)}\n                        alt={b3Lang('login.registerLogo')}\n                        loading=\"lazy\"\n                      />\n                    </ImageListItem>\n                  </LoginImage>\n                </Box>\n                {loginInfo.widgetHeadText && (\n                  <LoginWidget\n                    sx={{\n                      minHeight: '48px',\n                      width: registerEnabled || isMobile ? '100%' : '50%',\n                    }}\n                    html={loginInfo.widgetHeadText}\n                  />\n                )}\n                <Box\n                  sx={{\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    flexDirection: 'column',\n                  }}\n                >\n                  <Box\n                    sx={{\n                      bgcolor: '#FFFFFF',\n                      borderRadius: '4px',\n                      margin: '20px 0',\n                      display: 'flex',\n                      flexDirection: 'column',\n                      justifyContent: 'center',\n                      width: isMobile ? 'auto' : loginAndRegisterContainerWidth,\n                    }}\n                  >\n                    <Box\n                      sx={{\n                        mb: '20px',\n                        display: 'flex',\n                        flexDirection: isMobile ? 'column' : 'row',\n                        justifyContent: 'center',\n                        width: isMobile ? 'auto' : '100%',\n                      }}\n                    >\n                      <Box\n                        sx={{\n                          width: isMobile ? 'auto' : loginContainerWidth,\n                          paddingRight: isMobile ? 0 : '2%',\n                          ml: '16px',\n                          mr: isMobile ? '16px' : '',\n                          pb: registerEnabled ? '' : '36px',\n                        }}\n                      >\n                        <LoginForm\n                          loginBtn={loginInfo.loginBtn}\n                          handleLoginSubmit={handleLoginSubmit}\n                          backgroundColor={backgroundColor}\n                        />\n                      </Box>\n\n                      {registerEnabled && (\n                        <Box\n                          sx={{\n                            flex: '1',\n                            paddingLeft: isMobile ? 0 : '2%',\n                          }}\n                        >\n                          <LoginPanel\n                            createAccountButtonText={loginInfo.createAccountButtonText}\n                            widgetBodyText={loginInfo.widgetBodyText}\n                          />\n                        </Box>\n                      )}\n                    </Box>\n                  </Box>\n                </Box>\n                {loginInfo.widgetFooterText && (\n                  <LoginWidget\n                    sx={{\n                      minHeight: '48px',\n                      width: registerEnabled || isMobile ? '100%' : '50%',\n                    }}\n                    html={loginInfo.widgetFooterText}\n                  />\n                )}\n              </>\n            )}\n          </Box>\n        </B3Spin>\n      </LoginContainer>\n    </B3Card>\n  );\n}\n\nexport default function LoginPage(props: PageProps) {\n  if (platform === 'catalyst') {\n    return <CatalystLogin />;\n  }\n\n  return <Login {...props} />;\n}\n","import { useCallback, useEffect } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\n\nimport { Loading } from '@/components';\nimport { endUserMasqueradingCompany, superAdminEndMasquerade } from '@/shared/service/b2b';\nimport { bcLogoutLogin } from '@/shared/service/bc';\nimport { isLoggedInSelector, store, useAppSelector } from '@/store';\nimport { clearCompanySlice } from '@/store/slices/company';\n\nconst logout = () => {\n  return bcLogoutLogin().then((res) => {\n    if (res.data.logout.result !== 'success') {\n      throw new Error('Failed to logout');\n    }\n  });\n};\n\nconst useEndMasquerade = () => {\n  const isAgenting = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.isAgenting);\n  const salesRepCompanyId = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.id);\n\n  return useCallback(async () => {\n    if (isAgenting) {\n      superAdminEndMasquerade(Number(salesRepCompanyId));\n    }\n  }, [isAgenting, salesRepCompanyId]);\n};\n\nconst useEndCompanyMasquerade = () => {\n  const { selectCompanyHierarchyId } = useAppSelector(\n    ({ company }) => company.companyHierarchyInfo,\n  );\n\n  return useCallback(async () => {\n    if (selectCompanyHierarchyId) {\n      await endUserMasqueradingCompany();\n    }\n  }, [selectCompanyHierarchyId]);\n};\n\nexport function CatalystLogin() {\n  const navigate = useNavigate();\n  const endMasquerade = useEndMasquerade();\n  const endCompanyMasquerading = useEndCompanyMasquerade();\n  const isLoggedIn = useAppSelector(isLoggedInSelector);\n  const B2BToken = useAppSelector(({ company }) => company.tokens.B2BToken);\n  const [searchParams] = useSearchParams();\n\n  const loginFlag = searchParams.get('loginFlag');\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      window.location.href = '/login';\n    }, 3000);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [B2BToken]);\n\n  useEffect(() => {\n    if (loginFlag === 'loggedOutLogin' || !B2BToken) {\n      Promise.all([logout(), endMasquerade(), endCompanyMasquerading()])\n        .catch(() => {\n          navigate('/orders');\n        })\n        .then(() => {\n          window.sessionStorage.clear();\n          store.dispatch(clearCompanySlice());\n          window.b2b.callbacks.dispatchEvent('on-logout');\n        });\n    } else if (isLoggedIn) {\n      navigate('/orders');\n    }\n  }, [endCompanyMasquerading, endMasquerade, isLoggedIn, loginFlag, navigate, B2BToken]);\n\n  return <Loading />;\n}\n","import { SubmitHandler, useForm } from 'react-hook-form';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { Box, Button, Link, Typography, useTheme } from '@mui/material';\n\nimport { B3CustomForm } from '@/components';\nimport { getContrastColor } from '@/components/outSideComponents/utils/b3CustomStyles';\nimport { useB3Lang } from '@/lib/lang';\n\nimport { getLoginFields, LoginConfig } from './config';\n\ninterface LoginFormProps {\n  loginBtn: string;\n  handleLoginSubmit: (data: LoginConfig) => void;\n  backgroundColor: string;\n}\n\nfunction LoginForm(props: LoginFormProps) {\n  const { loginBtn, handleLoginSubmit, backgroundColor } = props;\n\n  const b3Lang = useB3Lang();\n  const theme = useTheme();\n\n  const {\n    control,\n    handleSubmit,\n    getValues,\n    formState: { errors },\n    setValue,\n  } = useForm<LoginConfig>({\n    mode: 'onSubmit',\n  });\n\n  const handleLoginClick: SubmitHandler<LoginConfig> = (data) => {\n    handleLoginSubmit(data);\n  };\n\n  const loginFields = getLoginFields(b3Lang, handleSubmit(handleLoginClick));\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <Typography\n        variant=\"h5\"\n        sx={{\n          margin: '20px 0',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        {b3Lang('login.loginText.signInHeader')}\n      </Typography>\n      <Box\n        sx={{\n          width: '100%',\n          '& input': {\n            bgcolor: '#F5F5F5',\n            borderRadius: '4px',\n            borderBottomLeftRadius: '0',\n            borderBottomRightRadius: '0',\n          },\n        }}\n      >\n        <form onSubmit={handleSubmit(handleLoginClick)}>\n          <B3CustomForm\n            formFields={loginFields}\n            errors={errors}\n            control={control}\n            getValues={getValues}\n            setValue={setValue}\n          />\n          <Box\n            sx={{\n              display: 'flex',\n              justifyContent: 'flex-start ',\n              alignItems: 'center',\n              mt: 2,\n              gap: 2,\n            }}\n          >\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              sx={{\n                backgroundColor: theme.palette.primary.main,\n              }}\n            >\n              {loginBtn}\n            </Button>\n            <Link\n              component={RouterLink}\n              color={getContrastColor(backgroundColor)}\n              to=\"/forgotPassword\"\n            >\n              {b3Lang('login.loginText.forgotPasswordText')}\n            </Link>\n          </Box>\n        </form>\n      </Box>\n    </Box>\n  );\n}\n\nexport default LoginForm;\n","import { Link } from 'react-router-dom';\nimport { Box, Button, useTheme } from '@mui/material';\n\nimport { useMobile } from '@/hooks';\n\nimport LoginWidget from './component/LoginWidget';\n\ninterface LoginPanelProps {\n  widgetBodyText: string;\n  createAccountButtonText: string;\n}\n\nfunction LoginPanel(props: LoginPanelProps) {\n  const { widgetBodyText, createAccountButtonText } = props;\n\n  const theme = useTheme();\n  const [isMobile] = useMobile();\n\n  return (\n    <Box\n      sx={{\n        padding: isMobile ? '16px' : '20px',\n        borderRadius: '4px',\n        mt: isMobile ? '0' : '-25px',\n      }}\n    >\n      <LoginWidget\n        sx={{\n          minHeight: '250px',\n          '& .panel': {\n            '.panel-title': {\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'center',\n              alignItems: 'center',\n              fontWeight: 400,\n              fontSize: '24px',\n            },\n          },\n        }}\n        html={widgetBodyText}\n      />\n      <Box\n        sx={{\n          marginTop: '5px',\n        }}\n      >\n        <Button\n          component={Link}\n          to=\"/register\"\n          variant=\"contained\"\n          sx={{\n            ml: isMobile ? 0 : 1,\n            backgroundColor: theme.palette.primary.main,\n          }}\n        >\n          {createAccountButtonText}\n        </Button>\n      </Box>\n    </Box>\n  );\n}\n\nexport default LoginPanel;\n","import { useCallback } from 'react';\n\nimport { dispatchEvent } from '@/hooks';\nimport { endUserMasqueradingCompany, superAdminEndMasquerade } from '@/shared/service/b2b';\nimport { bcLogoutLogin } from '@/shared/service/bc';\nimport { clearMasqueradeCompany, useAppDispatch, useAppSelector } from '@/store';\nimport b2bLogger from '@/utils/b3Logger';\nimport { logoutSession } from '@/utils/b3logout';\n\nconst useEndMasquerade = () => {\n  const isMasquerading = useAppSelector(\n    ({ b2bFeatures }) => b2bFeatures.masqueradeCompany.isAgenting,\n  );\n  const salesRepCompanyId = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.id);\n  const storeDispatch = useAppDispatch();\n\n  return useCallback(async () => {\n    if (isMasquerading) {\n      await superAdminEndMasquerade(Number(salesRepCompanyId));\n      storeDispatch(clearMasqueradeCompany());\n    }\n  }, [salesRepCompanyId, storeDispatch, isMasquerading]);\n};\n\nconst useEndCompanyMasquerading = () => {\n  const { selectCompanyHierarchyId } = useAppSelector(\n    ({ company }) => company.companyHierarchyInfo,\n  );\n\n  return useCallback(async () => {\n    if (selectCompanyHierarchyId) {\n      await endUserMasqueradingCompany();\n    }\n  }, [selectCompanyHierarchyId]);\n};\n\nexport const useLogout = () => {\n  const endMasquerade = useEndMasquerade();\n  const endCompanyMasquerading = useEndCompanyMasquerading();\n\n  return async (showLogoutBanner: boolean = true) => {\n    try {\n      const { result } = (await bcLogoutLogin()).data.logout;\n\n      if (result !== 'success') {\n        return;\n      }\n\n      await Promise.all([endCompanyMasquerading(), endMasquerade()]);\n    } catch (e) {\n      b2bLogger.error(e);\n    } finally {\n      // SUP-1282 Clear sessionStorage to allow visitors to display the checkout page\n      window.sessionStorage.clear();\n      logoutSession();\n      if (showLogoutBanner) {\n        dispatchEvent('on-logout');\n      }\n    }\n  };\n};\n"],"names":["LoginWidget","props","html","sx","jsx","Box","dangerouslySetInnerHTML","__html","platform","CatalystLogin","Login","logout","bcLogoutLogin","then","res","data","result","Error","useEndMasquerade","useEndMasquerade$1","isAgenting","useAppSelector","b2bFeatures","masqueradeCompany","salesRepCompanyId","id","useCallback","async","superAdminEndMasquerade","Number","useEndCompanyMasquerade","selectCompanyHierarchyId","company","companyHierarchyInfo","endUserMasqueradingCompany","navigate","useNavigate","endMasquerade","endCompanyMasquerading","isLoggedIn","isLoggedInSelector","B2BToken","tokens","searchParams","useSearchParams","loginFlag","get","useEffect","timeout","setTimeout","window","location","href","clearTimeout","Promise","all","catch","sessionStorage","clear","store","dispatch","clearCompanySlice","b2b","callbacks","dispatchEvent","Loading","LoginForm","loginBtn","handleLoginSubmit","backgroundColor","b3Lang","useB3Lang","theme","useTheme","control","handleSubmit","getValues","formState","errors","setValue","useForm","mode","handleLoginClick","loginFields","getLoginFields","jsxs","display","flexDirection","children","Typography","variant","margin","justifyContent","alignItems","width","bgcolor","borderRadius","borderBottomLeftRadius","borderBottomRightRadius","onSubmit","B3CustomForm","formFields","mt","gap","Button","type","palette","primary","main","Link","component","RouterLink","color","getContrastColor","to","LoginPanel","widgetBodyText","createAccountButtonText","isMobile","useMobile","padding","minHeight","fontWeight","fontSize","marginTop","ml","useLogout","isMasquerading","storeDispatch","useAppDispatch","clearMasqueradeCompany","useEndCompanyMasquerading","showLogoutBanner","e","b2bLogger","error","logoutSession","errorMap","setOpenPage","quoteDetailToCheckoutUrl","quoteInfo","isLoading","setLoading","useState","showTipInfo","setShowTipInfo","flag","setLoginFlag","loginAccount","setLoginAccount","email","password","setSearchParams","state","isCheckout","logo","registerEnabled","useContext","GlobalContext","loginPageButton","loginPageDisplay","loginPageHtml","portalStyle","CustomStyleContext","primaryButtonColor","signInButtonText","displayStoreLogo","pageTitle","bottomHtmlRegionEnabled","bottomHtmlRegionHtml","createAccountPanelHtml","topHtmlRegionEnabled","topHtmlRegionHtml","loginInfo","loginTitle","btnColor","widgetHeadText","defaultCreateAccountPanel","widgetFooterText","isLoginFlagType","tip","loginType","snackbar","getForcePasswordReset","forcePasswordReset","getBCForcePasswordReset","loginAndRegisterContainerWidth","loginContainerWidth","tipInfo","alertType","message","severity","B3Card","LoginContainer","paddings","B3Spin","isSpinning","background","minWidth","Fragment","Alert","LoginImage","ImageListItem","maxWidth","onClick","src","getAssetUrl","b2bLogo","alt","loading","mb","paddingRight","mr","pb","prevURLSearchParams","delete","response","loginCheckout","status","CHECKOUT_URL","loginData","storeHash","channelId","bcErrors","bcLogin","login","token","storefrontLoginToken","b2bLogin","setB2BToken","customerLoginAPI","storefrontToken","info","getCurrentCustomerInfo","userType","UserTypes","MULTIPLE_B2C","role","CustomerRole","SUPER_ADMIN","loginJump","B2C","PATH_ROUTES","ORDERS","path","b2bJumpPath","i18nKey","flex","paddingLeft"],"mappings":"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"}