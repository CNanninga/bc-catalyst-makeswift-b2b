{"version":3,"file":"index--jPzRYTu.js","sources":["../../src/shared/service/b2b/graphql/accountSetting.ts","../../src/pages/AccountSetting/config.ts","../../src/pages/AccountSetting/UpgradeBanner.tsx","../../src/pages/AccountSetting/utils.ts","../../src/pages/AccountSetting/index.tsx"],"sourcesContent":["import { convertObjectToGraphql } from '../../../../utils';\nimport B3Request from '../../request/b3Fetch';\n\nconst updateAccountSettings = (data: CustomFieldItems) => `mutation{\n  updateAccountSettings (\n    updateData: ${convertObjectToGraphql(data)}\n  ){\n    result {\n      email\n    },\n  }\n}`;\n\nconst updateCustomerAccountSettings = (data: CustomFieldItems) => `mutation{\n  updateCustomerAccountSettings (\n    updateData: ${convertObjectToGraphql(data)}\n  ){\n    result {\n      email\n    },\n  }\n}`;\n\nconst getAccountSettings = (data: CustomFieldItems) => `query GetB2bAccountSettings {\n  accountSettings (\n    companyId: ${data.companyId}\n  ){\n    firstName,\n    lastName,\n    company,\n    phoneNumber,\n    email,\n    formFields {\n      name,\n      value\n    },\n    extraFields {\n      fieldName,\n      fieldValue,\n    }\n    role,\n    companyRoleId,\n    companyRoleName,\n  }\n}`;\n\nconst customerAccountSettings = () => `query GetB2CAccountSettings {\n  customerAccountSettings {\n    firstName,\n    lastName,\n    company,\n    phoneNumber,\n    email,\n    formFields {\n      name,\n      value\n    },\n  }\n}`;\n\nexport const updateB2BAccountSettings = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: updateAccountSettings(data),\n  });\n\nexport const updateBCAccountSettings = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: updateCustomerAccountSettings(data),\n  });\n\nexport const getB2BAccountSettings = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: getAccountSettings(data),\n  });\n\nexport const getBCAccountSettings = () =>\n  B3Request.graphqlB2B({\n    query: customerAccountSettings(),\n  });\n","interface GetFilterMoreListProps {\n  fieldId: string;\n  rows?: string | number;\n  name: string;\n  label: string;\n  required: boolean;\n  default: string;\n  fieldType: string;\n  xs: number;\n  variant: string;\n  size: string;\n}\n\nexport const getAccountSettingsFields = (): GetFilterMoreListProps[] => {\n  return [\n    {\n      name: 'company',\n      fieldId: 'field_company',\n      label: 'Company',\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'role',\n      fieldId: 'field_role',\n      label: 'Role',\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n  ];\n};\n\nexport const getPasswordModifiedFields = (): GetFilterMoreListProps[] => {\n  return [\n    {\n      name: 'currentPassword',\n      fieldId: 'field_current_password',\n      label: 'Current Password',\n      required: false,\n      default: '',\n      fieldType: 'password',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'password',\n      fieldId: 'field_password',\n      label: 'Password',\n      required: false,\n      default: '',\n      fieldType: 'password',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'confirmPassword',\n      fieldId: 'field_confirm_password',\n      label: 'Confirm Password',\n      required: false,\n      default: '',\n      fieldType: 'password',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n  ];\n};\n","import { Link } from 'react-router-dom';\nimport { Alert, Box, Typography } from '@mui/material';\n\nimport { useB3Lang } from '@/lib/lang';\n\nexport function UpgradeBanner() {\n  const b3Lang = useB3Lang();\n\n  return (\n    <Box>\n      <Alert\n        severity=\"info\"\n        variant=\"filled\"\n        sx={{\n          width: 'inherit',\n          '& button[title=\"Close\"]': {\n            display: 'block',\n          },\n          mb: '24px',\n          maxWidth: '1450px',\n\n          '& .MuiAlert-icon': {\n            padding: '12px 0',\n          },\n\n          '& .MuiAlert-message': {\n            width: '100%',\n          },\n        }}\n      >\n        <Box display=\"flex\" flexWrap=\"wrap\" justifyContent=\"space-between\" width=\"100%\">\n          <Box>\n            <Typography variant=\"subtitle1\" fontWeight=\"800\">\n              {b3Lang('accountSettings.registeredToB2b.title')}\n            </Typography>\n            <Typography sx={{ textWrap: 'wrap' }}>\n              {b3Lang('accountSettings.registeredToB2b.description')}\n            </Typography>\n          </Box>\n          <Typography\n            component={Link}\n            to=\"/registeredbctob2b\"\n            sx={{ textDecoration: 'none', textTransform: 'uppercase' }}\n            fontWeight=\"bold\"\n            color=\"#fff\"\n          >\n            {b3Lang('accountSettings.registeredToB2b.upgrade')}\n          </Typography>\n        </Box>\n      </Alert>\n    </Box>\n  );\n}\n","import { Fields, ParamProps } from '@/types/accountSetting';\nimport { validatorRules } from '@/utils';\n\nimport { deCodeField } from '../Registered/config';\n\nconst emailValidate = validatorRules(['email']);\n\nexport const initB2BInfo = (\n  accountSettings: any,\n  contactInformation: Partial<Fields>[],\n  accountB2BFormFields: Partial<Fields>[],\n  additionalInformation: Partial<Fields>[],\n) => {\n  const extraFields = accountSettings?.extraFields || [];\n  contactInformation.forEach((item: Partial<Fields>) => {\n    const contactItem = item;\n    if (deCodeField(item?.name || '') === 'first_name') {\n      contactItem.default = accountSettings.firstName;\n    }\n    if (deCodeField(item?.name || '') === 'last_name') {\n      contactItem.default = accountSettings.lastName;\n    }\n    if (deCodeField(item?.name || '') === 'phone') {\n      contactItem.default = accountSettings.phoneNumber;\n    }\n    if (deCodeField(item?.name || '') === 'email') {\n      contactItem.default = accountSettings.email;\n      contactItem.validate = emailValidate;\n    }\n  });\n\n  if (extraFields.length > 0) {\n    extraFields.forEach((field: CustomFieldItems) => {\n      const extraField = field;\n\n      const currentField = contactInformation.find(\n        (item) => deCodeField(item?.name || '') === extraField.fieldName,\n      );\n\n      if (currentField) {\n        currentField.default = extraField.fieldValue;\n      }\n    });\n  }\n\n  accountB2BFormFields.forEach((item: Partial<Fields>) => {\n    const formField = item;\n    if (item.name === 'role') {\n      formField.default = accountSettings.companyRoleName;\n      formField.disabled = true;\n    } else if (item.name === 'company') {\n      formField.default = accountSettings.company;\n      formField.disabled = true;\n    }\n  });\n\n  additionalInformation.forEach((item: Partial<Fields>) => {\n    const formFields = (accountSettings?.formFields || []).find(\n      (field: Partial<Fields>) => field.name === item.bcLabel,\n    );\n    const infoItem = item;\n    if (formFields) infoItem.default = formFields.value;\n  });\n\n  return [...contactInformation, ...accountB2BFormFields, ...additionalInformation];\n};\n\nexport const initBcInfo = (\n  accountSettings: any,\n  contactInformation: Partial<Fields>[],\n  additionalInformation: Partial<Fields>[],\n) => {\n  contactInformation.forEach((item: Partial<Fields>) => {\n    const contactInfoItem = item;\n    if (deCodeField(item?.name || '') === 'first_name') {\n      contactInfoItem.default = accountSettings.firstName;\n    }\n    if (deCodeField(item?.name || '') === 'last_name') {\n      contactInfoItem.default = accountSettings.lastName;\n    }\n    if (deCodeField(item?.name || '') === 'phone') {\n      contactInfoItem.default = accountSettings.phoneNumber;\n    }\n    if (deCodeField(item?.name || '') === 'email') {\n      contactInfoItem.default = accountSettings.email;\n      contactInfoItem.validate = emailValidate;\n    }\n    if (deCodeField(item?.name || '') === 'company') {\n      contactInfoItem.default = accountSettings.company;\n    }\n  });\n\n  additionalInformation.forEach((item: Partial<Fields>) => {\n    const formFields = (accountSettings?.formFields || []).find(\n      (field: Partial<Fields>) => field.name === item.bcLabel,\n    );\n    const infoItem = item;\n    if (formFields) infoItem.default = formFields.value;\n  });\n\n  return [...contactInformation, ...additionalInformation];\n};\n\nexport const b2bSubmitDataProcessing = (\n  data: CustomFieldItems,\n  accountSettings: any,\n  decryptionFields: Partial<Fields>[],\n  extraFields: Partial<Fields>[],\n) => {\n  const userExtraFields = accountSettings?.extraFields || [];\n\n  const param: Partial<ParamProps> = {};\n  param.formFields = [];\n  let pristine = true;\n  let flag = true;\n  let useExtraFieldsFlag = false;\n\n  Object.keys(data).forEach((key: string) => {\n    decryptionFields.forEach((item: Partial<Fields>) => {\n      if (key === item.name) {\n        flag = false;\n        if (deCodeField(item.name) === 'first_name') {\n          if (accountSettings.firstName !== data[item.name]) pristine = false;\n          param.firstName = data[item.name];\n        }\n        if (deCodeField(item.name) === 'last_name') {\n          if (accountSettings.lastName !== data[item.name]) pristine = false;\n          param.lastName = data[item.name];\n        }\n        if (deCodeField(item.name) === 'phone') {\n          if (accountSettings.phoneNumber !== data[item.name]) pristine = false;\n          param.phoneNumber = data[item.name];\n        }\n        if (deCodeField(item.name) === 'email') {\n          if (accountSettings.email !== data[item.name]) pristine = false;\n          param.email = data[item.name];\n        }\n        if (item.custom) {\n          const currentField = userExtraFields.find(\n            (field: CustomFieldItems) => field.fieldName === deCodeField(item?.name || ''),\n          );\n          if (currentField?.fieldValue !== data[item.name]) useExtraFieldsFlag = true;\n        }\n      }\n    });\n    if (useExtraFieldsFlag) {\n      pristine = false;\n    }\n\n    if (flag) {\n      extraFields.forEach((field: Partial<Fields>) => {\n        if (field.fieldId === key && param?.formFields) {\n          const { name } = field;\n          param.formFields.push({\n            name: field?.bcLabel || '',\n            value: data[key],\n          });\n          flag = false;\n          const account = (accountSettings?.formFields || []).find(\n            (formField: Partial<Fields>) => formField.name === field.bcLabel,\n          );\n          if (account && JSON.stringify(account.value) !== JSON.stringify(data[key])) {\n            pristine = false;\n          }\n\n          if (!accountSettings?.formFields?.length && name && !!data[name]) {\n            pristine = false;\n          }\n        }\n      });\n    }\n    if (flag) {\n      if (key === 'password') {\n        param.newPassword = data[key];\n        if (data[key]) pristine = false;\n      } else {\n        param[key] = data[key];\n      }\n    }\n    flag = true;\n  });\n\n  delete param.company;\n\n  delete param.role;\n\n  if (pristine) {\n    return undefined;\n  }\n\n  return param;\n};\n\nexport const bcSubmitDataProcessing = (\n  data: CustomFieldItems,\n  accountSettings: any,\n  decryptionFields: Partial<Fields>[],\n  extraFields: Partial<Fields>[],\n) => {\n  const param: Partial<ParamProps> = {};\n  param.formFields = [];\n  let pristine = true;\n  let flag = true;\n  Object.keys(data).forEach((key: string) => {\n    decryptionFields.forEach((item: Partial<Fields>) => {\n      if (key === item.name) {\n        flag = false;\n        if (deCodeField(item.name) === 'first_name') {\n          if (accountSettings.firstName !== data[item.name]) pristine = false;\n          param.firstName = data[item.name];\n        }\n        if (deCodeField(item.name) === 'last_name') {\n          if (accountSettings.lastName !== data[item.name]) pristine = false;\n          param.lastName = data[item.name];\n        }\n        if (deCodeField(item.name) === 'phone') {\n          if (accountSettings.phoneNumber !== data[item.name]) pristine = false;\n          param.phoneNumber = data[item.name];\n        }\n        if (deCodeField(item.name) === 'email') {\n          if (accountSettings.email !== data[item.name]) pristine = false;\n          param.email = data[item.name];\n        }\n        if (deCodeField(item.name) === 'company') {\n          if (accountSettings.company !== data[item.name]) pristine = false;\n          param.company = data[item.name];\n        }\n      }\n    });\n\n    if (flag) {\n      extraFields.forEach((field: Partial<Fields>) => {\n        if (field.fieldId === key && param?.formFields) {\n          param.formFields.push({\n            name: field?.bcLabel || '',\n            value: data[key],\n          });\n          flag = false;\n          const account = (accountSettings?.formFields || []).find(\n            (formField: Partial<Fields>) => formField.name === field.bcLabel,\n          );\n          if (account && JSON.stringify(account.value) !== JSON.stringify(data[key]))\n            pristine = false;\n        }\n      });\n    }\n\n    if (flag) {\n      if (key === 'password') {\n        param.newPassword = data[key];\n        if (data[key]) pristine = false;\n      } else {\n        param[key] = data[key];\n      }\n    }\n    flag = true;\n  });\n\n  if (pristine) {\n    return undefined;\n  }\n\n  return param;\n};\n","import { useContext, useEffect, useMemo, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useNavigate } from 'react-router-dom';\nimport { Box } from '@mui/material';\nimport trim from 'lodash-es/trim';\n\nimport { B3CustomForm } from '@/components';\nimport CustomButton from '@/components/button/CustomButton';\nimport { b3HexToRgb, getContrastColor } from '@/components/outSideComponents/utils/b3CustomStyles';\nimport B3Spin from '@/components/spin/B3Spin';\nimport { useMobile } from '@/hooks';\nimport useStorageState from '@/hooks/useStorageState';\nimport { useB3Lang } from '@/lib/lang';\nimport { CustomStyleContext } from '@/shared/customStyleButton';\nimport {\n  checkUserBCEmail,\n  checkUserEmail,\n  getB2BAccountFormFields,\n  getB2BAccountSettings,\n  getBCAccountSettings,\n  updateB2BAccountSettings,\n  updateBCAccountSettings,\n} from '@/shared/service/b2b';\nimport { isB2BUserSelector, useAppSelector } from '@/store';\nimport { CustomerRole, UserTypes } from '@/types';\nimport { Fields, ParamProps } from '@/types/accountSetting';\nimport { B3SStorage, channelId, platform, snackbar } from '@/utils';\n\nimport { deCodeField, getAccountFormFields } from '../Registered/config';\n\nimport { getAccountSettingsFields, getPasswordModifiedFields } from './config';\nimport { UpgradeBanner } from './UpgradeBanner';\nimport { b2bSubmitDataProcessing, bcSubmitDataProcessing, initB2BInfo, initBcInfo } from './utils';\n\nfunction useData() {\n  const isB2BUser = useAppSelector(isB2BUserSelector);\n  const companyInfoId = useAppSelector(({ company }) => company.companyInfo.id);\n  const customer = useAppSelector(({ company }) => company.customer);\n  const role = useAppSelector(({ company }) => company.customer.role);\n  const salesRepCompanyId = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.id);\n  const isAgenting = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.isAgenting);\n  const companyId = role === 3 && isAgenting ? Number(salesRepCompanyId) : Number(companyInfoId);\n  const isBCUser = !isB2BUser || (role === 3 && !isAgenting);\n  const isDisplayUpgradeBanner =\n    CustomerRole.B2C === customer.role &&\n    [UserTypes.B2C, UserTypes.MULTIPLE_B2C].includes(customer.userType) &&\n    platform === 'catalyst';\n\n  const validateEmailValue = async (emailValue: string) => {\n    if (customer.emailAddress === trim(emailValue)) return true;\n    const payload = {\n      email: emailValue,\n      channelId,\n    };\n\n    const { isValid }: { isValid: boolean } = isBCUser\n      ? await checkUserBCEmail(payload)\n      : await checkUserEmail(payload);\n\n    return isValid;\n  };\n\n  const emailValidation = (data: Partial<ParamProps>) => {\n    if (data.email !== customer.emailAddress && !data.currentPassword) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const passwordValidation = (data: Partial<ParamProps>) => {\n    if (data.password !== data.confirmPassword) {\n      return false;\n    }\n\n    return true;\n  };\n\n  return {\n    isBCUser,\n    companyId,\n    customer,\n    validateEmailValue,\n    emailValidation,\n    passwordValidation,\n    isDisplayUpgradeBanner,\n  };\n}\n\nfunction AccountSetting() {\n  const {\n    isBCUser,\n    companyId,\n    customer,\n    validateEmailValue,\n    emailValidation,\n    passwordValidation,\n    isDisplayUpgradeBanner,\n  } = useData();\n\n  const {\n    control,\n    handleSubmit,\n    getValues,\n    formState: { errors },\n    setValue,\n    setError,\n  } = useForm({\n    mode: 'onSubmit',\n  });\n\n  const [isFinishUpdate, setIsFinishUpdate] = useStorageState<boolean>(\n    'sf-isFinishUpdate',\n    false,\n    sessionStorage,\n  );\n\n  const {\n    state: {\n      portalStyle: { backgroundColor = '#FEF9F5' },\n    },\n  } = useContext(CustomStyleContext);\n\n  const b3Lang = useB3Lang();\n\n  const [isMobile] = useMobile();\n\n  const navigate = useNavigate();\n\n  const [accountInfoFormFields, setAccountInfoFormFields] = useState<Partial<Fields>[]>([]);\n  const [decryptionFields, setDecryptionFields] = useState<Partial<Fields>[]>([]);\n  const [extraFields, setExtraFields] = useState<Partial<Fields>[]>([]);\n  const [isLoading, setLoading] = useState<boolean>(false);\n  const [accountSettings, setAccountSettings] = useState<any>({});\n  const [isVisible, setIsVisible] = useState<boolean>(false);\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        setLoading(true);\n\n        const fn = isBCUser ? getBCAccountSettings : getB2BAccountSettings;\n\n        const params = isBCUser\n          ? {}\n          : {\n              companyId,\n            };\n\n        const key = isBCUser ? 'customerAccountSettings' : 'accountSettings';\n\n        const accountFormAllFields = await getB2BAccountFormFields(isBCUser ? 1 : 2);\n        const accountFormFields = getAccountFormFields(\n          accountFormAllFields.accountFormFields || [],\n        );\n\n        const contactInformation = (accountFormFields?.contactInformation || []).filter(\n          (item: Partial<Fields>) => item.fieldId !== 'field_email_marketing_newsletter',\n        );\n\n        const { additionalInformation = [] } = accountFormFields;\n\n        const { [key]: accountSettings } = await fn(params);\n\n        const fields = isBCUser\n          ? initBcInfo(accountSettings, contactInformation, additionalInformation)\n          : initB2BInfo(\n              accountSettings,\n              contactInformation,\n              getAccountSettingsFields(),\n              additionalInformation,\n            );\n\n        const passwordModifiedFields = getPasswordModifiedFields();\n\n        const all = [...fields, ...passwordModifiedFields];\n\n        const roleItem = all.find((item) => item.name === 'role');\n\n        if (roleItem?.fieldType) roleItem.fieldType = 'text';\n\n        setAccountInfoFormFields(all);\n\n        setAccountSettings(accountSettings);\n\n        setDecryptionFields(contactInformation);\n\n        setExtraFields(additionalInformation);\n      } finally {\n        if (isFinishUpdate) {\n          snackbar.success(b3Lang('accountSettings.notification.detailsUpdated'));\n          setIsFinishUpdate(false);\n        }\n        setLoading(false);\n        setIsVisible(true);\n      }\n    };\n\n    init();\n    // disabling as we only need to run this once and values at starting render are good enough\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isFinishUpdate]);\n\n  const handleGetUserExtraFields = (\n    data: CustomFieldItems,\n    accountInfoFormFields: Partial<Fields>[],\n  ) => {\n    const userExtraFields = accountInfoFormFields.filter(\n      (item: CustomFieldItems) => item.custom && item.groupId === 1,\n    );\n    return userExtraFields.map((item: CustomFieldItems) => ({\n      fieldName: deCodeField(item?.name || ''),\n      fieldValue: data[item.name],\n    }));\n  };\n\n  const handleAddUserClick = () => {\n    handleSubmit(async (data: CustomFieldItems) => {\n      setLoading(true);\n\n      try {\n        const isValid = await validateEmailValue(data.email);\n\n        if (!isValid) {\n          setError('email', {\n            type: 'custom',\n            message: b3Lang('accountSettings.notification.emailExists'),\n          });\n        }\n\n        const emailFlag = emailValidation(data);\n\n        if (!emailFlag) {\n          snackbar.error(b3Lang('accountSettings.notification.updateEmailPassword'));\n        }\n\n        const passwordFlag = passwordValidation(data);\n\n        if (!passwordFlag) {\n          setError('confirmPassword', {\n            type: 'manual',\n            message: b3Lang('global.registerComplete.passwordMatchPrompt'),\n          });\n          setError('password', {\n            type: 'manual',\n            message: b3Lang('global.registerComplete.passwordMatchPrompt'),\n          });\n        }\n\n        if (isValid && emailFlag && passwordFlag) {\n          const dataProcessingFn = isBCUser ? bcSubmitDataProcessing : b2bSubmitDataProcessing;\n          const payload = dataProcessingFn(data, accountSettings, decryptionFields, extraFields);\n\n          if (payload) {\n            if (!isBCUser) {\n              payload.companyId = companyId;\n              payload.extraFields = handleGetUserExtraFields(data, accountInfoFormFields);\n            }\n\n            if (payload.newPassword === '' && payload.confirmPassword === '') {\n              delete payload.newPassword;\n              delete payload.confirmPassword;\n            }\n          }\n\n          if (!payload) {\n            snackbar.success(b3Lang('accountSettings.notification.noEdits'));\n            return;\n          }\n\n          const requestFn = isBCUser ? updateBCAccountSettings : updateB2BAccountSettings;\n          await requestFn(payload);\n\n          if (\n            (data.password && data.currentPassword) ||\n            customer.emailAddress !== trim(data.email)\n          ) {\n            navigate('/login?loginFlag=loggedOutLogin');\n          } else {\n            B3SStorage.clear();\n            setIsFinishUpdate(true);\n          }\n        }\n      } finally {\n        setLoading(false);\n      }\n    })();\n  };\n\n  const translatedFields = useMemo(() => {\n    const fieldTranslations: Record<string, string> = {\n      field_first_name: b3Lang('accountSettings.form.firstName'),\n      field_last_name: b3Lang('accountSettings.form.lastName'),\n      field_email: b3Lang('accountSettings.form.email'),\n      field_phone_number: b3Lang('accountSettings.form.phoneNumber'),\n      field_company: b3Lang('accountSettings.form.company'),\n      field_role: b3Lang('accountSettings.form.role'),\n      field_current_password: b3Lang('accountSettings.form.currentPassword'),\n      field_password: b3Lang('accountSettings.form.password'),\n      field_confirm_password: b3Lang('accountSettings.form.confirmPassword'),\n    };\n\n    return accountInfoFormFields.map((item) => ({\n      ...item,\n      label: fieldTranslations[item.fieldId ?? ''] ?? item.label,\n    }));\n  }, [accountInfoFormFields, b3Lang]);\n\n  return (\n    <B3Spin isSpinning={isLoading} background={backgroundColor}>\n      <Box>\n        {isDisplayUpgradeBanner && <UpgradeBanner />}\n        <Box\n          sx={{\n            width: isMobile ? '100%' : '35%',\n            minHeight: isMobile ? '800px' : '300px',\n            '& input, & .MuiFormControl-root .MuiTextField-root, & .MuiSelect-select.MuiSelect-filled, & .MuiTextField-root .MuiInputBase-multiline':\n              {\n                bgcolor: b3HexToRgb('#FFFFFF', 0.87),\n                borderRadius: '4px',\n                borderBottomLeftRadius: '0',\n                borderBottomRightRadius: '0',\n              },\n            '& .MuiButtonBase-root.MuiCheckbox-root:not(.Mui-checked), & .MuiRadio-root:not(.Mui-checked)':\n              {\n                color: b3HexToRgb(getContrastColor(backgroundColor), 0.6),\n              },\n            '& .MuiTypography-root.MuiTypography-body1.MuiFormControlLabel-label, & .MuiFormControl-root .MuiFormLabel-root:not(.Mui-focused)':\n              {\n                color: b3HexToRgb(getContrastColor(backgroundColor), 0.87),\n              },\n            '& .MuiInputLabel-root.MuiInputLabel-formControl:not(.Mui-focused)': {\n              color: b3HexToRgb(getContrastColor('#FFFFFF'), 0.6),\n            },\n          }}\n        >\n          <B3CustomForm\n            formFields={translatedFields}\n            errors={errors}\n            control={control}\n            getValues={getValues}\n            setValue={setValue}\n          />\n\n          <CustomButton\n            sx={{\n              mt: '28px',\n              mb: isMobile ? '20px' : '0',\n              width: '100%',\n              visibility: isVisible ? 'visible' : 'hidden',\n            }}\n            onClick={handleAddUserClick}\n            variant=\"contained\"\n          >\n            {b3Lang('accountSettings.button.saveUpdates')}\n          </CustomButton>\n        </Box>\n      </Box>\n    </B3Spin>\n  );\n}\n\nexport default AccountSetting;\n"],"names":["updateAccountSettings","data","convertObjectToGraphql","updateCustomerAccountSettings","getAccountSettings","customerAccountSettings","updateB2BAccountSettings","B3Request","updateBCAccountSettings","getB2BAccountSettings","getBCAccountSettings","getAccountSettingsFields","getPasswordModifiedFields","UpgradeBanner","b3Lang","useB3Lang","Box","jsx","Alert","jsxs","Typography","Link","emailValidate","validatorRules","initB2BInfo","accountSettings","contactInformation","accountB2BFormFields","additionalInformation","extraFields","item","contactItem","deCodeField","field","extraField","currentField","formField","formFields","infoItem","initBcInfo","contactInfoItem","b2bSubmitDataProcessing","decryptionFields","userExtraFields","param","pristine","flag","useExtraFieldsFlag","key","name","account","_a","bcSubmitDataProcessing","useData","isB2BUser","useAppSelector","isB2BUserSelector","companyInfoId","company","customer","role","salesRepCompanyId","b2bFeatures","isAgenting","companyId","isBCUser","isDisplayUpgradeBanner","CustomerRole","UserTypes","platform","emailValue","trim","payload","channelId","isValid","checkUserBCEmail","checkUserEmail","AccountSetting","validateEmailValue","emailValidation","passwordValidation","control","handleSubmit","getValues","errors","setValue","setError","useForm","isFinishUpdate","setIsFinishUpdate","useStorageState","backgroundColor","useContext","CustomStyleContext","isMobile","useMobile","navigate","useNavigate","accountInfoFormFields","setAccountInfoFormFields","useState","setDecryptionFields","setExtraFields","isLoading","setLoading","setAccountSettings","isVisible","setIsVisible","useEffect","fn","params","accountFormAllFields","getB2BAccountFormFields","accountFormFields","getAccountFormFields","fields","passwordModifiedFields","all","roleItem","snackbar","handleGetUserExtraFields","handleAddUserClick","emailFlag","passwordFlag","B3SStorage","translatedFields","useMemo","fieldTranslations","_b","B3Spin","b3HexToRgb","getContrastColor","B3CustomForm","CustomButton"],"mappings":"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"}