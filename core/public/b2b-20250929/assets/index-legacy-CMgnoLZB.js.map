{"version":3,"file":"index-legacy-CMgnoLZB.js","sources":["../../src/pages/AccountSetting/index.tsx","../../src/shared/service/b2b/graphql/accountSetting.ts","../../src/pages/AccountSetting/config.ts","../../src/pages/AccountSetting/UpgradeBanner.tsx","../../src/pages/AccountSetting/utils.ts"],"sourcesContent":["import { useContext, useEffect, useMemo, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useNavigate } from 'react-router-dom';\nimport { Box } from '@mui/material';\nimport trim from 'lodash-es/trim';\n\nimport { B3CustomForm } from '@/components';\nimport CustomButton from '@/components/button/CustomButton';\nimport { b3HexToRgb, getContrastColor } from '@/components/outSideComponents/utils/b3CustomStyles';\nimport B3Spin from '@/components/spin/B3Spin';\nimport { useMobile } from '@/hooks';\nimport useStorageState from '@/hooks/useStorageState';\nimport { useB3Lang } from '@/lib/lang';\nimport { CustomStyleContext } from '@/shared/customStyleButton';\nimport {\n  checkUserBCEmail,\n  checkUserEmail,\n  getB2BAccountFormFields,\n  getB2BAccountSettings,\n  getBCAccountSettings,\n  updateB2BAccountSettings,\n  updateBCAccountSettings,\n} from '@/shared/service/b2b';\nimport { isB2BUserSelector, useAppSelector } from '@/store';\nimport { CustomerRole, UserTypes } from '@/types';\nimport { Fields, ParamProps } from '@/types/accountSetting';\nimport { B3SStorage, channelId, platform, snackbar } from '@/utils';\n\nimport { deCodeField, getAccountFormFields } from '../Registered/config';\n\nimport { getAccountSettingsFields, getPasswordModifiedFields } from './config';\nimport { UpgradeBanner } from './UpgradeBanner';\nimport { b2bSubmitDataProcessing, bcSubmitDataProcessing, initB2BInfo, initBcInfo } from './utils';\n\nfunction useData() {\n  const isB2BUser = useAppSelector(isB2BUserSelector);\n  const companyInfoId = useAppSelector(({ company }) => company.companyInfo.id);\n  const customer = useAppSelector(({ company }) => company.customer);\n  const role = useAppSelector(({ company }) => company.customer.role);\n  const salesRepCompanyId = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.id);\n  const isAgenting = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.isAgenting);\n  const companyId = role === 3 && isAgenting ? Number(salesRepCompanyId) : Number(companyInfoId);\n  const isBCUser = !isB2BUser || (role === 3 && !isAgenting);\n  const isDisplayUpgradeBanner =\n    CustomerRole.B2C === customer.role &&\n    [UserTypes.B2C, UserTypes.MULTIPLE_B2C].includes(customer.userType) &&\n    platform === 'catalyst';\n\n  const validateEmailValue = async (emailValue: string) => {\n    if (customer.emailAddress === trim(emailValue)) return true;\n    const payload = {\n      email: emailValue,\n      channelId,\n    };\n\n    const { isValid }: { isValid: boolean } = isBCUser\n      ? await checkUserBCEmail(payload)\n      : await checkUserEmail(payload);\n\n    return isValid;\n  };\n\n  const emailValidation = (data: Partial<ParamProps>) => {\n    if (data.email !== customer.emailAddress && !data.currentPassword) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const passwordValidation = (data: Partial<ParamProps>) => {\n    if (data.password !== data.confirmPassword) {\n      return false;\n    }\n\n    return true;\n  };\n\n  return {\n    isBCUser,\n    companyId,\n    customer,\n    validateEmailValue,\n    emailValidation,\n    passwordValidation,\n    isDisplayUpgradeBanner,\n  };\n}\n\nfunction AccountSetting() {\n  const {\n    isBCUser,\n    companyId,\n    customer,\n    validateEmailValue,\n    emailValidation,\n    passwordValidation,\n    isDisplayUpgradeBanner,\n  } = useData();\n\n  const {\n    control,\n    handleSubmit,\n    getValues,\n    formState: { errors },\n    setValue,\n    setError,\n  } = useForm({\n    mode: 'onSubmit',\n  });\n\n  const [isFinishUpdate, setIsFinishUpdate] = useStorageState<boolean>(\n    'sf-isFinishUpdate',\n    false,\n    sessionStorage,\n  );\n\n  const {\n    state: {\n      portalStyle: { backgroundColor = '#FEF9F5' },\n    },\n  } = useContext(CustomStyleContext);\n\n  const b3Lang = useB3Lang();\n\n  const [isMobile] = useMobile();\n\n  const navigate = useNavigate();\n\n  const [accountInfoFormFields, setAccountInfoFormFields] = useState<Partial<Fields>[]>([]);\n  const [decryptionFields, setDecryptionFields] = useState<Partial<Fields>[]>([]);\n  const [extraFields, setExtraFields] = useState<Partial<Fields>[]>([]);\n  const [isLoading, setLoading] = useState<boolean>(false);\n  const [accountSettings, setAccountSettings] = useState<any>({});\n  const [isVisible, setIsVisible] = useState<boolean>(false);\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        setLoading(true);\n\n        const fn = isBCUser ? getBCAccountSettings : getB2BAccountSettings;\n\n        const params = isBCUser\n          ? {}\n          : {\n              companyId,\n            };\n\n        const key = isBCUser ? 'customerAccountSettings' : 'accountSettings';\n\n        const accountFormAllFields = await getB2BAccountFormFields(isBCUser ? 1 : 2);\n        const accountFormFields = getAccountFormFields(\n          accountFormAllFields.accountFormFields || [],\n        );\n\n        const contactInformation = (accountFormFields?.contactInformation || []).filter(\n          (item: Partial<Fields>) => item.fieldId !== 'field_email_marketing_newsletter',\n        );\n\n        const { additionalInformation = [] } = accountFormFields;\n\n        const { [key]: accountSettings } = await fn(params);\n\n        const fields = isBCUser\n          ? initBcInfo(accountSettings, contactInformation, additionalInformation)\n          : initB2BInfo(\n              accountSettings,\n              contactInformation,\n              getAccountSettingsFields(),\n              additionalInformation,\n            );\n\n        const passwordModifiedFields = getPasswordModifiedFields();\n\n        const all = [...fields, ...passwordModifiedFields];\n\n        const roleItem = all.find((item) => item.name === 'role');\n\n        if (roleItem?.fieldType) roleItem.fieldType = 'text';\n\n        setAccountInfoFormFields(all);\n\n        setAccountSettings(accountSettings);\n\n        setDecryptionFields(contactInformation);\n\n        setExtraFields(additionalInformation);\n      } finally {\n        if (isFinishUpdate) {\n          snackbar.success(b3Lang('accountSettings.notification.detailsUpdated'));\n          setIsFinishUpdate(false);\n        }\n        setLoading(false);\n        setIsVisible(true);\n      }\n    };\n\n    init();\n    // disabling as we only need to run this once and values at starting render are good enough\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isFinishUpdate]);\n\n  const handleGetUserExtraFields = (\n    data: CustomFieldItems,\n    accountInfoFormFields: Partial<Fields>[],\n  ) => {\n    const userExtraFields = accountInfoFormFields.filter(\n      (item: CustomFieldItems) => item.custom && item.groupId === 1,\n    );\n    return userExtraFields.map((item: CustomFieldItems) => ({\n      fieldName: deCodeField(item?.name || ''),\n      fieldValue: data[item.name],\n    }));\n  };\n\n  const handleAddUserClick = () => {\n    handleSubmit(async (data: CustomFieldItems) => {\n      setLoading(true);\n\n      try {\n        const isValid = await validateEmailValue(data.email);\n\n        if (!isValid) {\n          setError('email', {\n            type: 'custom',\n            message: b3Lang('accountSettings.notification.emailExists'),\n          });\n        }\n\n        const emailFlag = emailValidation(data);\n\n        if (!emailFlag) {\n          snackbar.error(b3Lang('accountSettings.notification.updateEmailPassword'));\n        }\n\n        const passwordFlag = passwordValidation(data);\n\n        if (!passwordFlag) {\n          setError('confirmPassword', {\n            type: 'manual',\n            message: b3Lang('global.registerComplete.passwordMatchPrompt'),\n          });\n          setError('password', {\n            type: 'manual',\n            message: b3Lang('global.registerComplete.passwordMatchPrompt'),\n          });\n        }\n\n        if (isValid && emailFlag && passwordFlag) {\n          const dataProcessingFn = isBCUser ? bcSubmitDataProcessing : b2bSubmitDataProcessing;\n          const payload = dataProcessingFn(data, accountSettings, decryptionFields, extraFields);\n\n          if (payload) {\n            if (!isBCUser) {\n              payload.companyId = companyId;\n              payload.extraFields = handleGetUserExtraFields(data, accountInfoFormFields);\n            }\n\n            if (payload.newPassword === '' && payload.confirmPassword === '') {\n              delete payload.newPassword;\n              delete payload.confirmPassword;\n            }\n          }\n\n          if (!payload) {\n            snackbar.success(b3Lang('accountSettings.notification.noEdits'));\n            return;\n          }\n\n          const requestFn = isBCUser ? updateBCAccountSettings : updateB2BAccountSettings;\n          await requestFn(payload);\n\n          if (\n            (data.password && data.currentPassword) ||\n            customer.emailAddress !== trim(data.email)\n          ) {\n            navigate('/login?loginFlag=loggedOutLogin');\n          } else {\n            B3SStorage.clear();\n            setIsFinishUpdate(true);\n          }\n        }\n      } finally {\n        setLoading(false);\n      }\n    })();\n  };\n\n  const translatedFields = useMemo(() => {\n    const fieldTranslations: Record<string, string> = {\n      field_first_name: b3Lang('accountSettings.form.firstName'),\n      field_last_name: b3Lang('accountSettings.form.lastName'),\n      field_email: b3Lang('accountSettings.form.email'),\n      field_phone_number: b3Lang('accountSettings.form.phoneNumber'),\n      field_company: b3Lang('accountSettings.form.company'),\n      field_role: b3Lang('accountSettings.form.role'),\n      field_current_password: b3Lang('accountSettings.form.currentPassword'),\n      field_password: b3Lang('accountSettings.form.password'),\n      field_confirm_password: b3Lang('accountSettings.form.confirmPassword'),\n    };\n\n    return accountInfoFormFields.map((item) => ({\n      ...item,\n      label: fieldTranslations[item.fieldId ?? ''] ?? item.label,\n    }));\n  }, [accountInfoFormFields, b3Lang]);\n\n  return (\n    <B3Spin isSpinning={isLoading} background={backgroundColor}>\n      <Box>\n        {isDisplayUpgradeBanner && <UpgradeBanner />}\n        <Box\n          sx={{\n            width: isMobile ? '100%' : '35%',\n            minHeight: isMobile ? '800px' : '300px',\n            '& input, & .MuiFormControl-root .MuiTextField-root, & .MuiSelect-select.MuiSelect-filled, & .MuiTextField-root .MuiInputBase-multiline':\n              {\n                bgcolor: b3HexToRgb('#FFFFFF', 0.87),\n                borderRadius: '4px',\n                borderBottomLeftRadius: '0',\n                borderBottomRightRadius: '0',\n              },\n            '& .MuiButtonBase-root.MuiCheckbox-root:not(.Mui-checked), & .MuiRadio-root:not(.Mui-checked)':\n              {\n                color: b3HexToRgb(getContrastColor(backgroundColor), 0.6),\n              },\n            '& .MuiTypography-root.MuiTypography-body1.MuiFormControlLabel-label, & .MuiFormControl-root .MuiFormLabel-root:not(.Mui-focused)':\n              {\n                color: b3HexToRgb(getContrastColor(backgroundColor), 0.87),\n              },\n            '& .MuiInputLabel-root.MuiInputLabel-formControl:not(.Mui-focused)': {\n              color: b3HexToRgb(getContrastColor('#FFFFFF'), 0.6),\n            },\n          }}\n        >\n          <B3CustomForm\n            formFields={translatedFields}\n            errors={errors}\n            control={control}\n            getValues={getValues}\n            setValue={setValue}\n          />\n\n          <CustomButton\n            sx={{\n              mt: '28px',\n              mb: isMobile ? '20px' : '0',\n              width: '100%',\n              visibility: isVisible ? 'visible' : 'hidden',\n            }}\n            onClick={handleAddUserClick}\n            variant=\"contained\"\n          >\n            {b3Lang('accountSettings.button.saveUpdates')}\n          </CustomButton>\n        </Box>\n      </Box>\n    </B3Spin>\n  );\n}\n\nexport default AccountSetting;\n","import { convertObjectToGraphql } from '../../../../utils';\nimport B3Request from '../../request/b3Fetch';\n\nconst updateAccountSettings = (data: CustomFieldItems) => `mutation{\n  updateAccountSettings (\n    updateData: ${convertObjectToGraphql(data)}\n  ){\n    result {\n      email\n    },\n  }\n}`;\n\nconst updateCustomerAccountSettings = (data: CustomFieldItems) => `mutation{\n  updateCustomerAccountSettings (\n    updateData: ${convertObjectToGraphql(data)}\n  ){\n    result {\n      email\n    },\n  }\n}`;\n\nconst getAccountSettings = (data: CustomFieldItems) => `query GetB2bAccountSettings {\n  accountSettings (\n    companyId: ${data.companyId}\n  ){\n    firstName,\n    lastName,\n    company,\n    phoneNumber,\n    email,\n    formFields {\n      name,\n      value\n    },\n    extraFields {\n      fieldName,\n      fieldValue,\n    }\n    role,\n    companyRoleId,\n    companyRoleName,\n  }\n}`;\n\nconst customerAccountSettings = () => `query GetB2CAccountSettings {\n  customerAccountSettings {\n    firstName,\n    lastName,\n    company,\n    phoneNumber,\n    email,\n    formFields {\n      name,\n      value\n    },\n  }\n}`;\n\nexport const updateB2BAccountSettings = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: updateAccountSettings(data),\n  });\n\nexport const updateBCAccountSettings = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: updateCustomerAccountSettings(data),\n  });\n\nexport const getB2BAccountSettings = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: getAccountSettings(data),\n  });\n\nexport const getBCAccountSettings = () =>\n  B3Request.graphqlB2B({\n    query: customerAccountSettings(),\n  });\n","interface GetFilterMoreListProps {\n  fieldId: string;\n  rows?: string | number;\n  name: string;\n  label: string;\n  required: boolean;\n  default: string;\n  fieldType: string;\n  xs: number;\n  variant: string;\n  size: string;\n}\n\nexport const getAccountSettingsFields = (): GetFilterMoreListProps[] => {\n  return [\n    {\n      name: 'company',\n      fieldId: 'field_company',\n      label: 'Company',\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'role',\n      fieldId: 'field_role',\n      label: 'Role',\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n  ];\n};\n\nexport const getPasswordModifiedFields = (): GetFilterMoreListProps[] => {\n  return [\n    {\n      name: 'currentPassword',\n      fieldId: 'field_current_password',\n      label: 'Current Password',\n      required: false,\n      default: '',\n      fieldType: 'password',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'password',\n      fieldId: 'field_password',\n      label: 'Password',\n      required: false,\n      default: '',\n      fieldType: 'password',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'confirmPassword',\n      fieldId: 'field_confirm_password',\n      label: 'Confirm Password',\n      required: false,\n      default: '',\n      fieldType: 'password',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n  ];\n};\n","import { Link } from 'react-router-dom';\nimport { Alert, Box, Typography } from '@mui/material';\n\nimport { useB3Lang } from '@/lib/lang';\n\nexport function UpgradeBanner() {\n  const b3Lang = useB3Lang();\n\n  return (\n    <Box>\n      <Alert\n        severity=\"info\"\n        variant=\"filled\"\n        sx={{\n          width: 'inherit',\n          '& button[title=\"Close\"]': {\n            display: 'block',\n          },\n          mb: '24px',\n          maxWidth: '1450px',\n\n          '& .MuiAlert-icon': {\n            padding: '12px 0',\n          },\n\n          '& .MuiAlert-message': {\n            width: '100%',\n          },\n        }}\n      >\n        <Box display=\"flex\" flexWrap=\"wrap\" justifyContent=\"space-between\" width=\"100%\">\n          <Box>\n            <Typography variant=\"subtitle1\" fontWeight=\"800\">\n              {b3Lang('accountSettings.registeredToB2b.title')}\n            </Typography>\n            <Typography sx={{ textWrap: 'wrap' }}>\n              {b3Lang('accountSettings.registeredToB2b.description')}\n            </Typography>\n          </Box>\n          <Typography\n            component={Link}\n            to=\"/registeredbctob2b\"\n            sx={{ textDecoration: 'none', textTransform: 'uppercase' }}\n            fontWeight=\"bold\"\n            color=\"#fff\"\n          >\n            {b3Lang('accountSettings.registeredToB2b.upgrade')}\n          </Typography>\n        </Box>\n      </Alert>\n    </Box>\n  );\n}\n","import { Fields, ParamProps } from '@/types/accountSetting';\nimport { validatorRules } from '@/utils';\n\nimport { deCodeField } from '../Registered/config';\n\nconst emailValidate = validatorRules(['email']);\n\nexport const initB2BInfo = (\n  accountSettings: any,\n  contactInformation: Partial<Fields>[],\n  accountB2BFormFields: Partial<Fields>[],\n  additionalInformation: Partial<Fields>[],\n) => {\n  const extraFields = accountSettings?.extraFields || [];\n  contactInformation.forEach((item: Partial<Fields>) => {\n    const contactItem = item;\n    if (deCodeField(item?.name || '') === 'first_name') {\n      contactItem.default = accountSettings.firstName;\n    }\n    if (deCodeField(item?.name || '') === 'last_name') {\n      contactItem.default = accountSettings.lastName;\n    }\n    if (deCodeField(item?.name || '') === 'phone') {\n      contactItem.default = accountSettings.phoneNumber;\n    }\n    if (deCodeField(item?.name || '') === 'email') {\n      contactItem.default = accountSettings.email;\n      contactItem.validate = emailValidate;\n    }\n  });\n\n  if (extraFields.length > 0) {\n    extraFields.forEach((field: CustomFieldItems) => {\n      const extraField = field;\n\n      const currentField = contactInformation.find(\n        (item) => deCodeField(item?.name || '') === extraField.fieldName,\n      );\n\n      if (currentField) {\n        currentField.default = extraField.fieldValue;\n      }\n    });\n  }\n\n  accountB2BFormFields.forEach((item: Partial<Fields>) => {\n    const formField = item;\n    if (item.name === 'role') {\n      formField.default = accountSettings.companyRoleName;\n      formField.disabled = true;\n    } else if (item.name === 'company') {\n      formField.default = accountSettings.company;\n      formField.disabled = true;\n    }\n  });\n\n  additionalInformation.forEach((item: Partial<Fields>) => {\n    const formFields = (accountSettings?.formFields || []).find(\n      (field: Partial<Fields>) => field.name === item.bcLabel,\n    );\n    const infoItem = item;\n    if (formFields) infoItem.default = formFields.value;\n  });\n\n  return [...contactInformation, ...accountB2BFormFields, ...additionalInformation];\n};\n\nexport const initBcInfo = (\n  accountSettings: any,\n  contactInformation: Partial<Fields>[],\n  additionalInformation: Partial<Fields>[],\n) => {\n  contactInformation.forEach((item: Partial<Fields>) => {\n    const contactInfoItem = item;\n    if (deCodeField(item?.name || '') === 'first_name') {\n      contactInfoItem.default = accountSettings.firstName;\n    }\n    if (deCodeField(item?.name || '') === 'last_name') {\n      contactInfoItem.default = accountSettings.lastName;\n    }\n    if (deCodeField(item?.name || '') === 'phone') {\n      contactInfoItem.default = accountSettings.phoneNumber;\n    }\n    if (deCodeField(item?.name || '') === 'email') {\n      contactInfoItem.default = accountSettings.email;\n      contactInfoItem.validate = emailValidate;\n    }\n    if (deCodeField(item?.name || '') === 'company') {\n      contactInfoItem.default = accountSettings.company;\n    }\n  });\n\n  additionalInformation.forEach((item: Partial<Fields>) => {\n    const formFields = (accountSettings?.formFields || []).find(\n      (field: Partial<Fields>) => field.name === item.bcLabel,\n    );\n    const infoItem = item;\n    if (formFields) infoItem.default = formFields.value;\n  });\n\n  return [...contactInformation, ...additionalInformation];\n};\n\nexport const b2bSubmitDataProcessing = (\n  data: CustomFieldItems,\n  accountSettings: any,\n  decryptionFields: Partial<Fields>[],\n  extraFields: Partial<Fields>[],\n) => {\n  const userExtraFields = accountSettings?.extraFields || [];\n\n  const param: Partial<ParamProps> = {};\n  param.formFields = [];\n  let pristine = true;\n  let flag = true;\n  let useExtraFieldsFlag = false;\n\n  Object.keys(data).forEach((key: string) => {\n    decryptionFields.forEach((item: Partial<Fields>) => {\n      if (key === item.name) {\n        flag = false;\n        if (deCodeField(item.name) === 'first_name') {\n          if (accountSettings.firstName !== data[item.name]) pristine = false;\n          param.firstName = data[item.name];\n        }\n        if (deCodeField(item.name) === 'last_name') {\n          if (accountSettings.lastName !== data[item.name]) pristine = false;\n          param.lastName = data[item.name];\n        }\n        if (deCodeField(item.name) === 'phone') {\n          if (accountSettings.phoneNumber !== data[item.name]) pristine = false;\n          param.phoneNumber = data[item.name];\n        }\n        if (deCodeField(item.name) === 'email') {\n          if (accountSettings.email !== data[item.name]) pristine = false;\n          param.email = data[item.name];\n        }\n        if (item.custom) {\n          const currentField = userExtraFields.find(\n            (field: CustomFieldItems) => field.fieldName === deCodeField(item?.name || ''),\n          );\n          if (currentField?.fieldValue !== data[item.name]) useExtraFieldsFlag = true;\n        }\n      }\n    });\n    if (useExtraFieldsFlag) {\n      pristine = false;\n    }\n\n    if (flag) {\n      extraFields.forEach((field: Partial<Fields>) => {\n        if (field.fieldId === key && param?.formFields) {\n          const { name } = field;\n          param.formFields.push({\n            name: field?.bcLabel || '',\n            value: data[key],\n          });\n          flag = false;\n          const account = (accountSettings?.formFields || []).find(\n            (formField: Partial<Fields>) => formField.name === field.bcLabel,\n          );\n          if (account && JSON.stringify(account.value) !== JSON.stringify(data[key])) {\n            pristine = false;\n          }\n\n          if (!accountSettings?.formFields?.length && name && !!data[name]) {\n            pristine = false;\n          }\n        }\n      });\n    }\n    if (flag) {\n      if (key === 'password') {\n        param.newPassword = data[key];\n        if (data[key]) pristine = false;\n      } else {\n        param[key] = data[key];\n      }\n    }\n    flag = true;\n  });\n\n  delete param.company;\n\n  delete param.role;\n\n  if (pristine) {\n    return undefined;\n  }\n\n  return param;\n};\n\nexport const bcSubmitDataProcessing = (\n  data: CustomFieldItems,\n  accountSettings: any,\n  decryptionFields: Partial<Fields>[],\n  extraFields: Partial<Fields>[],\n) => {\n  const param: Partial<ParamProps> = {};\n  param.formFields = [];\n  let pristine = true;\n  let flag = true;\n  Object.keys(data).forEach((key: string) => {\n    decryptionFields.forEach((item: Partial<Fields>) => {\n      if (key === item.name) {\n        flag = false;\n        if (deCodeField(item.name) === 'first_name') {\n          if (accountSettings.firstName !== data[item.name]) pristine = false;\n          param.firstName = data[item.name];\n        }\n        if (deCodeField(item.name) === 'last_name') {\n          if (accountSettings.lastName !== data[item.name]) pristine = false;\n          param.lastName = data[item.name];\n        }\n        if (deCodeField(item.name) === 'phone') {\n          if (accountSettings.phoneNumber !== data[item.name]) pristine = false;\n          param.phoneNumber = data[item.name];\n        }\n        if (deCodeField(item.name) === 'email') {\n          if (accountSettings.email !== data[item.name]) pristine = false;\n          param.email = data[item.name];\n        }\n        if (deCodeField(item.name) === 'company') {\n          if (accountSettings.company !== data[item.name]) pristine = false;\n          param.company = data[item.name];\n        }\n      }\n    });\n\n    if (flag) {\n      extraFields.forEach((field: Partial<Fields>) => {\n        if (field.fieldId === key && param?.formFields) {\n          param.formFields.push({\n            name: field?.bcLabel || '',\n            value: data[key],\n          });\n          flag = false;\n          const account = (accountSettings?.formFields || []).find(\n            (formField: Partial<Fields>) => formField.name === field.bcLabel,\n          );\n          if (account && JSON.stringify(account.value) !== JSON.stringify(data[key]))\n            pristine = false;\n        }\n      });\n    }\n\n    if (flag) {\n      if (key === 'password') {\n        param.newPassword = data[key];\n        if (data[key]) pristine = false;\n      } else {\n        param[key] = data[key];\n      }\n    }\n    flag = true;\n  });\n\n  if (pristine) {\n    return undefined;\n  }\n\n  return param;\n};\n"],"names":["isBCUser","companyId","customer","validateEmailValue","emailValidation","passwordValidation","isDisplayUpgradeBanner","isB2BUser","useAppSelector","isB2BUserSelector","companyInfoId","company","companyInfo","id","role","salesRepCompanyId","b2bFeatures","masqueradeCompany","isAgenting","Number","CustomerRole","B2C","UserTypes","MULTIPLE_B2C","includes","userType","platform","async","emailAddress","trim","emailValue","payload","email","channelId","isValid","checkUserBCEmail","checkUserEmail","data","currentPassword","password","confirmPassword","useData","control","handleSubmit","getValues","formState","errors","setValue","setError","useForm","mode","isFinishUpdate","setIsFinishUpdate","useStorageState","sessionStorage","state","portalStyle","backgroundColor","useContext","CustomStyleContext","b3Lang","useB3Lang","isMobile","useMobile","navigate","useNavigate","accountInfoFormFields","setAccountInfoFormFields","useState","decryptionFields","setDecryptionFields","extraFields","setExtraFields","isLoading","setLoading","accountSettings","setAccountSettings","isVisible","setIsVisible","useEffect","fn","getBCAccountSettings","getB2BAccountSettings","params","key","accountFormAllFields","getB2BAccountFormFields","accountFormFields","getAccountFormFields","contactInformation","filter","item","fieldId","additionalInformation","fields","initBcInfo","initB2BInfo","getAccountSettingsFields","passwordModifiedFields","getPasswordModifiedFields","all","roleItem","find","name","fieldType","snackbar","success","init","translatedFields","useMemo","fieldTranslations","field_first_name","field_last_name","field_email","field_phone_number","field_company","field_role","field_current_password","field_password","field_confirm_password","map","label","B3Spin","isSpinning","background","children","Box","UpgradeBanner","jsxs","sx","width","minHeight","bgcolor","b3HexToRgb","borderRadius","borderBottomLeftRadius","borderBottomRightRadius","color","getContrastColor","jsx","B3CustomForm","formFields","CustomButton","mt","mb","visibility","onClick","handleAddUserClick","type","message","emailFlag","error","passwordFlag","bcSubmitDataProcessing","b2bSubmitDataProcessing","handleGetUserExtraFields","custom","groupId","fieldName","deCodeField","fieldValue","newPassword","requestFn","updateBCAccountSettings","updateB2BAccountSettings","B3SStorage","clear","variant","updateAccountSettings","convertObjectToGraphql","updateCustomerAccountSettings","getAccountSettings","B3Request","graphqlB2B","query","required","default","xs","size","Alert","severity","display","maxWidth","padding","flexWrap","justifyContent","Typography","fontWeight","textWrap","component","Link","to","textDecoration","textTransform","emailValidate","validatorRules","accountB2BFormFields","forEach","contactItem","firstName","lastName","phoneNumber","validate","length","field","extraField","currentField","formField","companyRoleName","disabled","bcLabel","value","contactInfoItem","userExtraFields","param","pristine","flag","useExtraFieldsFlag","Object","keys","push","account","JSON","stringify"],"mappings":"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"}