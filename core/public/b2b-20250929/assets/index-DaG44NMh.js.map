{"version":3,"file":"index-DaG44NMh.js","sources":["../../src/pages/CompanyHierarchy/components/CompanyTableRowCard.tsx","../../src/pages/CompanyHierarchy/components/TableTree.tsx","../../src/pages/CompanyHierarchy/index.tsx"],"sourcesContent":["import { useContext, useId, useMemo, useState } from 'react';\nimport { Business as BusinessIcon, MoreHoriz as MoreHorizIcon } from '@mui/icons-material';\nimport { Box, Card, Chip, IconButton, Menu, MenuItem } from '@mui/material';\n\nimport { useB3Lang } from '@/lib/lang';\nimport { CustomStyleContext } from '@/shared/customStyleButton';\n\nimport { RecursiveNode, TreeNodeProps } from './types';\n\ninterface CompanyTableRowCardProps<T extends TreeNodeProps> {\n  company: RecursiveNode<T>;\n  currentCompanyId?: string | number;\n  selectCompanyId?: string | number;\n  onSwitchCompany?: (node: T) => void;\n  getDisplayName?: (node: T) => string;\n  getNodeId?: (node: T) => string | number;\n}\n\nfunction CompanyTableRowCard<T extends TreeNodeProps>({\n  company,\n  currentCompanyId = '',\n  selectCompanyId = '',\n  onSwitchCompany,\n  getDisplayName = (node) => node.companyName,\n  getNodeId = (node) => node.companyId,\n}: CompanyTableRowCardProps<T>) {\n  const companyNameId = useId();\n  const nodeId = getNodeId(company);\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const b3Lang = useB3Lang();\n  const {\n    state: {\n      switchAccountButton: { color = '#ED6C02' },\n    },\n  } = useContext(CustomStyleContext);\n  const isCurrentCompanyId = Number(nodeId) === Number(currentCompanyId);\n  const isSelectCompanyId = Number(nodeId) === Number(selectCompanyId);\n\n  const open = Boolean(anchorEl);\n  const isDisabledAction = useMemo(() => {\n    if (selectCompanyId) {\n      return Number(selectCompanyId) !== Number(company.companyId);\n    }\n\n    return Number(currentCompanyId) !== Number(company.companyId);\n  }, [currentCompanyId, selectCompanyId, company]);\n\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleSwitchClick = () => {\n    handleClose();\n    onSwitchCompany?.(company);\n  };\n\n  const openIcon = open\n    ? {\n        borderRadius: '10%',\n        backgroundColor: 'rgba(0, 0, 0, 0.14)',\n      }\n    : {};\n\n  return (\n    <Card\n      sx={{\n        padding: '16px',\n        marginBottom: '16px',\n      }}\n      role=\"listitem\"\n      aria-labelledby={companyNameId}\n    >\n      <Box>\n        <Box sx={{ display: 'flex', alignItems: 'flex-start', justifyContent: 'space-between' }}>\n          <Box id={companyNameId} sx={{ display: 'flex', alignItems: 'flex-start' }}>\n            <BusinessIcon sx={{ color: 'rgba(0, 0, 0, 0.54)', mr: 1 }} />\n            {getDisplayName(company)}\n          </Box>\n          {company?.channelFlag && isDisabledAction && (\n            <IconButton\n              size=\"small\"\n              onClick={handleClick}\n              aria-controls={open ? 'company-menu' : undefined}\n              aria-haspopup=\"true\"\n              aria-expanded={open ? 'true' : undefined}\n              data-testid=\"actions\"\n              sx={{\n                pt: 0,\n\n                '& svg': {\n                  ...openIcon,\n                },\n              }}\n            >\n              <MoreHorizIcon />\n            </IconButton>\n          )}\n        </Box>\n        {isSelectCompanyId && (\n          <Chip\n            label={b3Lang('companyHierarchy.chip.selectCompany')}\n            size=\"small\"\n            sx={{\n              mt: 2,\n              backgroundColor: color,\n              color: 'white',\n              height: 24,\n              '& .MuiChip-label': {\n                px: 1,\n              },\n            }}\n          />\n        )}\n        {isCurrentCompanyId && (\n          <Chip\n            label={b3Lang('companyHierarchy.chip.currentCompany')}\n            size=\"small\"\n            sx={{\n              mt: 2,\n              backgroundColor: 'primary.main',\n              color: 'white',\n              height: 24,\n              '& .MuiChip-label': {\n                px: 1,\n              },\n            }}\n          />\n        )}\n      </Box>\n      <Menu\n        id=\"company-menu\"\n        anchorEl={anchorEl}\n        open={open}\n        onClose={handleClose}\n        MenuListProps={{\n          'aria-labelledby': 'company-button',\n        }}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'right',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n      >\n        <MenuItem\n          sx={{\n            color: 'primary.main',\n          }}\n          onClick={handleSwitchClick}\n        >\n          {b3Lang('companyHierarchy.dialog.title')}\n        </MenuItem>\n      </Menu>\n    </Card>\n  );\n}\n\nexport default CompanyTableRowCard;\n","import { useContext, useMemo, useState } from 'react';\nimport {\n  Business as BusinessIcon,\n  KeyboardArrowDown as KeyboardArrowDownIcon,\n  MoreHoriz as MoreHorizIcon,\n} from '@mui/icons-material';\nimport {\n  Box,\n  Chip,\n  IconButton,\n  Menu,\n  MenuItem,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from '@mui/material';\n\nimport useMobile from '@/hooks/useMobile';\nimport { useB3Lang } from '@/lib/lang';\nimport { CustomStyleContext } from '@/shared/customStyleButton';\n\nimport CompanyTableRowCard from './CompanyTableRowCard';\nimport { RecursiveNode, TreeNodeProps } from './types';\n\ninterface CompanyTableProps<T extends TreeNodeProps> {\n  data: RecursiveNode<T>[];\n  currentCompanyId?: string | number;\n  selectCompanyId?: string | number;\n  onSwitchCompany?: (node: T) => void;\n  getDisplayName?: (node: T) => string;\n  getNodeId?: (node: T) => string | number;\n}\n\ninterface CompanyTableRowProps<T extends TreeNodeProps> {\n  node: RecursiveNode<T>;\n  level?: number;\n  currentCompanyId?: string | number;\n  selectCompanyId?: string | number;\n  onSwitchCompany?: (node: T) => void;\n  getDisplayName?: (node: T) => string;\n  getNodeId?: (node: T) => string | number;\n}\n\nfunction CompanyTableRow<T extends TreeNodeProps>({\n  node,\n  level = 0,\n  currentCompanyId = '',\n  selectCompanyId = '',\n  onSwitchCompany,\n  getDisplayName = (node) => node.companyName,\n  getNodeId = (node) => node.companyId,\n}: CompanyTableRowProps<T>) {\n  const [expanded, setExpanded] = useState(true);\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n\n  const b3Lang = useB3Lang();\n\n  const {\n    state: {\n      switchAccountButton: { color = '#ED6C02' },\n    },\n  } = useContext(CustomStyleContext);\n\n  const hasChildren = node.children && node.children.length > 0;\n  const nodeId = getNodeId(node);\n  const isCurrentCompanyId = Number(nodeId) === Number(currentCompanyId);\n\n  const isSelectCompanyId = Number(nodeId) === Number(selectCompanyId);\n  const open = Boolean(anchorEl);\n\n  const isDisabledAction = useMemo(() => {\n    if (selectCompanyId) {\n      return Number(selectCompanyId) !== Number(node.companyId);\n    }\n\n    return Number(currentCompanyId) !== Number(node.companyId);\n  }, [currentCompanyId, selectCompanyId, node]);\n\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleSwitchClick = () => {\n    handleClose();\n    onSwitchCompany?.(node);\n  };\n\n  return (\n    <>\n      <TableRow\n        sx={{\n          '&:last-child td, &:last-child th': { border: 0 },\n          '& > td': { bgcolor: 'background.paper' },\n          height: '3.25rem',\n        }}\n      >\n        <TableCell sx={{ width: '100%', py: 1 }}>\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <Box sx={{ display: 'flex', ml: level * 4, alignItems: 'center' }}>\n              {hasChildren ? (\n                <IconButton\n                  data-testid={expanded ? 'collapse' : 'open'}\n                  size=\"small\"\n                  onClick={() => setExpanded(!expanded)}\n                  sx={{ mr: 1 }}\n                >\n                  <KeyboardArrowDownIcon\n                    sx={{\n                      transform: expanded ? 'rotate(0deg)' : 'rotate(-90deg)',\n                      transition: 'transform 0.2s',\n                      color: 'rgba(0, 0, 0, 0.54)',\n                    }}\n                  />\n                </IconButton>\n              ) : (\n                <Box sx={{ width: 40 }} />\n              )}\n              <Box sx={{ mr: 1, display: 'flex', alignItems: 'center' }}>\n                <BusinessIcon sx={{ color: 'rgba(0, 0, 0, 0.54)' }} />\n              </Box>\n              <Box component=\"span\" sx={{ mr: 1 }}>\n                {getDisplayName(node)}\n              </Box>\n              {isSelectCompanyId && (\n                <Chip\n                  label={b3Lang('companyHierarchy.chip.selectCompany')}\n                  size=\"small\"\n                  sx={{\n                    backgroundColor: color,\n                    color: 'white',\n                    height: 24,\n                    '& .MuiChip-label': {\n                      px: 1,\n                    },\n                  }}\n                />\n              )}\n              {isCurrentCompanyId && (\n                <Chip\n                  label={b3Lang('companyHierarchy.chip.currentCompany')}\n                  size=\"small\"\n                  sx={{\n                    backgroundColor: 'primary.main',\n                    color: 'white',\n                    height: 24,\n                    '& .MuiChip-label': {\n                      px: 1,\n                    },\n                  }}\n                />\n              )}\n            </Box>\n          </Box>\n        </TableCell>\n        <TableCell align=\"right\" sx={{ width: 48, py: 1 }}>\n          {node?.channelFlag && isDisabledAction && (\n            <IconButton\n              size=\"small\"\n              onClick={handleClick}\n              aria-controls={open ? 'company-menu' : undefined}\n              aria-haspopup=\"true\"\n              aria-expanded={open ? 'true' : undefined}\n              data-testid=\"actions\"\n            >\n              <MoreHorizIcon />\n            </IconButton>\n          )}\n          <Menu\n            id=\"company-menu\"\n            anchorEl={anchorEl}\n            open={open}\n            onClose={handleClose}\n            MenuListProps={{\n              'aria-labelledby': 'company-button',\n            }}\n            anchorOrigin={{\n              vertical: 'bottom',\n              horizontal: 'right',\n            }}\n            transformOrigin={{\n              vertical: 'top',\n              horizontal: 'right',\n            }}\n          >\n            <MenuItem\n              sx={{\n                color: 'primary.main',\n              }}\n              onClick={handleSwitchClick}\n            >\n              {b3Lang('companyHierarchy.dialog.title')}\n            </MenuItem>\n          </Menu>\n        </TableCell>\n      </TableRow>\n      {expanded &&\n        hasChildren &&\n        (node?.children || []).map((child) => (\n          <CompanyTableRow\n            key={getNodeId(child)}\n            node={child}\n            level={level + 1}\n            currentCompanyId={currentCompanyId}\n            selectCompanyId={selectCompanyId}\n            onSwitchCompany={onSwitchCompany}\n            getDisplayName={getDisplayName}\n            getNodeId={getNodeId}\n          />\n        ))}\n    </>\n  );\n}\n\nfunction CompanyHierarchyTableTree<T extends TreeNodeProps>({\n  data,\n  currentCompanyId,\n  selectCompanyId,\n  onSwitchCompany,\n  getDisplayName = (node) => node.companyName,\n  getNodeId = (node) => node.companyId,\n}: CompanyTableProps<T>) {\n  const [isMobile] = useMobile();\n  const b3Lang = useB3Lang();\n\n  const handleExpandCompanyData = (\n    companies: RecursiveNode<T>[] | [],\n    companyData: RecursiveNode<T>[],\n  ) => {\n    if (companies.length === 0) return companyData;\n    companies.forEach((company) => {\n      companyData.push({\n        ...company,\n        children: [],\n      });\n\n      const isHasChildren = company.children && company.children.length > 0;\n\n      if (isHasChildren) {\n        handleExpandCompanyData(company?.children || [], companyData);\n      }\n    });\n\n    return companyData;\n  };\n  const mobileCompanyData = handleExpandCompanyData(data, []);\n\n  return (\n    <>\n      {isMobile ? (\n        <div role=\"list\">\n          {mobileCompanyData.map((company) => (\n            <CompanyTableRowCard\n              key={getNodeId(company)}\n              company={company}\n              currentCompanyId={currentCompanyId}\n              selectCompanyId={selectCompanyId}\n              onSwitchCompany={onSwitchCompany}\n              getDisplayName={getDisplayName}\n              getNodeId={getNodeId}\n            />\n          ))}\n        </div>\n      ) : (\n        <Paper sx={{ width: '100%', minHeight: '100px', mx: 'auto', mt: 2 }}>\n          <TableContainer>\n            <Table size=\"small\" aria-label=\"company structure table\">\n              <TableHead>\n                <TableRow sx={{ height: '3.25rem' }}>\n                  <TableCell sx={{ fontWeight: 500, pl: 8 }}>\n                    {b3Lang('companyHierarchy.table.name')}\n                  </TableCell>\n                  <TableCell sx={{ width: 48 }} />\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {data.map((company) => (\n                  <CompanyTableRow\n                    key={getNodeId(company)}\n                    node={company}\n                    currentCompanyId={currentCompanyId}\n                    selectCompanyId={selectCompanyId}\n                    onSwitchCompany={onSwitchCompany}\n                    getDisplayName={getDisplayName}\n                    getNodeId={getNodeId}\n                  />\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Paper>\n      )}\n    </>\n  );\n}\n\nexport default CompanyHierarchyTableTree;\n","import { useEffect, useRef, useState } from 'react';\nimport { Box } from '@mui/material';\n\nimport B3Spin from '@/components/spin/B3Spin';\nimport { getCompanySubsidiaries } from '@/shared/service/b2b';\nimport { useAppSelector } from '@/store';\nimport { CompanyHierarchyListProps, CompanyHierarchyProps } from '@/types';\nimport { buildHierarchy } from '@/utils';\n\nimport HierarchyDialog from './components/HierarchyDialog';\nimport CompanyHierarchyTableTree from './components/TableTree';\n\nfunction CompanyHierarchy() {\n  const [data, setData] = useState<CompanyHierarchyProps[]>([]);\n\n  const [open, setOpen] = useState<boolean>(false);\n\n  const [currentRow, setCurrentRow] = useState<CompanyHierarchyProps | null>(null);\n\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const originDataRef = useRef<CompanyHierarchyListProps[]>([]);\n\n  const { id: currentCompanyId } = useAppSelector(({ company }) => company.companyInfo);\n\n  const { selectCompanyHierarchyId } = useAppSelector(\n    ({ company }) => company.companyHierarchyInfo,\n  );\n\n  const init = async () => {\n    setLoading(true);\n\n    const { companySubsidiaries } = await getCompanySubsidiaries();\n\n    const list = buildHierarchy({\n      data: companySubsidiaries || [],\n    });\n\n    originDataRef.current = companySubsidiaries;\n\n    setData(list);\n\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    if (currentCompanyId) {\n      init();\n    }\n\n    // ignore init\n    // due they are funtions that do not depend on any reactive value\n  }, [currentCompanyId]);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleRowClick = (row: CompanyHierarchyProps) => {\n    setCurrentRow(row);\n    setOpen(true);\n  };\n\n  return (\n    <B3Spin isSpinning={loading}>\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n          width: '100%',\n        }}\n      >\n        <CompanyHierarchyTableTree<CompanyHierarchyProps>\n          data={data}\n          onSwitchCompany={handleRowClick}\n          currentCompanyId={currentCompanyId}\n          selectCompanyId={selectCompanyHierarchyId}\n        />\n\n        <HierarchyDialog\n          open={open}\n          handleClose={handleClose}\n          currentRow={currentRow}\n          companyHierarchyAllList={originDataRef?.current || []}\n        />\n      </Box>\n    </B3Spin>\n  );\n}\n\nexport default CompanyHierarchy;\n"],"names":["CompanyTableRowCard","company","currentCompanyId","selectCompanyId","onSwitchCompany","getDisplayName","node","getNodeId","companyNameId","useId","nodeId","anchorEl","setAnchorEl","useState","b3Lang","useB3Lang","color","useContext","CustomStyleContext","isCurrentCompanyId","isSelectCompanyId","open","isDisabledAction","useMemo","handleClick","event","handleClose","handleSwitchClick","openIcon","jsxs","Card","Box","jsx","BusinessIcon","IconButton","MoreHorizIcon","Chip","Menu","MenuItem","CompanyTableRow","level","expanded","setExpanded","hasChildren","Fragment","TableRow","TableCell","KeyboardArrowDownIcon","child","CompanyHierarchyTableTree","data","isMobile","useMobile","handleExpandCompanyData","companies","companyData","mobileCompanyData","Paper","TableContainer","Table","TableHead","TableBody","CompanyHierarchy","setData","setOpen","currentRow","setCurrentRow","loading","setLoading","originDataRef","useRef","useAppSelector","selectCompanyHierarchyId","init","companySubsidiaries","getCompanySubsidiaries","list","buildHierarchy","useEffect","handleRowClick","row","B3Spin","HierarchyDialog"],"mappings":"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"}