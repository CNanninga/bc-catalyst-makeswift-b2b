import{B as e,aD as n,ae as r}from"./react-setup-B5wPcSA9.js";import"./load-functions-DCmK5p8C.js";import"./intl-D34a3Rgg.js";var o=(t=>(t[t.Approved=0]="Approved",t[t.Deleted=20]="Deleted",t[t.Draft=30]="Draft",t[t.ReadyForApproval=40]="ReadyForApproval",t[t.Rejected=50]="Rejected",t))(o||{});const g=t=>typeof t=="number"?t===o.Rejected?"status: [".concat(o.Deleted,", ").concat(o.Rejected,"]"):"status: ".concat(t):typeof t=="object"?"status: [".concat(t,"]"):"",h=({offset:t=0,first:s=50,status:i="",createdBy:p="",email:c="",search:u="",isDefault:m=!0})=>" query B2BCustomerShoppingLists {\n  shoppingLists (\n    offset: ".concat(t,"\n    first: ").concat(s,'\n    search: "').concat(u,'"\n    createdBy: "').concat(p,'"\n    email: "').concat(c,'"\n    ').concat(g(i),"\n    isDefault: ").concat(m,"\n  ){\n    totalCount,\n    pageInfo{\n      hasNextPage,\n      hasPreviousPage,\n    },\n    edges{\n      node{\n        id,\n        name,\n        description,\n        status,\n        customerInfo{\n          firstName,\n          lastName,\n          userId,\n          email,\n          role,\n        },\n        updatedAt,\n        isOwner,\n        products {\n          totalCount,\n        }\n        approvedFlag,\n        companyInfo {\n          companyId,\n          companyName,\n          companyAddress,\n          companyCountry,\n          companyState,\n          companyCity,\n          companyZipCode,\n          phoneNumber,\n          bcId,\n        },\n      }\n    }\n  }\n}"),a="shoppingList {\n  id,\n  name,\n  description,\n  status,\n  approvedFlag,\n  customerInfo{\n    firstName,\n    lastName,\n    userId,\n    email,\n  },\n  isOwner,\n  grandTotal,\n  totalDiscount,\n  totalTax,\n  isShowGrandTotal,\n  companyInfo {\n    companyId,\n    companyName,\n    companyAddress,\n    companyCountry,\n    companyState,\n    companyCity,\n    companyZipCode,\n    phoneNumber,\n    bcId,\n  },\n}",I=t=>"\n  mutation UpdateB2BShoppingList ($id: Int!, $shoppingListData: ShoppingListsInputType!) {\n    ".concat(t,"(\n      id: $id\n      shoppingListData: $shoppingListData\n    ) {\n      ").concat(a,"\n    }\n  }\n"),l=t=>"\nmutation CreateShoppingList($shoppingListData: ShoppingListsInputType!){\n  ".concat(t,"(\n    shoppingListData: $shoppingListData\n  ) {\n    ").concat(a,"\n  }\n}"),L=t=>"mutation B2BUpdateShoppingListItems {\n  shoppingListsItemsUpdate(\n    itemId: ".concat(t.itemId,"\n    shoppingListId: ").concat(t.shoppingListId,"\n    itemData: ").concat(r(t.itemData||[]),"\n  ) {\n    shoppingListsItem {\n      id,\n      createdAt,\n      updatedAt,\n      productId,\n      variantId,\n      quantity,\n      productName,\n      optionList,\n      itemId,\n      baseSku,\n      variantSku,\n      basePrice,\n      discount,\n      tax,\n      enteredInclusive,\n      productUrl,\n      primaryImage,\n      productNote,\n    }\n  }\n}"),y=t=>"\n  query B2BShoppingListDetails {\n    shoppingList (\n      id: ".concat(t.id,"\n    ) {\n      id,\n      createdAt,\n      updatedAt,\n      name,\n      description,\n      status,\n      reason,\n      customerInfo {\n        firstName,\n        lastName,\n        userId,\n        email,\n        role,\n      },\n      isOwner,\n      grandTotal,\n      totalDiscount,\n      totalTax,\n      isShowGrandTotal,\n      channelId,\n      channelName,\n      approvedFlag,\n      companyInfo {\n        companyId,\n        companyName,\n        companyAddress,\n        companyCountry,\n        companyState,\n        companyCity,\n        companyZipCode,\n        phoneNumber,\n        bcId,\n      },\n      products (\n        offset: ").concat(t.offset||0,"\n        first: ").concat(t.first||100,',\n        search: "').concat(t.search||"",'",\n        orderBy: "').concat((t==null?void 0:t.orderBy)||"-updatedAt",'"\n      ) {\n        totalCount,\n        edges {\n          node {\n            id,\n            createdAt,\n            updatedAt,\n            productId,\n            variantId,\n            quantity,\n            productName,\n            optionList,\n            itemId,\n            baseSku,\n            variantSku,\n            basePrice,\n            discount,\n            tax,\n            enteredInclusive,\n            productUrl,\n            primaryImage,\n            productNote,\n          }\n        }\n      }\n    }\n  }\n'),B=t=>"mutation AddItemsToShoppingList {\n  shoppingListsItemsCreate(\n    shoppingListId: ".concat(t.shoppingListId,",\n    items: ").concat(n(t.items||[]),"\n  ) {\n    shoppingListsItems {\n      id,\n      createdAt,\n      updatedAt,\n      productId,\n      variantId,\n      quantity,\n      productName,\n      optionList,\n      itemId,\n      baseSku,\n      variantSku,\n      basePrice,\n      discount,\n      tax,\n      enteredInclusive,\n      productUrl,\n      primaryImage,\n    }\n  }\n}"),$=t=>"mutation {\n  shoppingListsItemsDelete(\n    itemId: ".concat(t.itemId,",\n    shoppingListId: ").concat(t.shoppingListId,",\n  ) {\n    message,\n  }\n}"),S=({offset:t=0,first:s=50,search:i="",channelId:p=1})=>"query CustomerShoppingLists {\n  customerShoppingLists (\n    offset: ".concat(t,"\n    first: ").concat(s,'\n    search: "').concat(i,'"\n    channelId: ').concat(p,"\n  ){\n    totalCount,\n    pageInfo{\n      hasNextPage,\n      hasPreviousPage,\n    },\n    edges{\n      node{\n        id,\n        name,\n        description,\n        updatedAt,\n        products {\n          totalCount,\n        }\n      }\n    }\n  }\n}"),d="\nshoppingList {\n  id,\n  name,\n  description,\n  grandTotal,\n  totalDiscount,\n  totalTax,\n  isShowGrandTotal,\n}",q=t=>"mutation($id: Int!, $shoppingListData: CustomerShoppingListsInputType!){\n  ".concat(t,"(\n    id: $id\n    shoppingListData: $shoppingListData\n  ) {\n    ").concat(d,"\n  }\n}"),f=t=>"mutation CreateCustomerShoppingList($shoppingListData: CustomerShoppingListsInputType!){\n  ".concat(t,"(\n    shoppingListData: $shoppingListData\n  ) {\n    ").concat(d,"\n  }\n}"),C=t=>"{\n  customerShoppingList (\n    id: ".concat(t.id,"\n  ) {\n    id,\n    createdAt,\n    updatedAt,\n    name,\n    description,\n    reason,\n    grandTotal,\n    totalDiscount,\n    totalTax,\n    isShowGrandTotal,\n    channelId,\n    channelName,\n    products (\n      offset: ").concat(t.offset||0,"\n      first: ").concat(t.first||100,',\n      search: "').concat(t.search||"",'",\n    ) {\n      totalCount,\n      edges {\n        node {\n          id,\n          createdAt,\n          updatedAt,\n          productId,\n          variantId,\n          quantity,\n          productName,\n          optionList,\n          itemId,\n          baseSku,\n          variantSku,\n          basePrice,\n          discount,\n          tax,\n          enteredInclusive,\n          productUrl,\n          primaryImage,\n          productNote,\n        }\n      }\n    }\n  }\n}'),D=t=>"mutation AddItemsToCustomerShoppingList {\n  customerShoppingListsItemsCreate (\n    shoppingListId: ".concat(t.shoppingListId,",\n    items: ").concat(n(t.items||[]),"\n  ) {\n    shoppingListsItems {\n      id,\n      createdAt,\n      updatedAt,\n      productId,\n      variantId,\n      quantity,\n      productName,\n      optionList,\n      itemId,\n      baseSku,\n      variantSku,\n      basePrice,\n      discount,\n      tax,\n      enteredInclusive,\n      productUrl,\n      primaryImage,\n    }\n  }\n}"),v=t=>"mutation {\n  customerShoppingListsItemsUpdate (\n    itemId: ".concat(t.itemId,"\n    shoppingListId: ").concat(t.shoppingListId,"\n    itemData: ").concat(r(t.itemData||[]),"\n  ) {\n    shoppingListsItem {\n      id,\n      createdAt,\n      updatedAt,\n      productId,\n      variantId,\n      quantity,\n      productName,\n      optionList,\n      itemId,\n      baseSku,\n      variantSku,\n      basePrice,\n      discount,\n      tax,\n      enteredInclusive,\n      productUrl,\n      primaryImage,\n    }\n  }\n}"),b=t=>"mutation {\n  customerShoppingListsItemsDelete (\n    itemId: ".concat(t.itemId,",\n    shoppingListId: ").concat(t.shoppingListId,",\n  ) {\n    message,\n  }\n}"),A=()=>'{\n  storeConfigSwitchStatus(\n    key: "junior_place_order",\n  ) {\n    id,\n    key,\n    isEnabled,\n  }\n}',N=(t,s,i)=>"\n  query GetShoppingListsCreatedByUser {\n    ".concat(i,"(\n      companyId: ").concat(t,",\n      module: ").concat(s,",\n    ){\n      results,\n    }\n  }\n"),k=(t={})=>e.graphqlB2B({query:h(t)}).then(s=>s.shoppingLists),x=t=>e.graphqlB2B({query:l("shoppingListsCreate"),variables:{shoppingListData:{companyId:t.companyId,name:t.name,description:t.description,status:t.status}}}),j=t=>e.graphqlB2B({query:I("shoppingListsUpdate"),variables:{id:t!=null&&t.id?Number(t.id):1,shoppingListData:{name:t.name,description:t.description,status:t.status}}}),w=(t={})=>e.graphqlB2B({query:y(t)}).then(s=>s.shoppingList),G=(t={})=>e.graphqlB2B({query:B(t)}),R=(t={})=>e.graphqlB2B({query:L(t)}),O=(t={})=>e.graphqlB2B({query:$(t)}),F=(t={})=>e.graphqlB2B({query:S(t)}).then(s=>s.customerShoppingLists),Z=t=>e.graphqlB2B({query:f("customerShoppingListsCreate"),variables:{shoppingListData:{name:t.name,description:t.description,channelId:t!=null&&t.channelId?Number(t.channelId):1}}}),J=t=>e.graphqlB2B({query:q("customerShoppingListsUpdate"),variables:{id:t!=null&&t.id?Number(t.id):1,shoppingListData:{name:t.name,description:t.description,channelId:t!=null&&t.channelId?Number(t.channelId):1}}}),_=(t={})=>e.graphqlB2B({query:C(t)}).then(s=>s.customerShoppingList),E=(t={})=>e.graphqlB2B({query:D(t)}),z=(t={})=>e.graphqlB2B({query:v(t)}),H=(t={})=>e.graphqlB2B({query:b(t)}),K=()=>e.graphqlB2B({query:A()}),M=(t,s)=>e.graphqlB2B({query:N(t,s,"createdByUser")});export{o as S,F as a,G as b,E as c,x as d,Z as e,M as f,k as g,z as h,K as i,j,J as k,O as l,H as m,w as n,_ as o,R as u};
//# sourceMappingURL=shoppingList-t_D6w66q.js.map
