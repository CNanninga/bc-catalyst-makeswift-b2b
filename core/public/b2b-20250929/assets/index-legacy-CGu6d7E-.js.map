{"version":3,"file":"index-legacy-CGu6d7E-.js","sources":["../../src/pages/Invoice/index.tsx","../../src/pages/Invoice/utils/pdf.ts","../../src/pages/Invoice/components/B3Pulldown.tsx","../../src/pages/Invoice/components/triggerPdfDownload.tsx","../../src/pages/Invoice/components/InvoiceFooter.tsx","../../src/pages/Invoice/components/InvoiceStatus.tsx","../../src/pages/Invoice/components/PaymentsHistory.tsx","../../src/pages/Invoice/utils/config.ts","../../src/pages/Invoice/components/PaymentSuccess.tsx","../../src/pages/Invoice/components/PrintTemplate.tsx","../../src/pages/Invoice/InvoiceItemCard.tsx"],"sourcesContent":["import { useContext, useEffect, useRef, useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { Box, Button, InputAdornment, TextField, Typography } from '@mui/material';\nimport cloneDeep from 'lodash-es/cloneDeep';\n\nimport { B2BAutoCompleteCheckbox } from '@/components';\nimport B3Spin from '@/components/spin/B3Spin';\nimport { B3PaginationTable, GetRequestList } from '@/components/table/B3PaginationTable';\nimport { TableColumnItem } from '@/components/table/B3Table';\nimport { permissionLevels } from '@/constants';\nimport { useMobile, useSort } from '@/hooks';\nimport { useB3Lang } from '@/lib/lang';\nimport { GlobalContext } from '@/shared/global';\nimport { exportInvoicesAsCSV, getInvoiceList, getInvoiceStats } from '@/shared/service/b2b';\nimport { rolePermissionSelector, useAppSelector } from '@/store';\nimport { CustomerRole } from '@/types';\nimport { InvoiceList, InvoiceListNode } from '@/types/invoice';\nimport {\n  b2bPermissionsMap,\n  currencyFormat,\n  currencyFormatInfo,\n  displayFormat,\n  getUTCTimestamp,\n  handleGetCorrespondingCurrencyToken,\n  snackbar,\n  validatePermissionWithComparisonType,\n} from '@/utils';\nimport b2bLogger from '@/utils/b3Logger';\n\nimport B3Filter from '../../components/filter/B3Filter';\n\nimport B3Pulldown from './components/B3Pulldown';\nimport InvoiceFooter from './components/InvoiceFooter';\nimport InvoiceStatus from './components/InvoiceStatus';\nimport PaymentsHistory from './components/PaymentsHistory';\nimport PaymentSuccess from './components/PaymentSuccess';\nimport PrintTemplate from './components/PrintTemplate';\nimport InvoiceListType, {\n  defaultSortKey,\n  exportOrderByArr,\n  filterFormConfig,\n  filterFormConfigsTranslationVariables,\n  sortIdArr,\n} from './utils/config';\nimport { formattingNumericValues } from './utils/payment';\nimport { handlePrintPDF } from './utils/pdf';\nimport { InvoiceItemCard } from './InvoiceItemCard';\n\ninterface FilterSearchProps {\n  [key: string]: string | number | number[] | null;\n  q: string;\n  startValue: number | string;\n  endValue: number | string;\n  companyIds: number[];\n}\n\ninterface PaginationTableRefProps extends HTMLInputElement {\n  getList: () => void;\n  getCacheList: () => void;\n  setCacheAllList: (items?: InvoiceList[]) => void;\n  setList: (items?: InvoiceListNode[]) => void;\n  getSelectedValue: () => void;\n}\n\nconst initFilter = {\n  q: '',\n  first: 10,\n  offset: 0,\n  orderBy: `-${sortIdArr[defaultSortKey]}`,\n  companyIds: [],\n};\n\nfunction useData() {\n  const role = useAppSelector(({ company }) => company.customer.role);\n  const isAgenting = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.isAgenting);\n\n  const companyInfoId = useAppSelector(({ company }) => company.companyInfo.id);\n  const { selectCompanyHierarchyId, isEnabledCompanyHierarchy } = useAppSelector(\n    ({ company }) => company.companyHierarchyInfo,\n  );\n  const salesRepCompanyId = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.id);\n\n  const { invoicePayPermission, purchasabilityPermission } = useAppSelector(rolePermissionSelector);\n  const currentCompanyId =\n    role === CustomerRole.SUPER_ADMIN && isAgenting\n      ? Number(salesRepCompanyId)\n      : Number(companyInfoId);\n\n  const { invoice: invoiceSubViewPermission } = useAppSelector(\n    ({ company }) => company.pagesSubsidiariesPermission,\n  );\n\n  return {\n    isAgenting,\n    selectCompanyHierarchyId,\n    isEnabledCompanyHierarchy,\n    invoicePayPermission,\n    purchasabilityPermission,\n    currentCompanyId,\n    invoiceSubViewPermission,\n  };\n}\n\nfunction Invoice() {\n  const currentDate = new Date().getTime();\n  const b3Lang = useB3Lang();\n\n  const {\n    isAgenting,\n    selectCompanyHierarchyId,\n    isEnabledCompanyHierarchy,\n    invoicePayPermission,\n    purchasabilityPermission,\n    currentCompanyId,\n    invoiceSubViewPermission,\n  } = useData();\n\n  const navigate = useNavigate();\n  const [isMobile] = useMobile();\n  const paginationTableRef = useRef<PaginationTableRefProps | null>(null);\n\n  const { decimal_places: decimalPlaces = 2 } = currencyFormatInfo();\n\n  const [isRequestLoading, setIsRequestLoading] = useState<boolean>(false);\n  const [isOpenHistory, setIsOpenHistory] = useState<boolean>(false);\n  const [currentInvoiceId, setCurrentInvoiceId] = useState<string>('');\n  const [receiptId, setReceiptId] = useState<string>('');\n  const [type, setType] = useState<string>('');\n  const [unpaidAmount, setUnpaidAmount] = useState<number>(0);\n  const [overdueAmount, setOverdueAmount] = useState<number>(0);\n  const [checkedArr, setCheckedArr] = useState<CustomFieldItems | InvoiceListNode[]>([]);\n  const [selectedPay, setSelectedPay] = useState<CustomFieldItems | InvoiceListNode[]>([]);\n  const [list, setList] = useState<InvoiceListNode[]>([]);\n\n  const [filterData, setFilterData] = useState<Partial<FilterSearchProps>>({});\n\n  const [exportCsvText, setExportCsvText] = useState<string>(b3Lang('invoice.exportCsvText'));\n\n  const [filterChangeFlag, setFilterChangeFlag] = useState(false);\n  const [filterLists, setFilterLists] = useState<InvoiceListNode[]>([]);\n  const [selectAllPay, setSelectAllPay] = useState<boolean>(invoicePayPermission);\n\n  const invoiceSubPayPermission = validatePermissionWithComparisonType({\n    level: permissionLevels.COMPANY_SUBSIDIARIES,\n    code: b2bPermissionsMap.invoicePayPermission,\n  });\n\n  const {\n    state: { bcLanguage },\n  } = useContext(GlobalContext);\n\n  const [handleSetOrderBy, order, orderBy] = useSort(\n    sortIdArr,\n    defaultSortKey,\n    filterData,\n    setFilterData,\n  );\n\n  const location = useLocation();\n\n  const isFiltering = (filterData: Partial<FilterSearchProps>) =>\n    Object.keys(filterData).some(\n      (key) => key !== 'first' && key !== 'offset' && key !== 'orderBy' && filterData[key],\n    );\n\n  const cacheFilterLists = (edges: InvoiceListNode[]) => {\n    if (filterChangeFlag) {\n      setFilterLists(edges);\n      setFilterChangeFlag(false);\n      return;\n    }\n\n    if (!filterLists.length) setFilterLists(edges);\n\n    const copyCacheFilterList = [...filterLists];\n\n    edges.forEach((item: InvoiceListNode) => {\n      const option = item?.node || item;\n      const isExist = filterLists.some((cache: InvoiceListNode) => {\n        const cacheOption = cache.node;\n        return cacheOption.id === option.id;\n      });\n\n      if (!isExist) {\n        copyCacheFilterList.push(item);\n      }\n    });\n\n    setFilterLists(copyCacheFilterList);\n  };\n\n  const handleStatisticsInvoiceAmount = async () => {\n    try {\n      setIsRequestLoading(true);\n      const { invoiceStats } = await getInvoiceStats(\n        filterData?.status ? Number(filterData.status) : 0,\n        Number(decimalPlaces),\n        filterData?.companyIds || [],\n      );\n\n      if (invoiceStats) {\n        const { overDueBalance, totalBalance } = invoiceStats;\n        setUnpaidAmount(Number(formattingNumericValues(Number(totalBalance), decimalPlaces)));\n        setOverdueAmount(Number(formattingNumericValues(Number(overDueBalance), decimalPlaces)));\n      }\n    } catch (err) {\n      b2bLogger.error(err);\n    } finally {\n      setIsRequestLoading(false);\n    }\n  };\n\n  const handleChange = (key: string, value: string) => {\n    if (key === 'search') {\n      setFilterData({\n        ...filterData,\n        q: value,\n      });\n      setFilterChangeFlag(true);\n      setType(InvoiceListType.NORMAL);\n    }\n  };\n\n  const handleFilterChange = (value: Partial<FilterSearchProps>) => {\n    const startValue = value?.startValue\n      ? getUTCTimestamp(new Date(value?.startValue).getTime() / 1000)\n      : '';\n\n    const endValue = value?.endValue\n      ? getUTCTimestamp(new Date(value?.endValue).getTime() / 1000, true)\n      : '';\n\n    const status = value?.status === 3 ? 0 : value?.status;\n\n    const search: Partial<FilterSearchProps> = {\n      status: `${status}` || '',\n      beginDateAt: startValue,\n      endDateAt: endValue,\n      beginDueDateAt: value?.status === 0 ? parseInt(`${currentDate / 1000}`, 10) : '',\n      endDueDateAt: value?.status === 3 ? parseInt(`${currentDate / 1000}`, 10) : '',\n    };\n\n    setFilterData({\n      ...filterData,\n      ...search,\n    });\n    setFilterChangeFlag(true);\n    setType(InvoiceListType.NORMAL);\n  };\n\n  const getSelectCheckbox = (selectCheckbox: Array<string | number>) => {\n    if (selectCheckbox.length > 0) {\n      const productList = paginationTableRef.current?.getCacheList() || [];\n\n      const checkedItems = selectCheckbox.map((item: number | string) => {\n        const newItems = productList.find((product: InvoiceListNode) => {\n          const { node } = product;\n\n          return Number(node.id) === Number(item);\n        });\n\n        return newItems;\n      });\n\n      const newEnableItems = checkedItems.filter(\n        (item: InvoiceListNode | undefined) => item && !item.node.disableCurrentCheckbox,\n      );\n      setCheckedArr([...newEnableItems]);\n    } else {\n      setCheckedArr([]);\n    }\n  };\n\n  const handleViewInvoice = async (\n    id: string,\n    status: string | number,\n    invoiceCompanyId: string,\n  ) => {\n    try {\n      const invoicePay =\n        Number(invoiceCompanyId) === Number(currentCompanyId)\n          ? invoicePayPermission\n          : invoiceSubPayPermission;\n      setIsRequestLoading(true);\n      const isPayNow = purchasabilityPermission && invoicePay && status !== 2;\n      const pdfUrl = await handlePrintPDF(id, isPayNow);\n\n      if (!pdfUrl) {\n        snackbar.error(b3Lang('invoice.pdfUrlResolutionError'));\n        return;\n      }\n\n      const { href } = window.location;\n      if (!href.includes('invoice')) {\n        return;\n      }\n\n      window.open(pdfUrl, '_blank', 'fullscreen=yes');\n    } catch (err) {\n      b2bLogger.error(err);\n    } finally {\n      setIsRequestLoading(false);\n    }\n  };\n\n  const handleSetSelectedInvoiceAccount = (newPrice: number | string, invoiceId: string) => {\n    const currentOriginInvoice = checkedArr.find((invoice: InvoiceListNode) => {\n      const {\n        node: { id },\n      } = invoice;\n\n      return Number(id) === Number(invoiceId);\n    });\n\n    if (selectedPay.length > 0) {\n      const newInvoices = selectedPay.map((selectedItem: InvoiceListNode) => {\n        const {\n          node: { id, openBalance },\n        } = selectedItem;\n        const {\n          node: { openBalance: currentOriginOpenBalance },\n        } = currentOriginInvoice;\n\n        if (Number(id) === Number(invoiceId)) {\n          openBalance.value =\n            Number(currentOriginOpenBalance.value) < Number(newPrice)\n              ? currentOriginOpenBalance.value\n              : newPrice;\n        }\n\n        return selectedItem;\n      });\n\n      setSelectedPay(newInvoices);\n    }\n  };\n\n  const handleExportInvoiceAsCSV = async () => {\n    try {\n      setIsRequestLoading(true);\n      const filtering = filterData ? isFiltering(filterData) : false;\n      const currentCheckedArr = filtering\n        ? filterLists.filter((item: InvoiceListNode) =>\n            checkedArr.some((item2: InvoiceListNode) => item?.node?.id === item2?.node?.id),\n          )\n        : checkedArr;\n\n      const invoiceNumber = currentCheckedArr.map((item: InvoiceListNode) => item.node.id);\n      const invoiceStatus = filterData?.status ? [Number(filterData.status)] : [];\n\n      let orderByFiled = '-invoice_number';\n      if (filterData?.orderBy) {\n        const orderByStr = String(filterData.orderBy);\n        orderByFiled = orderByStr.includes('-')\n          ? `-${exportOrderByArr[orderByStr.split('-')[1]]}`\n          : exportOrderByArr[orderByStr];\n      }\n\n      const invoiceFilterData = {\n        search: filterData?.q || '',\n        idIn: `${invoiceNumber || ''}`,\n        orderNumber: '',\n        beginDateAt: filterData?.beginDateAt || null,\n        endDateAt: filterData?.endDateAt || null,\n        status: invoiceStatus,\n        orderBy: orderByFiled,\n        companyIds: filterData?.companyIds || [],\n      };\n\n      const { invoicesExport } = await exportInvoicesAsCSV({\n        invoiceFilterData,\n        lang: bcLanguage || 'en',\n      });\n\n      if (invoicesExport?.url) {\n        window.open(invoicesExport?.url, '_blank');\n      }\n    } catch (err) {\n      b2bLogger.error(err);\n    } finally {\n      setIsRequestLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    const newInitFilter = {\n      ...initFilter,\n      companyIds: [Number(selectCompanyHierarchyId) || Number(currentCompanyId)],\n    };\n    if (location?.search) {\n      const params = new URLSearchParams(location.search);\n      const getInvoiceId = params.get('invoiceId') || '';\n      const getReceiptId = params.get('receiptId') || '';\n\n      if (getInvoiceId) {\n        setFilterData({\n          ...newInitFilter,\n          q: getInvoiceId,\n        });\n        setType(InvoiceListType.DETAIL);\n      }\n\n      if (getReceiptId) {\n        // open Successful page\n        setType(InvoiceListType.CHECKOUT);\n        setFilterData({\n          ...newInitFilter,\n        });\n        setReceiptId(getReceiptId);\n      }\n    } else {\n      setType(InvoiceListType.NORMAL);\n      setFilterData({\n        ...newInitFilter,\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location, selectCompanyHierarchyId]);\n\n  const handleSelectCompanies = (company: number[]) => {\n    const newCompanyIds = company.includes(-1) ? [] : company;\n    setFilterData({\n      ...filterData,\n      companyIds: newCompanyIds,\n    });\n\n    setSelectAllPay(\n      company.includes(currentCompanyId) || company.includes(-1)\n        ? invoicePayPermission\n        : invoiceSubPayPermission,\n    );\n  };\n\n  useEffect(() => {\n    const selectedInvoice =\n      checkedArr.filter((item: InvoiceListNode) => {\n        const {\n          node: { openBalance },\n        } = item;\n\n        return Number(openBalance.value) !== 0;\n      }) || [];\n\n    if (selectedInvoice.length > 0) {\n      if (selectedPay.length === 0) {\n        setSelectedPay(cloneDeep(selectedInvoice));\n      } else {\n        const newArr = selectedInvoice.map((checkedItem: InvoiceListNode) => {\n          const {\n            node: { id, openBalance },\n          } = checkedItem;\n\n          const currentSelectedItem = selectedPay.find((item: InvoiceListNode) => {\n            const {\n              node: { id: selectedId },\n            } = item;\n\n            return Number(id) === Number(selectedId);\n          });\n\n          if (currentSelectedItem) {\n            const {\n              node: { openBalance: currentOpenBalance },\n            } = currentSelectedItem;\n\n            openBalance.value = currentOpenBalance.value;\n          }\n\n          return checkedItem;\n        });\n\n        setSelectedPay(cloneDeep(newArr));\n      }\n    } else {\n      setSelectedPay([]);\n    }\n    // ignore selectedPay cause it will trigger an useEffect loop\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [checkedArr]);\n\n  const fetchList: GetRequestList<Partial<FilterSearchProps>, InvoiceList> = async (params) => {\n    const {\n      invoices: { edges, totalCount },\n    } = await getInvoiceList(params);\n\n    const invoicesList: InvoiceListNode[] = edges;\n\n    if (type === InvoiceListType.DETAIL && invoicesList.length) {\n      invoicesList.forEach((invoice: InvoiceListNode) => {\n        const item = invoice;\n        item.node.isCollapse = true;\n      });\n    }\n\n    invoicesList.forEach((invoiceNode: InvoiceListNode) => {\n      const {\n        node: { openBalance },\n      } = invoiceNode;\n      const item = invoiceNode;\n      item.node.disableCurrentCheckbox = false;\n\n      openBalance.originValue = `${Number(openBalance.value)}`;\n      openBalance.value = formattingNumericValues(Number(openBalance.value), decimalPlaces);\n\n      item.node.disableCurrentCheckbox = Number(openBalance.value) === 0;\n\n      const { companyInfo } = item.node;\n      if (Number(companyInfo.companyId) !== Number(currentCompanyId)) {\n        item.node.disableCurrentCheckbox =\n          !invoiceSubPayPermission || Number(openBalance.value) === 0;\n      }\n    });\n    setList(invoicesList);\n    handleStatisticsInvoiceAmount();\n\n    if (filterData && isFiltering(filterData) && invoicesList.length) {\n      cacheFilterLists(invoicesList);\n    } else {\n      setFilterLists([]);\n    }\n\n    return {\n      edges: invoicesList,\n      totalCount,\n    };\n  };\n\n  const handleSetSelectedInvoiceAccountNumber = (val: string, id: string) => {\n    let result = val;\n    if (val.includes('.')) {\n      const wholeDecimalNumber = val.split('.');\n      const movePoint =\n        decimalPlaces === 0 ? 0 : wholeDecimalNumber[1].length - Number(decimalPlaces);\n      if (wholeDecimalNumber[1] && movePoint > 0) {\n        const newVal = wholeDecimalNumber[0] + wholeDecimalNumber[1];\n        result = `${newVal.slice(0, -decimalPlaces)}.${newVal.slice(-decimalPlaces)}`;\n      }\n      if (wholeDecimalNumber[1] && movePoint === 0) {\n        result = formattingNumericValues(Number(val), decimalPlaces);\n      }\n    } else if (result.length > 1) {\n      result = `${val.slice(0, 1)}.${val.slice(-1)}`;\n      if (Number(decimalPlaces) === 0) result = val;\n    } else {\n      result = val;\n    }\n\n    handleSetSelectedInvoiceAccount(result, id);\n  };\n\n  const columnAllItems: TableColumnItem<InvoiceList>[] = [\n    {\n      key: 'id',\n      title: b3Lang('invoice.headers.invoice'),\n      isSortable: true,\n      render: (item: InvoiceList) => (\n        <Box\n          sx={{\n            color: '#000000',\n            cursor: 'pointer',\n            ':hover': {\n              textDecoration: 'underline',\n            },\n          }}\n          role=\"button\"\n          onClick={() => {\n            const companyInfo = item?.companyInfo || {};\n            handleViewInvoice(item.id, item.status, companyInfo?.companyId);\n          }}\n        >\n          {item?.invoiceNumber ? item?.invoiceNumber : item?.id}\n        </Box>\n      ),\n      width: '8%',\n    },\n    {\n      key: 'companyInfo',\n      title: b3Lang('invoice.headers.companyName'),\n      isSortable: false,\n      render: (item: InvoiceList) => {\n        const { companyName } = item?.companyInfo || {};\n\n        return <Box>{companyName}</Box>;\n      },\n      width: '15%',\n    },\n    {\n      key: 'orderNumber',\n      title: b3Lang('invoice.headers.order'),\n      isSortable: true,\n      render: (item: InvoiceList) => (\n        <Box\n          role=\"button\"\n          sx={{\n            color: '#000000',\n            cursor: 'pointer',\n            ':hover': {\n              textDecoration: 'underline',\n            },\n          }}\n          onClick={() => {\n            navigate(`/orderDetail/${item.orderNumber}`);\n          }}\n        >\n          {item?.orderNumber || '-'}\n        </Box>\n      ),\n      width: '12%',\n    },\n    {\n      key: 'createdAt',\n      title: b3Lang('invoice.headers.invoiceDate'),\n      isSortable: true,\n      render: (item: InvoiceList) =>\n        `${item.createdAt ? displayFormat(Number(item.createdAt)) : '–'}`,\n      width: '15%',\n    },\n    {\n      key: 'updatedAt',\n      title: b3Lang('invoice.headers.dueDate'),\n      isSortable: true,\n      render: (item: InvoiceList) => {\n        const { dueDate, status } = item;\n        const isOverdue = currentDate > dueDate * 1000 && status !== 2;\n\n        return (\n          <Typography\n            sx={{\n              color: isOverdue ? '#D32F2F' : 'rgba(0, 0, 0, 0.87)',\n              fontSize: '14px',\n            }}\n          >\n            {`${item.dueDate ? displayFormat(Number(item.dueDate)) : '–'}`}\n          </Typography>\n        );\n      },\n      width: '15%',\n    },\n    {\n      key: 'originalBalance',\n      title: b3Lang('invoice.headers.invoiceTotal'),\n      isSortable: true,\n      render: (item: InvoiceList) => {\n        const { originalBalance } = item;\n        const originalAmount = formattingNumericValues(\n          Number(originalBalance.value),\n          decimalPlaces,\n        );\n\n        const token = handleGetCorrespondingCurrencyToken(originalBalance.code);\n\n        return `${token}${originalAmount || 0}`;\n      },\n      width: '10%',\n    },\n    {\n      key: 'openBalance',\n      title: b3Lang('invoice.headers.amountDue'),\n      isSortable: true,\n      render: (item: InvoiceList) => {\n        const { openBalance } = item;\n\n        const openAmount = formattingNumericValues(Number(openBalance.value), decimalPlaces);\n        const token = handleGetCorrespondingCurrencyToken(openBalance.code);\n\n        return `${token}${openAmount || 0}`;\n      },\n      width: '10%',\n    },\n    {\n      key: 'openBalanceToPay',\n      title: b3Lang('invoice.headers.amountToPay'),\n      render: (item: InvoiceList) => {\n        const { openBalance, id } = item;\n        const currentCode = openBalance.code || 'USD';\n        let valuePrice = openBalance.value;\n        let disabled = true;\n\n        if (selectedPay.length > 0) {\n          const currentSelected = selectedPay.find((item: InvoiceListNode) => {\n            const {\n              node: { id: selectedId },\n            } = item;\n\n            return Number(selectedId) === Number(id);\n          });\n\n          if (currentSelected) {\n            const {\n              node: { openBalance: selectedOpenBalance },\n            } = currentSelected;\n\n            disabled = false;\n            valuePrice = selectedOpenBalance.value;\n\n            if (Number(openBalance.value) === 0) {\n              disabled = true;\n            }\n          }\n        }\n\n        return (\n          <TextField\n            disabled={disabled}\n            variant=\"filled\"\n            value={valuePrice || ''}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment\n                  position=\"start\"\n                  sx={{ padding: '8px 0', marginTop: '0 !important' }}\n                >\n                  {handleGetCorrespondingCurrencyToken(currentCode)}\n                </InputAdornment>\n              ),\n            }}\n            sx={{\n              '& input': {\n                paddingTop: '8px',\n              },\n              '& input[type=\"number\"]::-webkit-inner-spin-button, & input[type=\"number\"]::-webkit-outer-spin-button':\n                {\n                  WebkitAppearance: 'none',\n                  margin: 0,\n                },\n            }}\n            onChange={(e: CustomFieldItems) => {\n              const val = e.target?.value;\n              handleSetSelectedInvoiceAccountNumber(val, id);\n            }}\n            type=\"number\"\n          />\n        );\n      },\n      width: '15%',\n    },\n    {\n      key: 'status',\n      title: b3Lang('invoice.headers.status'),\n      isSortable: true,\n      render: (item: InvoiceList) => {\n        const { status, dueDate } = item;\n        let code = item.status;\n\n        // (3, \"Overdue\")-【Display status when invoice exceeds due date. For front-end display only】\n        if (status === 0 && currentDate > dueDate * 1000) {\n          code = 3;\n        }\n\n        return <InvoiceStatus code={code} />;\n      },\n    },\n    {\n      key: 'invoiceActions',\n      title: b3Lang('invoice.headers.action'),\n      render: (row: InvoiceList) => {\n        const { id, companyInfo } = row;\n        let actionRow = row;\n        if (selectedPay.length > 0) {\n          const currentSelected = selectedPay.find((item: InvoiceListNode) => {\n            const {\n              node: { id: selectedId },\n            } = item;\n\n            return Number(selectedId) === Number(id);\n          });\n\n          if (currentSelected) {\n            actionRow = currentSelected.node;\n          }\n        }\n\n        return (\n          <B3Pulldown\n            row={actionRow}\n            setInvoiceId={setCurrentInvoiceId}\n            handleOpenHistoryModal={setIsOpenHistory}\n            setIsRequestLoading={setIsRequestLoading}\n            isCurrentCompany={Number(currentCompanyId) === Number(companyInfo.companyId)}\n            invoicePay={\n              Number(currentCompanyId) === Number(companyInfo.companyId)\n                ? invoicePayPermission\n                : invoiceSubPayPermission\n            }\n          />\n        );\n      },\n      width: '10%',\n    },\n  ];\n\n  useEffect(() => {\n    let exportCsvTexts = b3Lang('invoice.exportCsvText');\n\n    const filtering = filterData ? isFiltering(filterData) : false;\n    const currentCheckedArr = filtering\n      ? filterLists.filter((item: InvoiceListNode) =>\n          checkedArr.some((item2: InvoiceListNode) => item?.node?.id === item2?.node?.id),\n        )\n      : checkedArr;\n\n    if (filtering) {\n      exportCsvTexts =\n        currentCheckedArr.length > 0\n          ? b3Lang('invoice.exportSelectedAsCsv')\n          : b3Lang('invoice.exportFilteredAsCsv');\n    } else {\n      exportCsvTexts =\n        currentCheckedArr.length > 0\n          ? b3Lang('invoice.exportSelectedAsCsv')\n          : b3Lang('invoice.exportCsvText');\n    }\n\n    setExportCsvText(exportCsvTexts);\n    // disabling because of b3lang rendering errors\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [checkedArr, filterData, filterLists]);\n\n  const translatedFilterFormConfigs = filterFormConfig.map((element) => {\n    const config = element;\n    if (element.name === 'status') {\n      config.label = b3Lang(filterFormConfigsTranslationVariables.status);\n    }\n\n    config.options = element.options.map((option) => {\n      const elementOption = option;\n      elementOption.label = b3Lang(filterFormConfigsTranslationVariables[option.key]);\n\n      return option;\n    });\n\n    return element;\n  });\n\n  return (\n    <B3Spin isSpinning={isRequestLoading}>\n      <Box\n        sx={{\n          overflowX: 'auto',\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n          position: 'relative',\n        }}\n      >\n        <Box\n          sx={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: isMobile ? 'flex-start' : 'center',\n            flexDirection: isMobile ? 'column' : 'row',\n          }}\n        >\n          <Box\n            sx={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: isMobile ? 'flex-start' : 'center',\n              flexDirection: isMobile ? 'column' : 'row',\n              width: isMobile ? '100%' : 'auto',\n\n              '& > div': {\n                width: isMobile ? '100%' : 'auto',\n              },\n            }}\n          >\n            {isEnabledCompanyHierarchy && invoiceSubViewPermission && (\n              <Box\n                sx={{\n                  mr: isMobile ? 0 : '10px',\n                  mb: '30px',\n                }}\n              >\n                <B2BAutoCompleteCheckbox handleChangeCompanyIds={handleSelectCompanies} />\n              </Box>\n            )}\n            <B3Filter\n              filterMoreInfo={translatedFilterFormConfigs}\n              handleChange={handleChange}\n              handleFilterChange={handleFilterChange}\n              startPicker={{\n                isEnabled: true,\n                label: b3Lang('invoice.filter.from'),\n                defaultValue:\n                  typeof filterData?.beginDateAt === 'number'\n                    ? Number(filterData.beginDateAt) * 1000\n                    : '',\n                pickerKey: 'start',\n              }}\n              endPicker={{\n                isEnabled: true,\n                label: b3Lang('invoice.filter.to'),\n                defaultValue:\n                  typeof filterData?.endDateAt === 'number'\n                    ? Number(filterData.endDateAt) * 1000\n                    : '',\n                pickerKey: 'end',\n              }}\n              searchValue={filterData?.q || ''}\n              pcContainerWidth=\"36rem\"\n              pcSearchContainerWidth=\"80%\"\n            />\n          </Box>\n          <Box\n            sx={{\n              display: 'flex',\n              marginBottom: '30px',\n              flexDirection: document.body.clientWidth <= 465 ? 'column' : 'row',\n            }}\n          >\n            <Typography\n              sx={{\n                fontSize: '24px',\n                color: '#000000',\n              }}\n            >\n              {b3Lang('invoice.openUnpaid', {\n                unpaid: currencyFormat(unpaidAmount),\n              })}\n            </Typography>\n            {document.body.clientWidth >= 465 && (\n              <Typography\n                sx={{\n                  fontSize: '24px',\n                  margin: '0 8px',\n                }}\n              >\n                |\n              </Typography>\n            )}\n            <Typography\n              sx={{\n                fontSize: '24px',\n                color: '#D32F2F',\n              }}\n            >\n              {b3Lang('invoice.overdueAmount', {\n                overdue: currencyFormat(overdueAmount),\n              })}\n            </Typography>\n          </Box>\n        </Box>\n        <B3PaginationTable\n          ref={paginationTableRef}\n          columnItems={columnAllItems}\n          rowsPerPageOptions={[10, 20, 30]}\n          getRequestList={fetchList}\n          searchParams={filterData}\n          isCustomRender={false}\n          requestLoading={setIsRequestLoading}\n          tableKey=\"id\"\n          showCheckbox={selectAllPay && purchasabilityPermission}\n          showSelectAllCheckbox={!isMobile && selectAllPay && purchasabilityPermission}\n          disableCheckbox={false}\n          applyAllDisableCheckbox={false}\n          getSelectCheckbox={getSelectCheckbox}\n          CollapseComponent={PrintTemplate}\n          sortDirection={order}\n          orderBy={orderBy}\n          sortByFn={handleSetOrderBy}\n          isSelectOtherPageCheckbox\n          hover\n          isAutoRefresh={false}\n          renderItem={(row, index, checkBox) => (\n            <InvoiceItemCard\n              item={row}\n              checkBox={checkBox}\n              handleSetSelectedInvoiceAccount={handleSetSelectedInvoiceAccountNumber}\n              handleViewInvoice={handleViewInvoice}\n              setIsRequestLoading={setIsRequestLoading}\n              setInvoiceId={setCurrentInvoiceId}\n              handleOpenHistoryModal={setIsOpenHistory}\n              selectedPay={selectedPay}\n              handleGetCorrespondingCurrency={handleGetCorrespondingCurrencyToken}\n              addBottom={list.length - 1 === index}\n              isCurrentCompany={Number(currentCompanyId) === Number(row.companyInfo.companyId)}\n              invoicePay={\n                Number(currentCompanyId) === Number(row.companyInfo.companyId)\n                  ? invoicePayPermission\n                  : invoiceSubPayPermission\n              }\n            />\n          )}\n        />\n        {list.length > 0 && !isMobile && (\n          <Box\n            sx={{\n              position: 'absolute',\n              bottom: '8px',\n              left: '20px',\n            }}\n          >\n            <Button variant=\"text\" onClick={handleExportInvoiceAsCSV}>\n              {exportCsvText}\n            </Button>\n          </Box>\n        )}\n      </Box>\n      {selectedPay.length > 0 &&\n        (((invoicePayPermission || invoiceSubPayPermission) && purchasabilityPermission) ||\n          isAgenting) && <InvoiceFooter selectedPay={selectedPay} decimalPlaces={decimalPlaces} />}\n      <PaymentsHistory\n        open={isOpenHistory}\n        currentInvoiceId={currentInvoiceId}\n        setOpen={setIsOpenHistory}\n      />\n      <PaymentSuccess receiptId={Number(receiptId)} type={type} />\n    </B3Spin>\n  );\n}\n\nexport default Invoice;\n","import { invoiceDownloadPDF } from '@/shared/service/b2b';\n\nconst analyzePDFUrl = (url: string): Promise<string> =>\n  new Promise((resolve, reject) => {\n    fetch(url)\n      .then((res) => res.blob())\n      .then((response) => {\n        const blob = new Blob([response], { type: 'application/pdf' });\n\n        const invoicePDFUrl = window.URL.createObjectURL(blob);\n\n        resolve(invoicePDFUrl);\n      })\n      .catch((e) => {\n        reject(e);\n      });\n  });\n\nexport const getInvoiceDownloadPDFUrl = async (\n  invoiceId: string,\n  isPayNow = false,\n): Promise<string> => {\n  const {\n    invoicePdf: { url },\n  } = await invoiceDownloadPDF(Number(invoiceId), isPayNow);\n\n  return url;\n};\n\nexport const handlePrintPDF = async (invoiceId: string, isPayNow = false): Promise<string> => {\n  let url = '';\n  try {\n    url = await getInvoiceDownloadPDFUrl(invoiceId, isPayNow);\n    const pdfUrl = await analyzePDFUrl(url);\n\n    return pdfUrl;\n  } catch (error) {\n    return url;\n  }\n};\n","import { useEffect, useRef, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { MoreHoriz as MoreHorizIcon } from '@mui/icons-material';\nimport { IconButton, Menu, MenuItem } from '@mui/material';\nimport { styled } from '@mui/material/styles';\n\nimport { useB3Lang } from '@/lib/lang';\nimport { rolePermissionSelector, useAppSelector } from '@/store';\nimport { InvoiceList } from '@/types/invoice';\nimport { b2bPermissionsMap, snackbar, verifyLevelPermission } from '@/utils';\n\nimport { gotoInvoiceCheckoutUrl } from '../utils/payment';\nimport { getInvoiceDownloadPDFUrl, handlePrintPDF } from '../utils/pdf';\n\nimport { triggerPdfDownload } from './triggerPdfDownload';\n\nconst StyledMenu = styled(Menu)(() => ({\n  '& .MuiPaper-elevation': {\n    boxShadow:\n      '0px 1px 0px -1px rgba(0, 0, 0, 0.1), 0px 1px 6px rgba(0, 0, 0, 0.07), 0px 1px 4px rgba(0, 0, 0, 0.06)',\n    borderRadius: '4px',\n  },\n}));\n\ninterface B3PulldownProps {\n  row: InvoiceList;\n  setIsRequestLoading: (bool: boolean) => void;\n  setInvoiceId: (id: string) => void;\n  handleOpenHistoryModal: (bool: boolean) => void;\n  isCurrentCompany: boolean;\n  invoicePay: boolean;\n}\n\nfunction B3Pulldown({\n  row,\n  setIsRequestLoading,\n  setInvoiceId,\n  handleOpenHistoryModal,\n  isCurrentCompany,\n  invoicePay,\n}: B3PulldownProps) {\n  const platform = useAppSelector(({ global }) => global.storeInfo.platform);\n  const ref = useRef<HTMLButtonElement | null>(null);\n  const [isOpen, setIsOpen] = useState(false);\n  const [isPay, setIsPay] = useState<boolean>(true);\n\n  const navigate = useNavigate();\n\n  const b3Lang = useB3Lang();\n\n  const { invoicePayPermission, purchasabilityPermission } = useAppSelector(rolePermissionSelector);\n  const { getOrderPermission: getOrderPermissionCode } = b2bPermissionsMap;\n\n  const [isCanViewOrder, setIsCanViewOrder] = useState<boolean>(false);\n\n  const close = () => {\n    setIsOpen(false);\n  };\n\n  const handleMoreActionsClick = () => {\n    const { id } = row;\n    setInvoiceId(id);\n    setIsOpen(true);\n  };\n\n  const handleViewInvoice = async (isPayNow: boolean) => {\n    const { id } = row;\n\n    close();\n\n    setIsRequestLoading(true);\n\n    const pdfUrl = await handlePrintPDF(id, isPayNow);\n\n    setIsRequestLoading(false);\n\n    if (!pdfUrl) {\n      snackbar.error('pdf url resolution error');\n      return;\n    }\n\n    const { href } = window.location;\n    if (!href.includes('invoice')) {\n      return;\n    }\n\n    window.open(pdfUrl, '_blank', 'fullscreen=yes');\n  };\n\n  const handleViewOrder = () => {\n    const { orderNumber } = row;\n    close();\n    navigate(`/orderDetail/${orderNumber}`);\n  };\n\n  const handlePay = async () => {\n    close();\n\n    const { openBalance, originalBalance, id } = row;\n\n    const params = {\n      lineItems: [\n        {\n          invoiceId: Number(id),\n          amount: openBalance.value === '.' ? '0' : `${Number(openBalance.value)}`,\n        },\n      ],\n      currency: openBalance?.code || originalBalance.code,\n    };\n\n    if (openBalance.value === '.' || Number(openBalance.value) === 0) {\n      snackbar.error('The payment amount entered has an invalid value.');\n\n      return;\n    }\n\n    await gotoInvoiceCheckoutUrl(params, platform, false);\n  };\n\n  const viewPaymentHistory = async () => {\n    close();\n    handleOpenHistoryModal(true);\n  };\n\n  const handleDownloadPDF = async () => {\n    const { id } = row;\n\n    close();\n    setIsRequestLoading(true);\n    const url = await getInvoiceDownloadPDFUrl(id);\n\n    setIsRequestLoading(false);\n\n    triggerPdfDownload(url, 'file.pdf');\n  };\n\n  useEffect(() => {\n    const { openBalance, orderUserId, companyInfo } = row;\n    const payPermissions =\n      Number(openBalance.value) > 0 && invoicePayPermission && purchasabilityPermission;\n\n    const isPayInvoice = isCurrentCompany ? payPermissions : payPermissions && invoicePay;\n    setIsPay(isPayInvoice);\n\n    const viewOrderPermission = verifyLevelPermission({\n      code: getOrderPermissionCode,\n      companyId: Number(companyInfo.companyId),\n      userId: Number(orderUserId),\n    });\n\n    setIsCanViewOrder(viewOrderPermission);\n    // disabling as we only need to run this once and values at starting render are good enough\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <IconButton\n        onClick={handleMoreActionsClick}\n        ref={ref}\n        aria-label={b3Lang('invoice.actions.moreActions')}\n        aria-haspopup=\"menu\"\n      >\n        <MoreHorizIcon />\n      </IconButton>\n      <StyledMenu\n        id=\"basic-menu\"\n        anchorEl={ref.current}\n        open={isOpen}\n        onClose={close}\n        MenuListProps={{\n          'aria-labelledby': 'basic-button',\n        }}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'right',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n      >\n        <MenuItem\n          key=\"View-invoice\"\n          sx={{\n            color: 'primary.main',\n          }}\n          onClick={() =>\n            handleViewInvoice(row.status !== 2 && invoicePayPermission && purchasabilityPermission)\n          }\n        >\n          {b3Lang('invoice.actions.viewInvoice')}\n        </MenuItem>\n        {isCanViewOrder && (\n          <MenuItem\n            key=\"View-Order\"\n            sx={{\n              color: 'primary.main',\n            }}\n            onClick={handleViewOrder}\n          >\n            {b3Lang('invoice.actions.viewOrder')}\n          </MenuItem>\n        )}\n\n        {row.status !== 0 && (\n          <MenuItem\n            key=\"View-payment-history\"\n            sx={{\n              color: 'primary.main',\n            }}\n            onClick={viewPaymentHistory}\n          >\n            {b3Lang('invoice.actions.viewPaymentHistory')}\n          </MenuItem>\n        )}\n        {isPay && (\n          <MenuItem\n            key=\"Pay\"\n            sx={{\n              color: 'primary.main',\n            }}\n            onClick={handlePay}\n          >\n            {b3Lang('invoice.actions.pay')}\n          </MenuItem>\n        )}\n        <MenuItem\n          key=\"Print\"\n          sx={{\n            color: 'primary.main',\n          }}\n          onClick={() =>\n            handleViewInvoice(row.status !== 2 && invoicePayPermission && purchasabilityPermission)\n          }\n        >\n          {b3Lang('invoice.actions.print')}\n        </MenuItem>\n        <MenuItem\n          key=\"Download\"\n          sx={{\n            color: 'primary.main',\n          }}\n          onClick={() => handleDownloadPDF()}\n        >\n          {b3Lang('invoice.actions.download')}\n        </MenuItem>\n      </StyledMenu>\n    </>\n  );\n}\n\nexport default B3Pulldown;\n","export function triggerPdfDownload(url: string, fileName: string) {\n  const a = document.createElement('a');\n  a.href = url;\n  a.target = '_blank';\n  a.download = fileName;\n  a.click();\n}\n","import { useEffect, useState } from 'react';\nimport { Box, Button, Grid, Typography } from '@mui/material';\n\nimport { useMobile } from '@/hooks';\nimport { useB3Lang } from '@/lib/lang';\nimport { useAppSelector } from '@/store';\nimport { BcCartData, BcCartDataLineItem, InvoiceListNode } from '@/types/invoice';\nimport { handleGetCorrespondingCurrencyToken, snackbar } from '@/utils';\n\nimport { formattingNumericValues, gotoInvoiceCheckoutUrl } from '../utils/payment';\n\ninterface InvoiceFooterProps {\n  selectedPay: CustomFieldItems;\n  decimalPlaces: number;\n}\n\nfunction InvoiceFooter(props: InvoiceFooterProps) {\n  const platform = useAppSelector(({ global }) => global.storeInfo.platform);\n  const b3Lang = useB3Lang();\n  const [isMobile] = useMobile();\n  const [selectedAccount, setSelectedAccount] = useState<number | string>(0);\n  const [currentToken, setCurrentToken] = useState<string>('$');\n\n  const isAgenting = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.isAgenting);\n\n  const containerStyle = isMobile\n    ? {\n        alignItems: 'flex-start',\n        flexDirection: 'column',\n      }\n    : {\n        alignItems: 'center',\n      };\n\n  const { selectedPay, decimalPlaces } = props;\n\n  const handlePay = async () => {\n    const lineItems: BcCartDataLineItem[] = [];\n    let currency = 'SGD';\n\n    if (selectedPay.length > 0) {\n      selectedPay.forEach((item: InvoiceListNode) => {\n        const {\n          node: { id, openBalance, originalBalance },\n        } = item;\n\n        const currentValue =\n          formattingNumericValues(Number(openBalance.originValue), decimalPlaces) ===\n          openBalance.value\n            ? Number(openBalance.originValue)\n            : Number(openBalance.value);\n        lineItems.push({\n          invoiceId: Number(id),\n          amount: openBalance.value === '.' ? '0' : `${Number(currentValue)}`,\n        });\n\n        currency = openBalance?.code || originalBalance.code;\n      });\n\n      const badItem = lineItems.find(\n        (item: CustomFieldItems) => item.amount === '.' || Number(item.amount) === 0,\n      );\n      if (badItem) {\n        snackbar.error(b3Lang('invoice.footer.invalidNameError'));\n\n        return;\n      }\n\n      const params: BcCartData = {\n        lineItems,\n        currency,\n      };\n\n      await gotoInvoiceCheckoutUrl(params, platform, false);\n    }\n  };\n\n  useEffect(() => {\n    if (selectedPay.length > 0) {\n      const handleStatisticsInvoiceAmount = (checkedArr: CustomFieldItems) => {\n        let amount = 0;\n\n        checkedArr.forEach((item: InvoiceListNode) => {\n          const {\n            node: { openBalance },\n          } = item;\n          amount += openBalance.value === '.' ? 0 : Number(openBalance.value);\n        });\n\n        setSelectedAccount(formattingNumericValues(amount, decimalPlaces));\n      };\n      const {\n        node: { openBalance },\n      } = selectedPay[0];\n\n      const token = handleGetCorrespondingCurrencyToken(openBalance.code);\n      setCurrentToken(token);\n      handleStatisticsInvoiceAmount(selectedPay);\n    }\n  }, [decimalPlaces, selectedPay]);\n\n  return (\n    <Grid\n      sx={{\n        position: 'fixed',\n        bottom: isMobile && isAgenting ? '52px' : 0,\n        left: 0,\n        backgroundColor: '#fff',\n        width: '100%',\n        padding: isMobile ? '0 0 1rem 0' : '0 40px 1rem 40px',\n        height: isMobile ? '8rem' : 'auto',\n        marginLeft: 0,\n        display: 'flex',\n        flexWrap: 'nowrap',\n        zIndex: '999',\n      }}\n      container\n      spacing={2}\n    >\n      <Grid\n        item\n        sx={{\n          display: isMobile ? 'none' : 'block',\n          width: '290px',\n          paddingLeft: '20px',\n        }}\n      />\n      <Grid\n        item\n        sx={\n          isMobile\n            ? {\n                flexBasis: '100%',\n              }\n            : {\n                flexBasis: '690px',\n                flexGrow: 1,\n              }\n        }\n      >\n        <Box\n          sx={{\n            width: '100%',\n            pr: '20px',\n            display: 'flex',\n            zIndex: '999',\n            justifyContent: 'space-between',\n            ...containerStyle,\n          }}\n        >\n          <Typography\n            sx={{\n              color: '#000000',\n              fontSize: '16px',\n              fontWeight: '400',\n            }}\n          >\n            {b3Lang('invoice.footer.invoiceSelected', {\n              invoices: selectedPay.length,\n            })}\n          </Typography>\n          <Box\n            sx={{\n              display: 'flex',\n              alignItems: 'center',\n              flexWrap: isMobile ? 'wrap' : 'nowrap',\n              width: isMobile ? '100%' : 'auto',\n            }}\n          >\n            <Typography\n              variant=\"h6\"\n              sx={{\n                fontSize: '16px',\n                fontWeight: '700',\n                color: '#000000',\n              }}\n            >\n              {b3Lang('invoice.footer.totalPayment', {\n                total: `${currentToken}${selectedAccount}`,\n              })}\n            </Typography>\n            <Box\n              sx={{\n                display: 'flex',\n                alignItems: 'center',\n                marginTop: isMobile ? '0.5rem' : 0,\n                width: isMobile ? '100%' : 'auto',\n              }}\n            >\n              <Button\n                variant=\"contained\"\n                sx={{\n                  marginLeft: isMobile ? 0 : '1rem',\n                  width: isMobile ? '100%' : 'auto',\n                }}\n                onClick={() => {\n                  handlePay();\n                }}\n              >\n                {b3Lang('invoice.footer.payInvoices')}\n              </Button>\n            </Box>\n          </Box>\n        </Box>\n      </Grid>\n      <Grid\n        item\n        sx={\n          isMobile\n            ? {\n                flexBasis: '100%',\n                display: isMobile ? 'none' : 'block',\n              }\n            : {\n                flexBasis: '0',\n                display: isMobile ? 'none' : 'block',\n              }\n        }\n      />\n    </Grid>\n  );\n}\n\nexport default InvoiceFooter;\n","import { B3Tag } from '@/components';\nimport { useB3Lang } from '@/lib/lang';\n\ninterface StatusProps {\n  code: InvoiceStatusCode;\n}\n\ninterface InvoiceStatusProps {\n  [key: string]: {\n    [key: string]: string;\n  };\n}\n\nexport enum InvoiceStatusCode {\n  Open = 0,\n  PartiallyPaid = 1,\n  Paid = 2,\n  Overdue = 3,\n}\n\nexport default function InvoiceStatus(props: StatusProps) {\n  const { code } = props;\n  const b3Lang = useB3Lang();\n\n  const getInvoiceStatus = (code: number) => {\n    const invoiceStatus: InvoiceStatusProps = {\n      [InvoiceStatusCode.Open]: {\n        textColor: '#000000',\n        name: b3Lang('invoice.filterStatus.open'),\n        color: '#F1C224',\n      },\n      [InvoiceStatusCode.PartiallyPaid]: {\n        textColor: '#FFFFFF',\n        name: b3Lang('invoice.filterStatus.partiallyPaid'),\n        color: '#516FAE',\n      },\n      [InvoiceStatusCode.Paid]: {\n        textColor: '#000000',\n        name: b3Lang('invoice.filterStatus.paid'),\n        color: '#C4DD6C',\n      },\n      [InvoiceStatusCode.Overdue]: {\n        textColor: '#FFFFFF',\n        name: b3Lang('invoice.filterStatus.overdue'),\n        color: '#D32F2F',\n      },\n    };\n\n    const statusInfo = invoiceStatus[code] || {};\n\n    return statusInfo;\n  };\n\n  const status = getInvoiceStatus(code);\n\n  return status.name ? (\n    <B3Tag color={status.color} textColor={status.textColor}>\n      {status.name}\n    </B3Tag>\n  ) : null;\n}\n","import { useEffect, useState } from 'react';\nimport { Box, Card, CardContent, Typography } from '@mui/material';\n\nimport { B3NoData } from '@/components';\nimport B3Dialog from '@/components/B3Dialog';\nimport B3Spin from '@/components/spin/B3Spin';\nimport { useMobile } from '@/hooks';\nimport { useB3Lang } from '@/lib/lang';\nimport { getInvoicePaymentHistory } from '@/shared/service/b2b';\nimport { displayFormat, handleGetCorrespondingCurrency } from '@/utils';\n\ninterface PaymentsHistoryProps {\n  open: boolean;\n  setOpen: (bool: boolean) => void;\n  currentInvoiceId: string;\n}\n\ninterface PaymentsHistoryList {\n  node: InvoiceData;\n}\n\ninterface InvoiceData {\n  id: string;\n  paymentType: string;\n  invoiceId: number;\n  amount: {\n    code: string;\n    value: string;\n  };\n  transactionType: string;\n  referenceNumber: string;\n  createdAt: number;\n}\n\nfunction Title({ title }: { title: string }) {\n  return (\n    <Typography\n      sx={{\n        fontWeight: 'bold',\n        pr: '5px',\n      }}\n    >\n      {title}:\n    </Typography>\n  );\n}\n\nfunction HistoryList({ list }: { list: PaymentsHistoryList[] }) {\n  return (\n    <>\n      {list.map((item: PaymentsHistoryList) => {\n        const {\n          node: { createdAt, amount, paymentType, transactionType, referenceNumber, id },\n        } = item;\n\n        return (\n          <Card\n            key={id}\n            sx={{\n              mb: '10px',\n            }}\n          >\n            <CardContent\n              sx={{\n                color: '#313440',\n                wordBreak: 'break-word',\n              }}\n            >\n              <Box\n                sx={{\n                  display: 'flex',\n                }}\n              >\n                <Title title=\"Date received\" />\n                <Typography variant=\"body1\">{`${displayFormat(Number(createdAt))}`}</Typography>\n              </Box>\n              <Box\n                sx={{\n                  display: 'flex',\n                }}\n              >\n                <Title title=\"Amount\" />\n                <Typography variant=\"body1\">\n                  {handleGetCorrespondingCurrency(amount.code, Number(amount?.value || 0))}\n                </Typography>\n              </Box>\n              <Box\n                sx={{\n                  display: 'flex',\n                }}\n              >\n                <Title title=\"Transaction type\" />\n                <Typography variant=\"body1\">{transactionType}</Typography>\n              </Box>\n              <Box\n                sx={{\n                  display: 'flex',\n                }}\n              >\n                <Title title=\"Payment type\" />\n                <Typography variant=\"body1\">{paymentType}</Typography>\n              </Box>\n              <Box\n                sx={{\n                  display: 'flex',\n                }}\n              >\n                <Title title=\"Reference\" />\n                <Typography variant=\"body1\">{referenceNumber || '–'}</Typography>\n              </Box>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </>\n  );\n}\n\nfunction PaymentsHistory({ open, setOpen, currentInvoiceId }: PaymentsHistoryProps) {\n  const b3Lang = useB3Lang();\n  const [isMobile] = useMobile();\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const [list, setList] = useState<PaymentsHistoryList[] | []>([]);\n\n  useEffect(() => {\n    const init = async () => {\n      setLoading(true);\n      const {\n        allReceiptLines: { edges = [] },\n      } = await getInvoicePaymentHistory(Number(currentInvoiceId));\n\n      setList(edges);\n      setLoading(false);\n    };\n\n    if (open && currentInvoiceId) {\n      init();\n    }\n  }, [open, currentInvoiceId]);\n\n  return (\n    <B3Dialog\n      isOpen={open}\n      leftSizeBtn=\"\"\n      rightSizeBtn=\"ok\"\n      title={b3Lang('invoice.paymentHistory.title')}\n      showLeftBtn={false}\n      handRightClick={() => setOpen(false)}\n    >\n      <Box\n        sx={{\n          width: isMobile ? '100%' : '384px',\n          maxHeight: '600px',\n        }}\n      >\n        <B3Spin isSpinning={loading}>\n          <Box\n            sx={{\n              display: 'flex',\n              flexDirection: 'column',\n              flex: 1,\n            }}\n          >\n            {list.length ? <HistoryList list={list} /> : <B3NoData />}\n          </Box>\n        </B3Spin>\n      </Box>\n    </B3Dialog>\n  );\n}\n\nexport default PaymentsHistory;\n","// NORMAL:   ;  DETAIL:  ; CHECKOUT:  ;\nconst InvoiceListType = {\n  NORMAL: 'normal',\n  DETAIL: 'detail',\n  CHECKOUT: 'checkout',\n};\n\n// invoice status\n// (0, \"open\"), (1, \"partial paid\"), (2, \"Paid\")\nconst invoiceStatus = [\n  {\n    key: 'open',\n    value: 0,\n    label: 'Open',\n  },\n  {\n    key: 'partialPaid',\n    value: 1,\n    label: 'Partially paid',\n  },\n  {\n    key: 'paid',\n    value: 2,\n    label: 'Paid',\n  },\n  {\n    key: 'overdue',\n    value: 3,\n    label: 'Overdue',\n  },\n];\n\nexport const filterFormConfig = [\n  {\n    name: 'status',\n    label: 'Status',\n    required: false,\n    default: '',\n    fieldType: 'dropdown',\n    xs: 12,\n    variant: 'filled',\n    size: 'small',\n    options: invoiceStatus,\n  },\n];\n\nexport const filterFormConfigsTranslationVariables: { [key: string]: string } = {\n  status: 'invoice.filterStatus.title',\n  open: 'invoice.filterStatus.open',\n  partialPaid: 'invoice.filterStatus.partiallyPaid',\n  paid: 'invoice.filterStatus.paid',\n  overdue: 'invoice.filterStatus.overdue',\n};\n\nexport const defaultSortKey = 'id';\n\nexport const sortIdArr: { [key: string]: string } = {\n  id: 'invoiceNumber',\n  orderNumber: 'orderNumber',\n  createdAt: 'createdAt',\n  updatedAt: 'dueDate',\n  originalBalance: 'originalBalanceAmount',\n  openBalance: 'openBalanceAmount',\n  status: 'status',\n};\n\nexport const exportOrderByArr: { [key: string]: string } = {\n  invoiceNumber: 'invoice_number',\n  orderNumber: 'order_number',\n  createdAt: 'created_at',\n  dueDate: 'due_date',\n  originalBalanceAmount: 'original_balance_amount',\n  openBalanceAmount: 'open_balance_amount',\n};\nexport default InvoiceListType;\n","import { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Box, Button, Typography } from '@mui/material';\n\nimport { B3NoData } from '@/components';\nimport B3Dialog from '@/components/B3Dialog';\nimport B3Spin from '@/components/spin/B3Spin';\nimport { useMobile } from '@/hooks';\nimport { useB3Lang } from '@/lib/lang';\nimport { getInvoicePaymentInfo } from '@/shared/service/b2b';\nimport { InvoiceSuccessData, ReceiptLineSet } from '@/types/invoice';\nimport { displayFormat, handleGetCorrespondingCurrency } from '@/utils';\n\nimport InvoiceListType from '../utils/config';\n\ninterface PaymentSuccessKeysProps {\n  key: string;\n  label: string;\n  type: string;\n  isRow: boolean;\n  idLang: string;\n}\n\nfunction Title({ title, withColon = true }: { title: string; withColon?: boolean }) {\n  return (\n    <Typography\n      sx={{\n        fontWeight: 'bold',\n        pr: '5px',\n      }}\n    >\n      {withColon ? `${title}:` : title}\n    </Typography>\n  );\n}\n\ninterface RowProps {\n  isRow?: boolean;\n  type: string;\n  value: string | number;\n  label: string;\n  code: string;\n}\nfunction Row({ isRow = true, type = '', value, label, code }: RowProps) {\n  const getNewVal = (): string | number | Date => {\n    if (type === 'time') {\n      return displayFormat(Number(value)) || '';\n    }\n    if (type === 'currency') {\n      const val = Number(value || 0);\n      const accountValue = handleGetCorrespondingCurrency(code, val);\n      return accountValue;\n    }\n    if (type === 'paymentType') {\n      let val = `${value}`.trim();\n\n      if (value) {\n        val = val.slice(0, 1).toUpperCase() + val.slice(1).toLowerCase();\n      }\n\n      return val;\n    }\n    return value || '–';\n  };\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: isRow ? 'row' : 'column',\n      }}\n    >\n      <Title title={label} />\n      <Typography variant=\"body1\">{`${getNewVal()}`}</Typography>\n    </Box>\n  );\n}\n\nfunction PaymentSuccessList({ list }: { list: InvoiceSuccessData }) {\n  const {\n    receiptLineSet: { edges = [] },\n    details,\n  } = list;\n\n  const comment = details?.paymentDetails?.comment || '';\n\n  const b3Lang = useB3Lang();\n\n  const paymentSuccessKeys = [\n    {\n      key: 'paymentId',\n      label: 'Payment#',\n      type: '',\n      isRow: true,\n      idLang: 'payment.paymentNumber',\n    },\n    {\n      key: 'createdAt',\n      label: 'Payment received on',\n      type: 'time',\n      isRow: true,\n      idLang: 'payment.paymentReceivedOn',\n    },\n    {\n      key: 'transactionType',\n      label: 'Transaction type',\n      type: '',\n      isRow: true,\n      idLang: 'payment.transactionType',\n    },\n    {\n      key: 'paymentType',\n      label: 'Payment type',\n      type: 'paymentType',\n      isRow: true,\n      idLang: 'payment.paymentType',\n    },\n    {\n      key: 'totalAmount',\n      label: 'Payment total',\n      type: 'currency',\n      isRow: true,\n      idLang: 'payment.paymentTotal',\n    },\n    {\n      key: 'referenceNumber',\n      label: 'Reference',\n      type: '',\n      isRow: true,\n      idLang: 'payment.reference',\n    },\n  ] as const satisfies PaymentSuccessKeysProps[];\n\n  return (\n    <Box>\n      {paymentSuccessKeys.map((item) => (\n        <Row\n          key={item.key}\n          isRow={!!item.isRow}\n          type={item.type}\n          value={(list as CustomFieldItems)[item.key]}\n          code={(list as CustomFieldItems)?.totalCode || 'SGD'}\n          label={b3Lang(item.idLang)}\n        />\n      ))}\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          mb: '30px',\n        }}\n      >\n        <Title title={b3Lang('payment.paymentComment')} />\n        <Typography\n          sx={{\n            maxHeight: '50px',\n          }}\n        >\n          {comment}\n        </Typography>\n      </Box>\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n        }}\n      >\n        <Title title={b3Lang('payment.invoicesPaid')} withColon={false} />\n        <Typography variant=\"body1\">{b3Lang('payment.paymentTowardsInvoices')} </Typography>\n      </Box>\n      <Box>\n        <Box\n          sx={{\n            borderBottom: '1px solid #D9DCE9',\n            padding: '20px 15px',\n            display: 'flex',\n            justifyContent: 'space-between',\n            fontWeight: 500,\n          }}\n        >\n          <Typography\n            sx={{\n              fontSize: '14px',\n              fontWeight: '500',\n              color: '#000000',\n            }}\n          >\n            {b3Lang('payment.invoiceNumber')}\n          </Typography>\n          <Typography\n            sx={{\n              fontSize: '14px',\n              fontWeight: '500',\n              color: '#000000',\n            }}\n          >\n            {b3Lang('payment.amountPaid')}\n          </Typography>\n        </Box>\n        {edges.map((item: ReceiptLineSet) => {\n          const {\n            id,\n            invoiceNumber,\n            amount: { value, code },\n          } = item.node;\n          const val = Number(value || 0);\n\n          const accountValue = handleGetCorrespondingCurrency(code, val);\n          return (\n            <Box\n              key={id}\n              sx={{\n                borderBottom: '1px solid #D9DCE9',\n                padding: '20px 15px',\n                display: 'flex',\n                justifyContent: 'space-between',\n              }}\n            >\n              <Typography>{invoiceNumber}</Typography>\n              <Typography>{accountValue}</Typography>\n            </Box>\n          );\n        })}\n      </Box>\n    </Box>\n  );\n}\n\ninterface PaymentSuccessProps {\n  receiptId: number | number;\n  type: string;\n}\n\nfunction PaymentSuccess({ receiptId, type }: PaymentSuccessProps) {\n  const [isMobile] = useMobile();\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const [open, setOpen] = useState<boolean>(false);\n\n  const [detailData, setDetailData] = useState<InvoiceSuccessData | null>(null);\n\n  const navigate = useNavigate();\n\n  const b3Lang = useB3Lang();\n\n  useEffect(() => {\n    const init = async () => {\n      setLoading(true);\n      const { receipt } = await getInvoicePaymentInfo(Number(receiptId));\n\n      setDetailData(receipt);\n      setOpen(true);\n      setLoading(false);\n    };\n\n    if (type === InvoiceListType.CHECKOUT && receiptId) {\n      init();\n    }\n  }, [receiptId, type]);\n\n  const handleCloseClick = () => {\n    setOpen(false);\n    navigate('/invoice');\n  };\n  const customActions = () => (\n    <Button onClick={handleCloseClick} variant=\"text\">\n      {b3Lang('payment.okButton')}\n    </Button>\n  );\n\n  return (\n    <B3Dialog\n      isOpen={open}\n      leftSizeBtn=\"\"\n      customActions={customActions}\n      title={b3Lang('payment.paymentSuccess')}\n      showLeftBtn={false}\n    >\n      <Box\n        sx={{\n          width: isMobile ? '100%' : '384px',\n          maxHeight: '600px',\n        }}\n      >\n        <B3Spin isSpinning={loading}>\n          <Box\n            sx={{\n              display: 'flex',\n              flexDirection: 'column',\n              flex: 1,\n            }}\n          >\n            {detailData ? <PaymentSuccessList list={detailData} /> : <B3NoData />}\n          </Box>\n        </B3Spin>\n      </Box>\n    </B3Dialog>\n  );\n}\n\nexport default PaymentSuccess;\n","import { SyntheticEvent, useEffect, useRef, useState } from 'react';\nimport { Resizable } from 'react-resizable';\nimport { Box } from '@mui/material';\n// cspell:disable-next-line\nimport PDFObject from 'pdfobject';\n\nimport B3Spin from '@/components/spin/B3Spin';\nimport { snackbar } from '@/utils';\n\nimport { handlePrintPDF } from '../utils/pdf';\n\ninterface RowList {\n  id: string;\n  createdAt: number;\n  updatedAt: number;\n}\n\nconst templateMinHeight = 300;\n\ninterface PrintTemplateProps {\n  row: RowList;\n}\n\nfunction PrintTemplate({ row }: PrintTemplateProps) {\n  const container = useRef<HTMLInputElement | null>(null);\n\n  const dom = useRef<HTMLInputElement | null>(null);\n\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const [height, setHeight] = useState<number>(templateMinHeight);\n\n  const onFirstBoxResize = (\n    _: SyntheticEvent<Element, Event>,\n    { size }: { size: { height: number } },\n  ) => {\n    setHeight(size.height);\n  };\n\n  useEffect(() => {\n    const viewPrint = async () => {\n      setLoading(true);\n      const { id: invoiceId } = row;\n\n      const invoicePDFUrl = await handlePrintPDF(invoiceId);\n\n      if (!invoicePDFUrl) {\n        snackbar.error('pdf url resolution error');\n        return;\n      }\n\n      if (!container?.current) return;\n\n      PDFObject.embed(invoicePDFUrl, container.current);\n\n      setLoading(false);\n    };\n\n    viewPrint();\n\n    return () => {\n      container.current = null;\n    };\n  }, [row]);\n\n  return (\n    <B3Spin isSpinning={loading}>\n      <Box\n        ref={dom}\n        sx={{\n          display: 'flex',\n          flexWrap: 'wrap',\n          width: '100%',\n          '& .box': {\n            display: 'flex',\n            flexDirection: 'column',\n            overflow: 'hidden',\n            position: 'relative',\n            width: '100%',\n            '& .react-resizable': {\n              position: 'relative',\n            },\n            '& .react-resizable-handle': {\n              position: 'absolute',\n              width: '100%',\n              height: '30px',\n              backgroundRepeat: 'no-repeat',\n              backgroundOrigin: 'content-box',\n              boxSizing: 'border-box',\n            },\n            '& .react-resizable-handle-s': {\n              cursor: 'ns-resize',\n              bottom: 0,\n            },\n          },\n        }}\n      >\n        <Resizable\n          className=\"box\"\n          height={height}\n          minConstraints={[dom?.current?.offsetWidth || 0, 0]}\n          width={dom.current?.offsetWidth || 0}\n          onResize={onFirstBoxResize}\n          resizeHandles={['s']}\n        >\n          <div style={{ width: '100%', height: `${height}px` }}>\n            <div ref={container} style={{ height: '100%', width: '100%' }} />\n          </div>\n        </Resizable>\n      </Box>\n    </B3Spin>\n  );\n}\n\nexport default PrintTemplate;\n","import { ReactElement, useId } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled from '@emotion/styled';\nimport { Box, Card, CardContent, InputAdornment, TextField, Typography } from '@mui/material';\n\nimport { TableColumnItem } from '@/components/table/B3Table';\nimport { useB3Lang } from '@/lib/lang';\nimport { InvoiceList, InvoiceListNode } from '@/types/invoice';\nimport { currencyFormat, displayFormat } from '@/utils';\n\nimport B3Pulldown from './components/B3Pulldown';\nimport InvoiceStatus from './components/InvoiceStatus';\n\ninterface InvoiceItemCardProps {\n  item: any;\n  checkBox?: (disable: boolean) => ReactElement;\n  handleSetSelectedInvoiceAccount: (value: string, id: string) => void;\n  handleViewInvoice: (id: string, status: string | number, invoiceCompanyId: string) => void;\n  setIsRequestLoading: (bool: boolean) => void;\n  setInvoiceId: (id: string) => void;\n  handleOpenHistoryModal: (bool: boolean) => void;\n  selectedPay: CustomFieldItems | InvoiceListNode[];\n  handleGetCorrespondingCurrency: (code: string) => string;\n  addBottom: boolean;\n  isCurrentCompany: boolean;\n  invoicePay: boolean;\n}\n\nconst StyleCheckoutContainer = styled(Box)(() => ({\n  '& > span': {\n    padding: '0 9px 0 0',\n  },\n}));\n\nexport function InvoiceItemCard(props: InvoiceItemCardProps) {\n  const currentDate = new Date().getTime();\n  const {\n    item,\n    checkBox,\n    handleSetSelectedInvoiceAccount,\n    handleViewInvoice,\n    setIsRequestLoading,\n    setInvoiceId,\n    handleOpenHistoryModal,\n    selectedPay = [],\n    handleGetCorrespondingCurrency,\n    addBottom,\n    isCurrentCompany,\n    invoicePay,\n  } = props;\n  const b3Lang = useB3Lang();\n  const navigate = useNavigate();\n\n  const { id, status, dueDate, openBalance, companyInfo } = item;\n  const currentCode = openBalance.code || 'USD';\n  const currentCurrencyToken = handleGetCorrespondingCurrency(currentCode);\n\n  let statusCode = item.status;\n  if (status === 0 && currentDate > dueDate * 1000) {\n    statusCode = 3;\n  }\n\n  const columnAllItems: TableColumnItem<InvoiceList>[] = [\n    {\n      key: 'orderNumber',\n      title: b3Lang('invoice.invoiceItemCardHeader.order'),\n      render: () => (\n        <Box\n          role=\"button\"\n          sx={{\n            color: '#000000',\n            cursor: 'pointer',\n            textDecoration: 'underline',\n          }}\n          onClick={() => {\n            navigate(`/orderDetail/${item.orderNumber}`);\n          }}\n        >\n          {item?.orderNumber || '-'}\n        </Box>\n      ),\n    },\n    {\n      key: 'createdAt',\n      title: b3Lang('invoice.invoiceItemCardHeader.invoiceDate'),\n      render: () => `${item.createdAt ? displayFormat(Number(item.createdAt)) : '–'}`,\n    },\n    {\n      key: 'updatedAt',\n      title: b3Lang('invoice.invoiceItemCardHeader.dueDate'),\n      render: () => {\n        const { dueDate, status } = item;\n        const isOverdue = currentDate > dueDate * 1000 && status !== 2;\n\n        return (\n          <Typography\n            sx={{\n              color: isOverdue ? '#D32F2F' : 'rgba(0, 0, 0, 0.87)',\n              fontSize: '14px',\n            }}\n          >\n            {`${item.dueDate ? displayFormat(Number(item.dueDate)) : '–'}`}\n          </Typography>\n        );\n      },\n    },\n    {\n      key: 'originalBalance',\n      title: b3Lang('invoice.invoiceItemCardHeader.invoiceTotal'),\n      render: () => {\n        const { originalBalance } = item;\n        const originalAmount = Number(originalBalance.value);\n\n        return currencyFormat(originalAmount || 0);\n      },\n    },\n    {\n      key: 'openBalance',\n      title: b3Lang('invoice.invoiceItemCardHeader.amountDue'),\n      render: () => {\n        const { openBalance } = item;\n\n        const openAmount = Number(openBalance.value);\n\n        return currencyFormat(openAmount || 0);\n      },\n    },\n    {\n      key: 'openBalanceToPay',\n      title: b3Lang('invoice.invoiceItemCardHeader.amountToPay'),\n      render: () => {\n        const { openBalance, id } = item;\n        let valuePrice = openBalance.value;\n        let disabled = true;\n\n        if (selectedPay.length > 0) {\n          const currentSelected = selectedPay.find((item: InvoiceListNode) => {\n            const {\n              node: { id: selectedId },\n            } = item;\n\n            return Number(selectedId) === Number(id);\n          });\n\n          if (currentSelected) {\n            const {\n              node: { openBalance: selectedOpenBalance },\n            } = currentSelected;\n\n            disabled = false;\n            valuePrice = selectedOpenBalance.value;\n\n            if (Number(openBalance.value) === 0) {\n              disabled = true;\n            }\n          }\n        }\n\n        return (\n          <TextField\n            disabled={disabled}\n            variant=\"filled\"\n            value={valuePrice}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment\n                  position=\"start\"\n                  sx={{ padding: '8px 0', marginTop: '0 !important' }}\n                >\n                  {currentCurrencyToken || '$'}\n                </InputAdornment>\n              ),\n            }}\n            sx={{\n              '& input': {\n                paddingTop: '8px',\n              },\n            }}\n            onChange={(e: CustomFieldItems) => {\n              const val = e.target?.value;\n              handleSetSelectedInvoiceAccount(val, id);\n            }}\n            type=\"number\"\n          />\n        );\n      },\n    },\n  ];\n\n  const groupId = useId();\n\n  return (\n    <Card\n      role=\"group\"\n      aria-labelledby={groupId}\n      sx={{\n        marginBottom: selectedPay.length > 0 && addBottom ? '5rem' : 0,\n      }}\n    >\n      <CardContent\n        sx={{\n          color: 'rgba(0, 0, 0, 0.6)',\n        }}\n      >\n        <Box\n          sx={{\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'space-between',\n          }}\n        >\n          <Box\n            sx={{\n              display: 'flex',\n              alignItems: 'center',\n              mb: '0.5rem',\n            }}\n          >\n            <StyleCheckoutContainer>\n              {checkBox && checkBox(!!item?.disableCurrentCheckbox)}\n            </StyleCheckoutContainer>\n            <Typography\n              variant=\"h6\"\n              sx={{\n                color: 'rgba(0, 0, 0, 0.87)',\n              }}\n            >\n              <Box\n                id={groupId}\n                role=\"button\"\n                sx={{\n                  color: '#000000',\n                  cursor: 'pointer',\n                  textDecoration: 'underline',\n                }}\n                onClick={() => {\n                  handleViewInvoice(id, status, companyInfo.companyId);\n                }}\n              >\n                {id || '-'}\n              </Box>\n            </Typography>\n          </Box>\n          <Box sx={{ mb: '0.5rem' }}>\n            <B3Pulldown\n              row={item}\n              setInvoiceId={setInvoiceId}\n              handleOpenHistoryModal={handleOpenHistoryModal}\n              setIsRequestLoading={setIsRequestLoading}\n              isCurrentCompany={isCurrentCompany}\n              invoicePay={invoicePay}\n            />\n          </Box>\n        </Box>\n        <Box sx={{ mb: '1rem' }}>\n          <InvoiceStatus code={statusCode} />\n        </Box>\n\n        {columnAllItems.map((list: CustomFieldItems) => (\n          <Box\n            key={list.key}\n            sx={{\n              display: 'flex',\n              alignItems: 'center',\n              mt: '4px',\n            }}\n          >\n            <Typography\n              sx={{\n                fontWeight: 'bold',\n                color: 'rgba(0, 0, 0, 0.87)',\n                mr: '5px',\n                whiteSpace: 'nowrap',\n              }}\n            >\n              {`${list.title}:`}\n            </Typography>\n            <Box\n              sx={{\n                color: 'black',\n                wordBreak: 'break-all',\n              }}\n            >\n              {list?.render ? list.render() : item[list.key]}\n            </Box>\n          </Box>\n        ))}\n      </CardContent>\n    </Card>\n  );\n}\n"],"names":["currentDate","Date","getTime","b3Lang","useB3Lang","isAgenting","selectCompanyHierarchyId","isEnabledCompanyHierarchy","invoicePayPermission","purchasabilityPermission","currentCompanyId","invoiceSubViewPermission","role","useAppSelector","company","customer","b2bFeatures","masqueradeCompany","companyInfoId","companyInfo","id","companyHierarchyInfo","salesRepCompanyId","rolePermissionSelector","CustomerRole","SUPER_ADMIN","Number","invoice","pagesSubsidiariesPermission","useData","navigate","useNavigate","isMobile","useMobile","paginationTableRef","useRef","decimal_places","decimalPlaces","currencyFormatInfo","isRequestLoading","setIsRequestLoading","useState","isOpenHistory","setIsOpenHistory","currentInvoiceId","setCurrentInvoiceId","receiptId","setReceiptId","type","setType","unpaidAmount","setUnpaidAmount","overdueAmount","setOverdueAmount","checkedArr","setCheckedArr","selectedPay","setSelectedPay","list","setList","filterData","setFilterData","exportCsvText","setExportCsvText","filterChangeFlag","setFilterChangeFlag","filterLists","setFilterLists","selectAllPay","setSelectAllPay","invoiceSubPayPermission","validatePermissionWithComparisonType","level","permissionLevels","COMPANY_SUBSIDIARIES","code","b2bPermissionsMap","state","bcLanguage","useContext","GlobalContext","handleSetOrderBy","order","orderBy","useSort","sortIdArr","defaultSortKey","location","useLocation","isFiltering","Object","keys","some","key","handleViewInvoice","async","status","invoiceCompanyId","invoicePay","isPayNow","pdfUrl","handlePrintPDF","snackbar","error","href","window","includes","open","err","b2bLogger","useEffect","newInitFilter","initFilter","companyIds","search","params","URLSearchParams","getInvoiceId","get","getReceiptId","q","InvoiceListType","DETAIL","CHECKOUT","NORMAL","selectedInvoice","filter","item","node","openBalance","value","length","cloneDeep","newArr","map","checkedItem","currentSelectedItem","find","selectedId","currentOpenBalance","handleSetSelectedInvoiceAccountNumber","val","result","wholeDecimalNumber","split","movePoint","newVal","slice","formattingNumericValues","handleSetSelectedInvoiceAccount","newPrice","invoiceId","currentOriginInvoice","newInvoices","selectedItem","currentOriginOpenBalance","columnAllItems","title","isSortable","render","jsx","Box","sx","color","cursor","textDecoration","onClick","companyId","children","invoiceNumber","width","companyName","orderNumber","createdAt","displayFormat","dueDate","isOverdue","Typography","fontSize","originalBalance","originalAmount","handleGetCorrespondingCurrencyToken","openAmount","currentCode","valuePrice","disabled","currentSelected","selectedOpenBalance","TextField","variant","InputProps","startAdornment","InputAdornment","position","padding","marginTop","paddingTop","WebkitAppearance","margin","onChange","e","target","InvoiceStatus","row","actionRow","B3Pulldown","setInvoiceId","handleOpenHistoryModal","isCurrentCompany","exportCsvTexts","filtering","currentCheckedArr","item2","translatedFilterFormConfigs","filterFormConfig","element","config","name","label","filterFormConfigsTranslationVariables","options","option","jsxs","B3Spin","isSpinning","overflowX","display","flexDirection","flex","justifyContent","alignItems","mr","mb","B2BAutoCompleteCheckbox","handleChangeCompanyIds","newCompanyIds","B3Filter","filterMoreInfo","handleChange","handleFilterChange","startValue","getUTCTimestamp","endValue","beginDateAt","endDateAt","beginDueDateAt","parseInt","endDueDateAt","startPicker","isEnabled","defaultValue","pickerKey","endPicker","searchValue","pcContainerWidth","pcSearchContainerWidth","marginBottom","document","body","clientWidth","unpaid","currencyFormat","overdue","B3PaginationTable","ref","columnItems","rowsPerPageOptions","getRequestList","invoices","edges","totalCount","getInvoiceList","invoicesList","forEach","isCollapse","invoiceNode","disableCurrentCheckbox","originValue","invoiceStats","getInvoiceStats","overDueBalance","totalBalance","handleStatisticsInvoiceAmount","copyCacheFilterList","cache","push","cacheFilterLists","searchParams","isCustomRender","requestLoading","tableKey","showCheckbox","showSelectAllCheckbox","disableCheckbox","applyAllDisableCheckbox","getSelectCheckbox","selectCheckbox","productList","current","getCacheList","newEnableItems","product","CollapseComponent","PrintTemplate","sortDirection","sortByFn","isSelectOtherPageCheckbox","hover","isAutoRefresh","renderItem","index","checkBox","InvoiceItemCard","handleGetCorrespondingCurrency","addBottom","bottom","left","Button","invoiceStatus","orderByFiled","orderByStr","String","exportOrderByArr","invoiceFilterData","idIn","invoicesExport","exportInvoicesAsCSV","lang","url","InvoiceFooter","PaymentsHistory","setOpen","PaymentSuccess","getInvoiceDownloadPDFUrl","invoicePdf","invoiceDownloadPDF","Promise","resolve","reject","fetch","then","res","blob","response","Blob","invoicePDFUrl","URL","createObjectURL","catch","analyzePDFUrl","StyledMenu","styled","Menu","boxShadow","borderRadius","platform","global","storeInfo","isOpen","setIsOpen","isPay","setIsPay","getOrderPermission","getOrderPermissionCode","isCanViewOrder","setIsCanViewOrder","close","handleDownloadPDF","fileName","a","createElement","download","click","triggerPdfDownload","orderUserId","payPermissions","viewOrderPermission","verifyLevelPermission","userId","Fragment","IconButton","handleMoreActionsClick","MoreHorizIcon","anchorEl","onClose","MenuListProps","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","handleViewOrder","lineItems","amount","currency","gotoInvoiceCheckoutUrl","props","selectedAccount","setSelectedAccount","currentToken","setCurrentToken","containerStyle","token","Grid","backgroundColor","height","marginLeft","flexWrap","zIndex","container","spacing","paddingLeft","flexBasis","flexGrow","pr","fontWeight","total","currentValue","handlePay","textColor","B3Tag","Title","HistoryList","paymentType","transactionType","referenceNumber","Card","CardContent","wordBreak","loading","setLoading","allReceiptLines","getInvoicePaymentHistory","init","B3Dialog","leftSizeBtn","rightSizeBtn","showLeftBtn","handRightClick","maxHeight","B3NoData","required","default","fieldType","xs","size","partialPaid","paid","updatedAt","originalBalanceAmount","openBalanceAmount","withColon","Row","isRow","getNewVal","trim","toUpperCase","toLowerCase","PaymentSuccessList","receiptLineSet","details","comment","paymentDetails","idLang","totalCode","borderBottom","accountValue","detailData","setDetailData","receipt","getInvoicePaymentInfo","handleCloseClick","customActions","templateMinHeight","dom","setHeight","PDFObject","embed","viewPrint","overflow","backgroundRepeat","backgroundOrigin","boxSizing","Resizable","className","minConstraints","offsetWidth","onResize","onFirstBoxResize","_","resizeHandles","style","StyleCheckoutContainer","currentCurrencyToken","statusCode","groupId","useId","mt","whiteSpace","first","offset"],"mappings":"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"}